

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Fri Jul 21 15:40:44 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og1 
     1                           	processor	18F258
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    37                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    38                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    39                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    40                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    41   000000                     
    42                           ; Version 2.40
    43                           ; Generated 17/11/2021 GMT
    44                           ; 
    45                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    46                           ; All rights reserved.
    47                           ; 
    48                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    49                           ; 
    50                           ; Redistribution and use in source and binary forms, with or without modification, are
    51                           ; permitted provided that the following conditions are met:
    52                           ; 
    53                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    54                           ;        conditions and the following disclaimer.
    55                           ; 
    56                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    57                           ;        of conditions and the following disclaimer in the documentation and/or other
    58                           ;        materials provided with the distribution. Publication is not required when
    59                           ;        this file is used in an embedded application.
    60                           ; 
    61                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    62                           ;        software without specific prior written permission.
    63                           ; 
    64                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    65                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    66                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    67                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    68                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    69                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    70                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    71                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    72                           ; 
    73                           ; 
    74                           ; Code-generator required, PIC18F258 Definitions
    75                           ; 
    76                           ; SFR Addresses
    77   000000                     
    78                           	psect	idataBANK0
    79   00169E                     __pidataBANK0:
    80                           	callstack 0
    81                           
    82                           ;initializer for _BufferDAT
    83   00169E  58                 	db	88
    84   00169F  58                 	db	88
    85   0016A0  58                 	db	88
    86   0016A1  58                 	db	88
    87   0016A2  58                 	db	88
    88   0016A3  58                 	db	88
    89   0016A4  58                 	db	88
    90   0016A5  58                 	db	88
    91   0016A6  58                 	db	88
    92   0016A7  58                 	db	88
    93   0016A8  58                 	db	88
    94   0016A9  58                 	db	88
    95   0016AA  00                 	db	0
    96   000000                     _TXREG	set	4013
    97   000000                     _RCREG	set	4014
    98   000000                     _SPBRG	set	4015
    99   000000                     _TXSTA	set	4012
   100   000000                     _ADCON1bits	set	4033
   101   000000                     _TXSTAbits	set	4012
   102   000000                     _T2CONbits	set	4042
   103   000000                     _RCSTA	set	4011
   104   000000                     _TRISCbits	set	3988
   105   000000                     _INTCON	set	4082
   106   000000                     _LATB	set	3978
   107   000000                     _LATA	set	3977
   108   000000                     _PORTB	set	3969
   109   000000                     _PIE1bits	set	3997
   110   000000                     _RCSTAbits	set	4011
   111   000000                     _T0CON	set	4053
   112   000000                     _TMR0L	set	4054
   113   000000                     _TMR0H	set	4055
   114   000000                     _PIR1bits	set	3998
   115   000000                     _PORTCbits	set	3970
   116   000000                     _LATAbits	set	3977
   117   000000                     _LATBbits	set	3978
   118   000000                     _TRISA	set	3986
   119   000000                     _LATC	set	3979
   120   000000                     _INTCONbits	set	4082
   121   000000                     _SSPCON1bits	set	4038
   122   000000                     _SSPSTATbits	set	4039
   123   000000                     _T2CON	set	4042
   124   000000                     _RCONbits	set	4048
   125   000000                     _TRISC	set	3988
   126   000000                     _TRISB	set	3987
   127   000000                     _TMR2	set	4044
   128   000000                     _PR2	set	4043
   129   000000                     _SSPBUF	set	4041
   130                           
   131                           	psect	smallconst
   132   00104E                     __psmallconst:
   133                           	callstack 0
   134   00104E  00                 	db	0
   135   00104F                     STR_1:
   136   00104F  47                 	db	71	;'G'
   137   001050  2D                 	db	45
   138   001051  4A                 	db	74	;'J'
   139   001052  52                 	db	82	;'R'
   140   001053  4F                 	db	79	;'O'
   141   001054  44                 	db	68	;'D'
   142   001055  41                 	db	65	;'A'
   143   001056  54                 	db	84	;'T'
   144   001057  45                 	db	69	;'E'
   145   001058  58                 	db	88	;'X'
   146   001059  58                 	db	88	;'X'
   147   00105A  58                 	db	88	;'X'
   148   00105B  58                 	db	88	;'X'
   149   00105C  58                 	db	88	;'X'
   150   00105D  58                 	db	88	;'X'
   151   00105E  58                 	db	88	;'X'
   152   00105F  58                 	db	88	;'X'
   153   001060  58                 	db	88	;'X'
   154   001061  58                 	db	88	;'X'
   155   001062  58                 	db	88	;'X'
   156   001063  58                 	db	88	;'X'
   157   001064  0A                 	db	10
   158   001065  0D                 	db	13
   159   001066  00                 	db	0
   160   001067                     STR_6:
   161   001067  4E                 	db	78	;'N'
   162   001068  4E                 	db	78	;'N'
   163   001069  4E                 	db	78	;'N'
   164   00106A  4E                 	db	78	;'N'
   165   00106B  4A                 	db	74	;'J'
   166   00106C  52                 	db	82	;'R'
   167   00106D  4F                 	db	79	;'O'
   168   00106E  43                 	db	67	;'C'
   169   00106F  4D                 	db	77	;'M'
   170   001070  44                 	db	68	;'D'
   171   001071  00                 	db	0
   172   001072                     STR_8:
   173   001072  4E                 	db	78	;'N'
   174   001073  4E                 	db	78	;'N'
   175   001074  4E                 	db	78	;'N'
   176   001075  4E                 	db	78	;'N'
   177   001076  4A                 	db	74	;'J'
   178   001077  52                 	db	82	;'R'
   179   001078  4F                 	db	79	;'O'
   180   001079  44                 	db	68	;'D'
   181   00107A  41                 	db	65	;'A'
   182   00107B  54                 	db	84	;'T'
   183   00107C  00                 	db	0
   184   00107D                     STR_2:
   185   00107D  4A                 	db	74	;'J'
   186   00107E  52                 	db	82	;'R'
   187   00107F  4F                 	db	79	;'O'
   188   001080  41                 	db	65	;'A'
   189   001081  44                 	db	68	;'D'
   190   001082  51                 	db	81	;'Q'
   191   001083  00                 	db	0
   192   001084  00                 	db	0	; dummy byte at the end
   193   000000                     
   194                           ; #config settings
   195                           
   196                           	psect	cinit
   197   0014AA                     __pcinit:
   198                           	callstack 0
   199   0014AA                     start_initialization:
   200                           	callstack 0
   201   0014AA                     __initialization:
   202                           	callstack 0
   203                           
   204                           ; Initialize objects allocated to BANK0 (13 bytes)
   205                           ; load TBLPTR registers with __pidataBANK0
   206   0014AA  0E9E               	movlw	low __pidataBANK0
   207   0014AC  6EF6               	movwf	tblptrl,c
   208   0014AE  0E16               	movlw	high __pidataBANK0
   209   0014B0  6EF7               	movwf	tblptrh,c
   210   0014B2  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   211   0014B4  6EF8               	movwf	tblptru,c
   212   0014B6  EE00  F074         	lfsr	0,__pdataBANK0
   213   0014BA  EE10 F00D          	lfsr	1,13
   214   0014BE                     copy_data0:
   215   0014BE  0009               	tblrd		*+
   216   0014C0  CFF5 FFEE          	movff	tablat,postinc0
   217   0014C4  50E5               	movf	postdec1,w,c
   218   0014C6  50E1               	movf	fsr1l,w,c
   219   0014C8  E1FA               	bnz	copy_data0
   220                           
   221                           ; Clear objects allocated to BANK0 (20 bytes)
   222   0014CA  EE00  F060         	lfsr	0,__pbssBANK0
   223   0014CE  0E14               	movlw	20
   224   0014D0                     clear_0:
   225   0014D0  6AEE               	clrf	postinc0,c
   226   0014D2  06E8               	decf	wreg,f,c
   227   0014D4  E1FD               	bnz	clear_0
   228                           
   229                           ; Clear objects allocated to COMRAM (63 bytes)
   230   0014D6  EE00  F001         	lfsr	0,__pbssCOMRAM
   231   0014DA  0E3F               	movlw	63
   232   0014DC                     clear_1:
   233   0014DC  6AEE               	clrf	postinc0,c
   234   0014DE  06E8               	decf	wreg,f,c
   235   0014E0  E1FD               	bnz	clear_1
   236   0014E2                     end_of_initialization:
   237                           	callstack 0
   238   0014E2                     __end_of__initialization:
   239                           	callstack 0
   240   0014E2  905C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   241   0014E4  925C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   242   0014E6  0E00               	movlw	low (__Lmediumconst shr (0+16))
   243   0014E8  6EF8               	movwf	tblptru,c
   244   0014EA  0100               	movlb	0
   245   0014EC  EFF8  F009         	goto	_main	;jump to C main() function
   246                           
   247                           	psect	bssCOMRAM
   248   000001                     __pbssCOMRAM:
   249                           	callstack 0
   250   000001                     _Data_AUX0:
   251                           	callstack 0
   252   000001                     	ds	4
   253   000005                     _Data_TS:
   254                           	callstack 0
   255   000005                     	ds	4
   256   000009                     _Data_TC:
   257                           	callstack 0
   258   000009                     	ds	4
   259   00000D                     _Data_Z:
   260                           	callstack 0
   261   00000D                     	ds	4
   262   000011                     _Data_Y:
   263                           	callstack 0
   264   000011                     	ds	4
   265   000015                     _Data_X:
   266                           	callstack 0
   267   000015                     	ds	4
   268   000019                     _SumData_AUX2:
   269                           	callstack 0
   270   000019                     	ds	4
   271   00001D                     _SumData_AUX1:
   272                           	callstack 0
   273   00001D                     	ds	4
   274   000021                     _SumData_AUX0:
   275                           	callstack 0
   276   000021                     	ds	4
   277   000025                     _SumData_TS:
   278                           	callstack 0
   279   000025                     	ds	4
   280   000029                     _SumData_TC:
   281                           	callstack 0
   282   000029                     	ds	4
   283   00002D                     _SumData_Z:
   284                           	callstack 0
   285   00002D                     	ds	4
   286   000031                     _SumData_Y:
   287                           	callstack 0
   288   000031                     	ds	4
   289   000035                     _SumData_X:
   290                           	callstack 0
   291   000035                     	ds	4
   292   000039                     _BufferSPI:
   293                           	callstack 0
   294   000039                     	ds	4
   295   00003D                     _ContaSample:
   296                           	callstack 0
   297   00003D                     	ds	1
   298   00003E                     _ControlSample:
   299                           	callstack 0
   300   00003E                     	ds	1
   301   00003F                     _CmdGPS:
   302                           	callstack 0
   303   00003F                     	ds	1
   304                           
   305                           	psect	bssBANK0
   306   000060                     __pbssBANK0:
   307                           	callstack 0
   308   000060                     _Data_GND:
   309                           	callstack 0
   310   000060                     	ds	4
   311   000064                     _Data_AUX2:
   312                           	callstack 0
   313   000064                     	ds	4
   314   000068                     _Data_AUX1:
   315                           	callstack 0
   316   000068                     	ds	4
   317   00006C                     _Data_G:
   318                           	callstack 0
   319   00006C                     	ds	4
   320   000070                     _SumData_GND:
   321                           	callstack 0
   322   000070                     	ds	4
   323                           
   324                           	psect	dataBANK0
   325   000074                     __pdataBANK0:
   326                           	callstack 0
   327   000074                     _BufferDAT:
   328                           	callstack 0
   329   000074                     	ds	13
   330                           
   331                           	psect	cstackBANK0
   332   000081                     __pcstackBANK0:
   333                           	callstack 0
   334   000081                     ??_main:
   335                           
   336                           ; 1 bytes @ 0x0
   337   000081                     	ds	2
   338                           
   339                           	psect	cstackCOMRAM
   340   000040                     __pcstackCOMRAM:
   341                           	callstack 0
   342   000040                     ?___lldiv:
   343                           	callstack 0
   344   000040                     ReadByte_USART@data:
   345                           	callstack 0
   346   000040                     WriteByte_USART@byte:
   347                           	callstack 0
   348   000040                     TransferByte_SPI@data:
   349                           	callstack 0
   350   000040                     ___lldiv@dividend:
   351                           	callstack 0
   352                           
   353                           ; 4 bytes @ 0x0
   354   000040                     	ds	1
   355   000041                     ReadByte_USART@conta:
   356                           	callstack 0
   357   000041                     ReadRegister_4bytesCS5532@command:
   358                           	callstack 0
   359   000041                     WriteRegister_4bytesCS5532@command:
   360                           	callstack 0
   361   000041                     print_string@str:
   362                           	callstack 0
   363   000041                     print_value@value:
   364                           	callstack 0
   365                           
   366                           ; 4 bytes @ 0x1
   367   000041                     	ds	1
   368   000042                     ??_ResetCS5532:
   369   000042                     ?_ReadAD24:
   370                           	callstack 0
   371   000042                     ReadByte_USART@Ready:
   372                           	callstack 0
   373   000042                     ReadAD24@cmd_convert:
   374                           	callstack 0
   375                           
   376                           ; 1 bytes @ 0x2
   377   000042                     	ds	1
   378   000043                     ReceiveCMD_USART@conta_byte:
   379                           	callstack 0
   380   000043                     TransmitCMD_USART@CMD_ID:
   381                           	callstack 0
   382   000043                     TransmitDAT_USART@DAT_ID:
   383                           	callstack 0
   384   000043                     ResetCS5532@conta:
   385                           	callstack 0
   386                           
   387                           ; 1 bytes @ 0x3
   388   000043                     	ds	1
   389   000044                     ReceiveCMD_USART@data_byte:
   390                           	callstack 0
   391   000044                     TransmitDAT_USART@conta:
   392                           	callstack 0
   393   000044                     ___lldiv@divisor:
   394                           	callstack 0
   395                           
   396                           ; 4 bytes @ 0x4
   397   000044                     	ds	1
   398   000045                     print_value@Bytes:
   399                           	callstack 0
   400                           
   401                           ; 3 bytes @ 0x5
   402   000045                     	ds	1
   403   000046                     ??_ReadAD24:
   404                           
   405                           ; 1 bytes @ 0x6
   406   000046                     	ds	2
   407   000048                     ___lldiv@quotient:
   408                           	callstack 0
   409                           
   410                           ; 4 bytes @ 0x8
   411   000048                     	ds	2
   412   00004A                     ReadAD24@flag_convert:
   413                           	callstack 0
   414                           
   415                           ; 1 bytes @ 0xA
   416   00004A                     	ds	1
   417   00004B                     ReadAD24@ByteUpper:
   418                           	callstack 0
   419                           
   420                           ; 1 bytes @ 0xB
   421   00004B                     	ds	1
   422   00004C                     ReadAD24@ByteHigh:
   423                           	callstack 0
   424   00004C                     ___lldiv@counter:
   425                           	callstack 0
   426                           
   427                           ; 1 bytes @ 0xC
   428   00004C                     	ds	1
   429   00004D                     ReadAD24@ByteLow:
   430                           	callstack 0
   431                           
   432                           ; 1 bytes @ 0xD
   433   00004D                     	ds	1
   434   00004E                     ReadAD24@DataADC:
   435                           	callstack 0
   436                           
   437                           ; 4 bytes @ 0xE
   438   00004E                     	ds	4
   439   000052                     ??_Interrups:
   440                           
   441                           ; 1 bytes @ 0x12
   442   000052                     	ds	8
   443   00005A                     Interrups@ID:
   444                           	callstack 0
   445                           
   446                           ; 1 bytes @ 0x1A
   447   00005A                     	ds	1
   448   00005B                     Interrups@conta:
   449                           	callstack 0
   450                           
   451                           ; 1 bytes @ 0x1B
   452   00005B                     	ds	1
   453                           
   454 ;;
   455 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   456 ;;
   457 ;; *************** function _main *****************
   458 ;; Defined at:
   459 ;;		line 431 in file "MagnetDigi24.c"
   460 ;; Parameters:    Size  Location     Type
   461 ;;		None
   462 ;; Auto vars:     Size  Location     Type
   463 ;;		None
   464 ;; Return value:  Size  Location     Type
   465 ;;                  1    wreg      void 
   466 ;; Registers used:
   467 ;;		wreg, status,2, cstack
   468 ;; Tracked objects:
   469 ;;		On entry : 0/0
   470 ;;		On exit  : 0/0
   471 ;;		Unchanged: 0/0
   472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   473 ;;      Params:         0       0       0       0       0       0       0
   474 ;;      Locals:         0       0       0       0       0       0       0
   475 ;;      Temps:          0       2       0       0       0       0       0
   476 ;;      Totals:         0       2       0       0       0       0       0
   477 ;;Total ram usage:        2 bytes
   478 ;; Hardware stack levels required when called: 6
   479 ;; This function calls:
   480 ;;		_ClosePort_SPI
   481 ;;		_CloseSerialPort
   482 ;;		_ConfigPort_SPI
   483 ;;		_ConfigSerialPort
   484 ;;		_OpenPort_SPI
   485 ;;		_OpenSerialPort
   486 ;; This function is called by:
   487 ;;		Startup code after reset
   488 ;; This function uses a non-reentrant model
   489 ;;
   490                           
   491                           	psect	text0
   492   0013F0                     __ptext0:
   493                           	callstack 0
   494   0013F0                     _main:
   495                           	callstack 25
   496   0013F0  FFFF               	dw	65535	; assembler added errata NOP
   497                           
   498                           ;MagnetDigi24.c: 435:     ADCON1bits.PCFG = 0x07;
   499   0013F2  50C1               	movf	193,w,c	;volatile
   500   0013F4  0BF0               	andlw	-16
   501   0013F6  0907               	iorlw	7
   502   0013F8  6EC1               	movwf	193,c	;volatile
   503                           
   504                           ;MagnetDigi24.c: 436:     LATA = 0;
   505   0013FA  0E00               	movlw	0
   506   0013FC  6E89               	movwf	137,c	;volatile
   507                           
   508                           ;MagnetDigi24.c: 437:     LATB = 0;
   509   0013FE  0E00               	movlw	0
   510   001400  6E8A               	movwf	138,c	;volatile
   511                           
   512                           ;MagnetDigi24.c: 438:     LATC = 0;
   513   001402  0E00               	movlw	0
   514   001404  6E8B               	movwf	139,c	;volatile
   515                           
   516                           ;MagnetDigi24.c: 439:     TRISA = 0x01;
   517   001406  0E01               	movlw	1
   518   001408  6E92               	movwf	146,c	;volatile
   519                           
   520                           ;MagnetDigi24.c: 440:     TRISB = 0x01;
   521   00140A  0E01               	movlw	1
   522   00140C  6E93               	movwf	147,c	;volatile
   523                           
   524                           ;MagnetDigi24.c: 441:     TRISC = 0x00;
   525   00140E  0E00               	movlw	0
   526   001410  6E94               	movwf	148,c	;volatile
   527   001412                     
   528                           ;MagnetDigi24.c: 442:     _delay((unsigned long)((100)*(39321600UL/4000.0)));
   529   001412  0E04               	movlw	4
   530   001414  0100               	movlb	0	; () banked
   531   001416  6F82               	movwf	(??_main+1)& (0+255),b
   532   001418  0EBF               	movlw	191
   533   00141A  6F81               	movwf	??_main& (0+255),b
   534   00141C  0E1D               	movlw	29
   535   00141E                     u907:
   536   00141E  FFFF               	dw	65535	; errata NOP
   537   001420  2EE8               	decfsz	wreg,f,c
   538   001422  D7FD               	bra	u907
   539   001424  2F81               	decfsz	??_main& (0+255),f,b
   540   001426  D7FB               	bra	u907
   541   001428  2F82               	decfsz	(??_main+1)& (0+255),f,b
   542   00142A  D7F9               	bra	u907
   543   00142C  F000               	nop	
   544   00142E                     
   545                           ;MagnetDigi24.c: 446:     ConfigSerialPort();
   546   00142E  EC33  F00B         	call	_ConfigSerialPort	;wreg free
   547   001432                     
   548                           ;MagnetDigi24.c: 447:     OpenSerialPort();
   549   001432  EC56  F00B         	call	_OpenSerialPort	;wreg free
   550   001436                     
   551                           ;MagnetDigi24.c: 451:     ConfigPort_SPI();
   552   001436  EC42  F00B         	call	_ConfigPort_SPI	;wreg free
   553   00143A                     
   554                           ;MagnetDigi24.c: 452:     OpenPort_SPI();
   555   00143A  EC5A  F00B         	call	_OpenPort_SPI	;wreg free
   556   00143E                     
   557                           ;MagnetDigi24.c: 456:     RCONbits.IPEN = 0;
   558   00143E  9ED0               	bcf	208,7,c	;volatile
   559   001440                     
   560                           ;MagnetDigi24.c: 457:     INTCON = 0x00;
   561   001440  0E00               	movlw	0
   562   001442  6EF2               	movwf	242,c	;volatile
   563   001444                     
   564                           ;MagnetDigi24.c: 460:     INTCONbits.PEIE = 1;
   565   001444  8CF2               	bsf	242,6,c	;volatile
   566   001446                     
   567                           ;MagnetDigi24.c: 461:     INTCONbits.GIE = 1;
   568   001446  8EF2               	bsf	242,7,c	;volatile
   569   001448                     
   570                           ;MagnetDigi24.c: 464:     LATAbits.LA2 = 0;
   571   001448  9489               	bcf	137,2,c	;volatile
   572   00144A                     
   573                           ;MagnetDigi24.c: 465:     LATBbits.LB7 = 0;
   574   00144A  9E8A               	bcf	138,7,c	;volatile
   575   00144C                     l187:
   576   00144C  FFFF               	dw	65535	; assembler added errata NOP
   577   00144E  EF26  F00A         	goto	l187
   578   001452  EF25  F008         	goto	start
   579   001456                     __end_of_main:
   580                           	callstack 0
   581                           
   582 ;; *************** function _OpenSerialPort *****************
   583 ;; Defined at:
   584 ;;		line 22 in file "Lib258_serial.c"
   585 ;; Parameters:    Size  Location     Type
   586 ;;		None
   587 ;; Auto vars:     Size  Location     Type
   588 ;;		None
   589 ;; Return value:  Size  Location     Type
   590 ;;                  1    wreg      void 
   591 ;; Registers used:
   592 ;;		None
   593 ;; Tracked objects:
   594 ;;		On entry : 0/0
   595 ;;		On exit  : 0/0
   596 ;;		Unchanged: 0/0
   597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   598 ;;      Params:         0       0       0       0       0       0       0
   599 ;;      Locals:         0       0       0       0       0       0       0
   600 ;;      Temps:          0       0       0       0       0       0       0
   601 ;;      Totals:         0       0       0       0       0       0       0
   602 ;;Total ram usage:        0 bytes
   603 ;; Hardware stack levels used: 1
   604 ;; Hardware stack levels required when called: 5
   605 ;; This function calls:
   606 ;;		Nothing
   607 ;; This function is called by:
   608 ;;		_main
   609 ;; This function uses a non-reentrant model
   610 ;;
   611                           
   612                           	psect	text1
   613   0016AC                     __ptext1:
   614                           	callstack 0
   615   0016AC                     _OpenSerialPort:
   616                           	callstack 0
   617   0016AC  FFFF               	dw	65535	; assembler added errata NOP
   618   0016AE                     
   619                           ;Lib258_serial.c: 24:     RCSTAbits.SPEN = 1;
   620   0016AE  8EAB               	bsf	171,7,c	;volatile
   621   0016B0  0012               	return		;funcret
   622   0016B2  FFFF               	dw	65535	; errata NOP
   623   0016B4                     __end_of_OpenSerialPort:
   624                           	callstack 0
   625                           
   626 ;; *************** function _OpenPort_SPI *****************
   627 ;; Defined at:
   628 ;;		line 19 in file "Lib258_spi.c"
   629 ;; Parameters:    Size  Location     Type
   630 ;;		None
   631 ;; Auto vars:     Size  Location     Type
   632 ;;		None
   633 ;; Return value:  Size  Location     Type
   634 ;;                  1    wreg      void 
   635 ;; Registers used:
   636 ;;		None
   637 ;; Tracked objects:
   638 ;;		On entry : 0/0
   639 ;;		On exit  : 0/0
   640 ;;		Unchanged: 0/0
   641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   642 ;;      Params:         0       0       0       0       0       0       0
   643 ;;      Locals:         0       0       0       0       0       0       0
   644 ;;      Temps:          0       0       0       0       0       0       0
   645 ;;      Totals:         0       0       0       0       0       0       0
   646 ;;Total ram usage:        0 bytes
   647 ;; Hardware stack levels used: 1
   648 ;; Hardware stack levels required when called: 5
   649 ;; This function calls:
   650 ;;		Nothing
   651 ;; This function is called by:
   652 ;;		_main
   653 ;; This function uses a non-reentrant model
   654 ;;
   655                           
   656                           	psect	text2
   657   0016B4                     __ptext2:
   658                           	callstack 0
   659   0016B4                     _OpenPort_SPI:
   660                           	callstack 0
   661   0016B4  FFFF               	dw	65535	; assembler added errata NOP
   662   0016B6                     
   663                           ;Lib258_spi.c: 21:     SSPCON1bits.SSPEN = 1;
   664   0016B6  8AC6               	bsf	198,5,c	;volatile
   665   0016B8  0012               	return		;funcret
   666   0016BA  FFFF               	dw	65535	; errata NOP
   667   0016BC                     __end_of_OpenPort_SPI:
   668                           	callstack 0
   669                           
   670 ;; *************** function _ConfigSerialPort *****************
   671 ;; Defined at:
   672 ;;		line 4 in file "Lib258_serial.c"
   673 ;; Parameters:    Size  Location     Type
   674 ;;		None
   675 ;; Auto vars:     Size  Location     Type
   676 ;;		None
   677 ;; Return value:  Size  Location     Type
   678 ;;                  1    wreg      void 
   679 ;; Registers used:
   680 ;;		wreg, status,2
   681 ;; Tracked objects:
   682 ;;		On entry : 0/0
   683 ;;		On exit  : 0/0
   684 ;;		Unchanged: 0/0
   685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   686 ;;      Params:         0       0       0       0       0       0       0
   687 ;;      Locals:         0       0       0       0       0       0       0
   688 ;;      Temps:          0       0       0       0       0       0       0
   689 ;;      Totals:         0       0       0       0       0       0       0
   690 ;;Total ram usage:        0 bytes
   691 ;; Hardware stack levels used: 1
   692 ;; Hardware stack levels required when called: 5
   693 ;; This function calls:
   694 ;;		Nothing
   695 ;; This function is called by:
   696 ;;		_main
   697 ;; This function uses a non-reentrant model
   698 ;;
   699                           
   700                           	psect	text3
   701   001666                     __ptext3:
   702                           	callstack 0
   703   001666                     _ConfigSerialPort:
   704                           	callstack 0
   705   001666  FFFF               	dw	65535	; assembler added errata NOP
   706   001668                     
   707                           ;Lib258_serial.c: 6:     TRISCbits.TRISC6 = 0;
   708   001668  9C94               	bcf	148,6,c	;volatile
   709                           
   710                           ;Lib258_serial.c: 7:     TRISCbits.TRISC7 = 1;
   711   00166A  8E94               	bsf	148,7,c	;volatile
   712   00166C                     
   713                           ;Lib258_serial.c: 9:     TXSTA = 0b00100100;
   714   00166C  0E24               	movlw	36
   715   00166E  6EAC               	movwf	172,c	;volatile
   716                           
   717                           ;Lib258_serial.c: 10:     RCSTA = 0b00010000;
   718   001670  0E10               	movlw	16
   719   001672  6EAB               	movwf	171,c	;volatile
   720                           
   721                           ;Lib258_serial.c: 12:     SPBRG = 63;
   722   001674  0E3F               	movlw	63
   723   001676  6EAF               	movwf	175,c	;volatile
   724   001678                     
   725                           ;Lib258_serial.c: 14:     PIE1bits.RCIE = 1;
   726   001678  8A9D               	bsf	157,5,c	;volatile
   727                           
   728                           ;Lib258_serial.c: 16:     T2CON = 0b01111011;
   729   00167A  0E7B               	movlw	123
   730   00167C  6ECA               	movwf	202,c	;volatile
   731   00167E                     
   732                           ;Lib258_serial.c: 17:     PR2 = 0xFF;
   733   00167E  68CB               	setf	203,c	;volatile
   734   001680  0012               	return		;funcret
   735   001682  FFFF               	dw	65535	; errata NOP
   736   001684                     __end_of_ConfigSerialPort:
   737                           	callstack 0
   738                           
   739 ;; *************** function _ConfigPort_SPI *****************
   740 ;; Defined at:
   741 ;;		line 5 in file "Lib258_spi.c"
   742 ;; Parameters:    Size  Location     Type
   743 ;;		None
   744 ;; Auto vars:     Size  Location     Type
   745 ;;		None
   746 ;; Return value:  Size  Location     Type
   747 ;;                  1    wreg      void 
   748 ;; Registers used:
   749 ;;		wreg, status,2
   750 ;; Tracked objects:
   751 ;;		On entry : 0/0
   752 ;;		On exit  : 0/0
   753 ;;		Unchanged: 0/0
   754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   755 ;;      Params:         0       0       0       0       0       0       0
   756 ;;      Locals:         0       0       0       0       0       0       0
   757 ;;      Temps:          0       0       0       0       0       0       0
   758 ;;      Totals:         0       0       0       0       0       0       0
   759 ;;Total ram usage:        0 bytes
   760 ;; Hardware stack levels used: 1
   761 ;; Hardware stack levels required when called: 5
   762 ;; This function calls:
   763 ;;		Nothing
   764 ;; This function is called by:
   765 ;;		_main
   766 ;; This function uses a non-reentrant model
   767 ;;
   768                           
   769                           	psect	text4
   770   001684                     __ptext4:
   771                           	callstack 0
   772   001684                     _ConfigPort_SPI:
   773                           	callstack 0
   774   001684  FFFF               	dw	65535	; assembler added errata NOP
   775   001686                     
   776                           ;Lib258_spi.c: 7:     TRISCbits.TRISC3 = 0;
   777   001686  9694               	bcf	148,3,c	;volatile
   778                           
   779                           ;Lib258_spi.c: 8:     TRISCbits.TRISC4 = 1;
   780   001688  8894               	bsf	148,4,c	;volatile
   781                           
   782                           ;Lib258_spi.c: 9:     TRISCbits.TRISC5 = 0;
   783   00168A  9A94               	bcf	148,5,c	;volatile
   784                           
   785                           ;Lib258_spi.c: 11:     SSPSTATbits.SMP = 0;
   786   00168C  9EC7               	bcf	199,7,c	;volatile
   787                           
   788                           ;Lib258_spi.c: 12:     SSPSTATbits.CKE = 1;
   789   00168E  8CC7               	bsf	199,6,c	;volatile
   790                           
   791                           ;Lib258_spi.c: 13:     SSPCON1bits.CKP = 0;
   792   001690  98C6               	bcf	198,4,c	;volatile
   793   001692                     
   794                           ;Lib258_spi.c: 14:     SSPCON1bits.SSPM = 2;
   795   001692  50C6               	movf	198,w,c	;volatile
   796   001694  0BF0               	andlw	-16
   797   001696  0902               	iorlw	2
   798   001698  6EC6               	movwf	198,c	;volatile
   799   00169A  0012               	return		;funcret
   800   00169C  FFFF               	dw	65535	; errata NOP
   801   00169E                     __end_of_ConfigPort_SPI:
   802                           	callstack 0
   803                           
   804 ;; *************** function _CloseSerialPort *****************
   805 ;; Defined at:
   806 ;;		line 29 in file "Lib258_serial.c"
   807 ;; Parameters:    Size  Location     Type
   808 ;;		None
   809 ;; Auto vars:     Size  Location     Type
   810 ;;		None
   811 ;; Return value:  Size  Location     Type
   812 ;;                  1    wreg      void 
   813 ;; Registers used:
   814 ;;		None
   815 ;; Tracked objects:
   816 ;;		On entry : 0/0
   817 ;;		On exit  : 0/0
   818 ;;		Unchanged: 0/0
   819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   820 ;;      Params:         0       0       0       0       0       0       0
   821 ;;      Locals:         0       0       0       0       0       0       0
   822 ;;      Temps:          0       0       0       0       0       0       0
   823 ;;      Totals:         0       0       0       0       0       0       0
   824 ;;Total ram usage:        0 bytes
   825 ;; Hardware stack levels used: 1
   826 ;; Hardware stack levels required when called: 5
   827 ;; This function calls:
   828 ;;		Nothing
   829 ;; This function is called by:
   830 ;;		_main
   831 ;; This function uses a non-reentrant model
   832 ;;
   833                           
   834                           	psect	text5
   835   0016BC                     __ptext5:
   836                           	callstack 0
   837   0016BC                     _CloseSerialPort:
   838                           	callstack 25
   839   0016BC  FFFF               	dw	65535	; assembler added errata NOP
   840                           
   841                           ;Lib258_serial.c: 31:     RCSTAbits.SPEN = 0;
   842   0016BE  9EAB               	bcf	171,7,c	;volatile
   843   0016C0  0012               	return		;funcret
   844   0016C2  FFFF               	dw	65535	; errata NOP
   845   0016C4                     __end_of_CloseSerialPort:
   846                           	callstack 0
   847                           
   848 ;; *************** function _ClosePort_SPI *****************
   849 ;; Defined at:
   850 ;;		line 26 in file "Lib258_spi.c"
   851 ;; Parameters:    Size  Location     Type
   852 ;;		None
   853 ;; Auto vars:     Size  Location     Type
   854 ;;		None
   855 ;; Return value:  Size  Location     Type
   856 ;;                  1    wreg      void 
   857 ;; Registers used:
   858 ;;		None
   859 ;; Tracked objects:
   860 ;;		On entry : 0/0
   861 ;;		On exit  : 0/0
   862 ;;		Unchanged: 0/0
   863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   864 ;;      Params:         0       0       0       0       0       0       0
   865 ;;      Locals:         0       0       0       0       0       0       0
   866 ;;      Temps:          0       0       0       0       0       0       0
   867 ;;      Totals:         0       0       0       0       0       0       0
   868 ;;Total ram usage:        0 bytes
   869 ;; Hardware stack levels used: 1
   870 ;; Hardware stack levels required when called: 5
   871 ;; This function calls:
   872 ;;		Nothing
   873 ;; This function is called by:
   874 ;;		_main
   875 ;; This function uses a non-reentrant model
   876 ;;
   877                           
   878                           	psect	text6
   879   0016C4                     __ptext6:
   880                           	callstack 0
   881   0016C4                     _ClosePort_SPI:
   882                           	callstack 25
   883   0016C4  FFFF               	dw	65535	; assembler added errata NOP
   884                           
   885                           ;Lib258_spi.c: 28:     SSPCON1bits.SSPEN = 0;
   886   0016C6  9AC6               	bcf	198,5,c	;volatile
   887   0016C8  0012               	return		;funcret
   888   0016CA  FFFF               	dw	65535	; errata NOP
   889   0016CC                     __end_of_ClosePort_SPI:
   890                           	callstack 0
   891                           
   892 ;; *************** function _Interrups *****************
   893 ;; Defined at:
   894 ;;		line 54 in file "MagnetDigi24.c"
   895 ;; Parameters:    Size  Location     Type
   896 ;;		None
   897 ;; Auto vars:     Size  Location     Type
   898 ;;  conta           1   27[COMRAM] unsigned char 
   899 ;;  ID              1   26[COMRAM] unsigned char 
   900 ;; Return value:  Size  Location     Type
   901 ;;                  1    wreg      void 
   902 ;; Registers used:
   903 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   904 ;; Tracked objects:
   905 ;;		On entry : 0/0
   906 ;;		On exit  : 0/0
   907 ;;		Unchanged: 0/0
   908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   909 ;;      Params:         0       0       0       0       0       0       0
   910 ;;      Locals:         2       0       0       0       0       0       0
   911 ;;      Temps:          8       0       0       0       0       0       0
   912 ;;      Totals:        10       0       0       0       0       0       0
   913 ;;Total ram usage:       10 bytes
   914 ;; Hardware stack levels used: 1
   915 ;; Hardware stack levels required when called: 4
   916 ;; This function calls:
   917 ;;		_CleanHolding
   918 ;;		_InitCS5532
   919 ;;		_ReadAD24
   920 ;;		_ReadRegister_4bytesCS5532
   921 ;;		_ReceiveCMD_USART
   922 ;;		_ResetCS5532
   923 ;;		_TransferByte_SPI
   924 ;;		_TransmitCMD_USART
   925 ;;		_TransmitDAT_USART
   926 ;;		_WriteByte_USART
   927 ;;		___lldiv
   928 ;;		_print_string
   929 ;;		_print_value
   930 ;; This function is called by:
   931 ;;		Interrupt level 2
   932 ;; This function uses a non-reentrant model
   933 ;;
   934                           
   935                           	psect	intcode
   936   000008                     __pintcode:
   937                           	callstack 0
   938   000008                     _Interrups:
   939                           	callstack 0
   940   000008  FFFF               	dw	65535	; assembler added errata NOP
   941                           
   942                           ;incstack = 0
   943   00000A  825C               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
   944   00000C  CFD9 F054          	movff	fsr2l,??_Interrups+2
   945   000010  CFDA F055          	movff	fsr2h,??_Interrups+3
   946   000014  CFF6 F056          	movff	tblptrl,??_Interrups+4
   947   000018  CFF7 F057          	movff	tblptrh,??_Interrups+5
   948   00001C  CFF8 F058          	movff	tblptru,??_Interrups+6
   949   000020  CFF5 F059          	movff	tablat,??_Interrups+7
   950   000024                     
   951                           ;MagnetDigi24.c: 55:     unsigned char ID, conta;;MagnetDigi24.c: 57:     if((PIE1bits.R
      +                          C1IE == 1) && (PIR1bits.RC1IF == 1)){
   952   000024  AA9D               	btfss	157,5,c	;volatile
   953   000026  EF17  F000         	goto	i2u67_41
   954   00002A  EF1A  F000         	goto	i2u67_40
   955   00002E                     i2u67_41:
   956   00002E  FFFF               	dw	65535	; assembler added errata NOP
   957   000030  EFA0  F004         	goto	i2l129
   958   000034                     i2u67_40:
   959   000034  FFFF               	dw	65535	; assembler added errata NOP
   960   000036  AA9E               	btfss	158,5,c	;volatile
   961   000038  EF20  F000         	goto	i2u68_41
   962   00003C  EF23  F000         	goto	i2u68_40
   963   000040                     i2u68_41:
   964   000040  FFFF               	dw	65535	; assembler added errata NOP
   965   000042  EFA0  F004         	goto	i2l129
   966   000046                     i2u68_40:
   967   000046  FFFF               	dw	65535	; assembler added errata NOP
   968   000048                     
   969                           ;MagnetDigi24.c: 58:         ID = ReceiveCMD_USART();
   970   000048  EC43  F008         	call	_ReceiveCMD_USART	;wreg free
   971   00004C  6E5A               	movwf	Interrups@ID^0,c
   972                           
   973                           ;MagnetDigi24.c: 59:         switch(ID){
   974   00004E  EF69  F004         	goto	i2l2427
   975   000052                     i2l2099:
   976   000052  FFFF               	dw	65535	; assembler added errata NOP
   977                           
   978                           ;MagnetDigi24.c: 61:                 TransmitCMD_USART('5');
   979   000054  0E35               	movlw	53
   980   000056  ECC7  F00A         	call	_TransmitCMD_USART
   981   00005A                     
   982                           ;MagnetDigi24.c: 62:                 ControlSample = 0;
   983   00005A  0E00               	movlw	0
   984   00005C  6E3E               	movwf	_ControlSample^0,c
   985                           
   986                           ;MagnetDigi24.c: 63:                 break;
   987   00005E  EF15  F008         	goto	i2l182
   988   000062                     i2l2103:
   989   000062  FFFF               	dw	65535	; assembler added errata NOP
   990                           
   991                           ;MagnetDigi24.c: 66:                 TransmitCMD_USART('0');
   992   000064  0E30               	movlw	48
   993   000066  ECC7  F00A         	call	_TransmitCMD_USART
   994   00006A                     
   995                           ;MagnetDigi24.c: 67:                 BufferDAT[0] = 'V';
   996   00006A  0E56               	movlw	86
   997   00006C  0100               	movlb	0	; () banked
   998   00006E  6F74               	movwf	_BufferDAT& (0+255),b
   999   000070                     
  1000                           ; BSR set to: 0
  1001                           ;MagnetDigi24.c: 68:                 BufferDAT[1] = '2';
  1002   000070  0E32               	movlw	50
  1003   000072  6F75               	movwf	(_BufferDAT+1)& (0+255),b
  1004   000074                     
  1005                           ; BSR set to: 0
  1006                           ;MagnetDigi24.c: 69:                 BufferDAT[2] = '0';
  1007   000074  0E30               	movlw	48
  1008   000076  6F76               	movwf	(_BufferDAT+2)& (0+255),b
  1009   000078                     
  1010                           ; BSR set to: 0
  1011                           ;MagnetDigi24.c: 70:                 BufferDAT[12] = '\0';
  1012   000078  0E00               	movlw	0
  1013   00007A  6F80               	movwf	(_BufferDAT+12)& (0+255),b
  1014   00007C                     
  1015                           ; BSR set to: 0
  1016                           ;MagnetDigi24.c: 71:                 TransmitDAT_USART('0');
  1017   00007C  0E30               	movlw	48
  1018   00007E  EC2B  F00A         	call	_TransmitDAT_USART
  1019                           
  1020                           ;MagnetDigi24.c: 72:                 break;
  1021   000082  EF15  F008         	goto	i2l182
  1022   000086                     i2l2115:
  1023   000086  FFFF               	dw	65535	; assembler added errata NOP
  1024                           
  1025                           ;MagnetDigi24.c: 75:                 TransmitCMD_USART('1');
  1026   000088  0E31               	movlw	49
  1027   00008A  ECC7  F00A         	call	_TransmitCMD_USART
  1028                           
  1029                           ;MagnetDigi24.c: 79:                 break;
  1030   00008E  EF15  F008         	goto	i2l182
  1031   000092                     i2l2117:
  1032   000092  FFFF               	dw	65535	; assembler added errata NOP
  1033                           
  1034                           ;MagnetDigi24.c: 82:                 TransmitCMD_USART('2');
  1035   000094  0E32               	movlw	50
  1036   000096  ECC7  F00A         	call	_TransmitCMD_USART
  1037                           
  1038                           ;MagnetDigi24.c: 86:                 break;
  1039   00009A  EF15  F008         	goto	i2l182
  1040   00009E                     i2l2119:
  1041   00009E  FFFF               	dw	65535	; assembler added errata NOP
  1042                           
  1043                           ;MagnetDigi24.c: 89:                 TransmitCMD_USART('3');
  1044   0000A0  0E33               	movlw	51
  1045   0000A2  ECC7  F00A         	call	_TransmitCMD_USART
  1046   0000A6                     
  1047                           ;MagnetDigi24.c: 92:                 BufferDAT[0] = ResetCS5532();
  1048   0000A6  ECBF  F009         	call	_ResetCS5532	;wreg free
  1049   0000AA  0100               	movlb	0	; () banked
  1050   0000AC  6F74               	movwf	_BufferDAT& (0+255),b
  1051   0000AE                     
  1052                           ; BSR set to: 0
  1053                           ;MagnetDigi24.c: 93:                 InitCS5532();
  1054   0000AE  ECB2  F00A         	call	_InitCS5532	;wreg free
  1055   0000B2                     
  1056                           ;MagnetDigi24.c: 95:                 _delay((unsigned long)((1)*(39321600UL/4000.0)));
  1057   0000B2  0E0A               	movlw	10
  1058   0000B4  6E52               	movwf	??_Interrups^0,c
  1059   0000B6  0E94               	movlw	148
  1060   0000B8                     i2u91_47:
  1061   0000B8  FFFF               	dw	65535	; errata NOP
  1062   0000BA  2EE8               	decfsz	wreg,f,c
  1063   0000BC  D7FD               	bra	i2u91_47
  1064   0000BE  2E52               	decfsz	??_Interrups^0,f,c
  1065   0000C0  D7FB               	bra	i2u91_47
  1066   0000C2                     
  1067                           ;MagnetDigi24.c: 97:                 ReadRegister_4bytesCS5532(0x09);
  1068   0000C2  0E09               	movlw	9
  1069   0000C4  EC9B  F00A         	call	_ReadRegister_4bytesCS5532
  1070   0000C8                     
  1071                           ;MagnetDigi24.c: 98:                 BufferDAT[1] = BufferSPI[0];
  1072   0000C8  C039  F075         	movff	_BufferSPI,_BufferDAT+1
  1073   0000CC                     
  1074                           ;MagnetDigi24.c: 99:                 BufferDAT[2] = BufferSPI[1];
  1075   0000CC  C03A  F076         	movff	_BufferSPI+1,_BufferDAT+2
  1076   0000D0                     
  1077                           ;MagnetDigi24.c: 100:                 BufferDAT[3] = BufferSPI[2];
  1078   0000D0  C03B  F077         	movff	_BufferSPI+2,_BufferDAT+3
  1079   0000D4                     
  1080                           ;MagnetDigi24.c: 101:                 BufferDAT[4] = BufferSPI[3];
  1081   0000D4  C03C  F078         	movff	_BufferSPI+3,_BufferDAT+4
  1082   0000D8                     
  1083                           ;MagnetDigi24.c: 103:                 _delay((unsigned long)((1)*(39321600UL/4000.0)));
  1084   0000D8  0E0A               	movlw	10
  1085   0000DA  6E52               	movwf	??_Interrups^0,c
  1086   0000DC  0E94               	movlw	148
  1087   0000DE                     i2u92_47:
  1088   0000DE  FFFF               	dw	65535	; errata NOP
  1089   0000E0  2EE8               	decfsz	wreg,f,c
  1090   0000E2  D7FD               	bra	i2u92_47
  1091   0000E4  2E52               	decfsz	??_Interrups^0,f,c
  1092   0000E6  D7FB               	bra	i2u92_47
  1093   0000E8                     
  1094                           ;MagnetDigi24.c: 105:                 ReadRegister_4bytesCS5532(0x0A);
  1095   0000E8  0E0A               	movlw	10
  1096   0000EA  EC9B  F00A         	call	_ReadRegister_4bytesCS5532
  1097   0000EE                     
  1098                           ;MagnetDigi24.c: 106:                 BufferDAT[5] = BufferSPI[0];
  1099   0000EE  C039  F079         	movff	_BufferSPI,_BufferDAT+5
  1100   0000F2                     
  1101                           ;MagnetDigi24.c: 107:                 BufferDAT[6] = BufferSPI[1];
  1102   0000F2  C03A  F07A         	movff	_BufferSPI+1,_BufferDAT+6
  1103   0000F6                     
  1104                           ;MagnetDigi24.c: 108:                 BufferDAT[7] = BufferSPI[2];
  1105   0000F6  C03B  F07B         	movff	_BufferSPI+2,_BufferDAT+7
  1106   0000FA                     
  1107                           ;MagnetDigi24.c: 109:                 BufferDAT[8] = BufferSPI[3];
  1108   0000FA  C03C  F07C         	movff	_BufferSPI+3,_BufferDAT+8
  1109   0000FE                     
  1110                           ;MagnetDigi24.c: 110:                 BufferDAT[12] = '\0';
  1111   0000FE  0E00               	movlw	0
  1112   000100  0100               	movlb	0	; () banked
  1113   000102  6F80               	movwf	(_BufferDAT+12)& (0+255),b
  1114   000104                     
  1115                           ; BSR set to: 0
  1116                           ;MagnetDigi24.c: 111:                 TransmitDAT_USART('3');
  1117   000104  0E33               	movlw	51
  1118   000106  EC2B  F00A         	call	_TransmitDAT_USART
  1119                           
  1120                           ;MagnetDigi24.c: 113:                 break;
  1121   00010A  EF15  F008         	goto	i2l182
  1122   00010E                     i2l2153:
  1123   00010E  FFFF               	dw	65535	; assembler added errata NOP
  1124                           
  1125                           ;MagnetDigi24.c: 116:                 TransmitCMD_USART('4');
  1126   000110  0E34               	movlw	52
  1127   000112  ECC7  F00A         	call	_TransmitCMD_USART
  1128                           
  1129                           ;MagnetDigi24.c: 120:                 break;
  1130   000116  EF15  F008         	goto	i2l182
  1131   00011A                     i2l2155:
  1132   00011A  FFFF               	dw	65535	; assembler added errata NOP
  1133                           
  1134                           ;MagnetDigi24.c: 123:                 TransmitCMD_USART('6');
  1135   00011C  0E36               	movlw	54
  1136   00011E  ECC7  F00A         	call	_TransmitCMD_USART
  1137   000122                     
  1138                           ;MagnetDigi24.c: 125:                 PORTB = 0x0C;
  1139   000122  0E0C               	movlw	12
  1140   000124  6E81               	movwf	129,c	;volatile
  1141   000126                     
  1142                           ;MagnetDigi24.c: 126:                 _delay((unsigned long)((7)*(39321600UL/4000.0)));
  1143   000126  0E44               	movlw	68
  1144   000128  6E52               	movwf	??_Interrups^0,c
  1145   00012A  0E10               	movlw	16
  1146   00012C                     i2u93_47:
  1147   00012C  FFFF               	dw	65535	; errata NOP
  1148   00012E  2EE8               	decfsz	wreg,f,c
  1149   000130  D7FD               	bra	i2u93_47
  1150   000132  2E52               	decfsz	??_Interrups^0,f,c
  1151   000134  D7FB               	bra	i2u93_47
  1152   000136  D000               	nop2	
  1153   000138                     
  1154                           ;MagnetDigi24.c: 127:                 SumData_GND = 0;
  1155   000138  0E00               	movlw	0
  1156   00013A  0100               	movlb	0	; () banked
  1157   00013C  6F70               	movwf	_SumData_GND& (0+255),b
  1158   00013E  0E00               	movlw	0
  1159   000140  6F71               	movwf	(_SumData_GND+1)& (0+255),b
  1160   000142  0E00               	movlw	0
  1161   000144  6F72               	movwf	(_SumData_GND+2)& (0+255),b
  1162   000146  0E00               	movlw	0
  1163   000148  6F73               	movwf	(_SumData_GND+3)& (0+255),b
  1164   00014A                     
  1165                           ; BSR set to: 0
  1166                           ;MagnetDigi24.c: 128:                 TransferByte_SPI(0x80);
  1167   00014A  0E80               	movlw	128
  1168   00014C  ECFF  F00A         	call	_TransferByte_SPI
  1169   000150                     
  1170                           ;MagnetDigi24.c: 129:                 ReadAD24(0,0x00);
  1171   000150  0E00               	movlw	0
  1172   000152  6E42               	movwf	ReadAD24@cmd_convert^0,c
  1173   000154  0E00               	movlw	0
  1174   000156  ECB1  F008         	call	_ReadAD24
  1175   00015A                     
  1176                           ;MagnetDigi24.c: 130:                 for(conta=0; conta<5; conta++){
  1177   00015A  0E00               	movlw	0
  1178   00015C  6E5B               	movwf	Interrups@conta^0,c
  1179   00015E                     i2l2173:
  1180   00015E  FFFF               	dw	65535	; assembler added errata NOP
  1181                           
  1182                           ;MagnetDigi24.c: 131:                     TransferByte_SPI(0x80);
  1183   000160  0E80               	movlw	128
  1184   000162  ECFF  F00A         	call	_TransferByte_SPI
  1185   000166                     
  1186                           ;MagnetDigi24.c: 132:                     Data_GND = ReadAD24(1,0x00);
  1187   000166  0E00               	movlw	0
  1188   000168  6E42               	movwf	ReadAD24@cmd_convert^0,c
  1189   00016A  0E01               	movlw	1
  1190   00016C  ECB1  F008         	call	_ReadAD24
  1191   000170  C042  F060         	movff	?_ReadAD24,_Data_GND
  1192   000174  C043  F061         	movff	?_ReadAD24+1,_Data_GND+1
  1193   000178  C044  F062         	movff	?_ReadAD24+2,_Data_GND+2
  1194   00017C  C045  F063         	movff	?_ReadAD24+3,_Data_GND+3
  1195   000180                     
  1196                           ;MagnetDigi24.c: 133:                     SumData_GND = SumData_GND + Data_GND;
  1197   000180  0100               	movlb	0	; () banked
  1198   000182  5160               	movf	_Data_GND& (0+255),w,b
  1199   000184  2570               	addwf	_SumData_GND& (0+255),w,b
  1200   000186  6F70               	movwf	_SumData_GND& (0+255),b
  1201   000188  5161               	movf	(_Data_GND+1)& (0+255),w,b
  1202   00018A  2171               	addwfc	(_SumData_GND+1)& (0+255),w,b
  1203   00018C  6F71               	movwf	(_SumData_GND+1)& (0+255),b
  1204   00018E  5162               	movf	(_Data_GND+2)& (0+255),w,b
  1205   000190  2172               	addwfc	(_SumData_GND+2)& (0+255),w,b
  1206   000192  6F72               	movwf	(_SumData_GND+2)& (0+255),b
  1207   000194  5163               	movf	(_Data_GND+3)& (0+255),w,b
  1208   000196  2173               	addwfc	(_SumData_GND+3)& (0+255),w,b
  1209   000198  6F73               	movwf	(_SumData_GND+3)& (0+255),b
  1210   00019A                     
  1211                           ; BSR set to: 0
  1212                           ;MagnetDigi24.c: 134:                 }
  1213   00019A  2A5B               	incf	Interrups@conta^0,f,c
  1214   00019C                     
  1215                           ; BSR set to: 0
  1216   00019C  0E04               	movlw	4
  1217   00019E  645B               	cpfsgt	Interrups@conta^0,c
  1218   0001A0  EFD4  F000         	goto	i2u69_41
  1219   0001A4  EFD7  F000         	goto	i2u69_40
  1220   0001A8                     i2u69_41:
  1221   0001A8  FFFF               	dw	65535	; assembler added errata NOP
  1222   0001AA  EFAF  F000         	goto	i2l2173
  1223   0001AE                     i2u69_40:
  1224   0001AE  FFFF               	dw	65535	; assembler added errata NOP
  1225   0001B0                     
  1226                           ; BSR set to: 0
  1227                           ;MagnetDigi24.c: 135:                 Data_GND = SumData_GND/5;
  1228   0001B0  C070  F040         	movff	_SumData_GND,___lldiv@dividend
  1229   0001B4  C071  F041         	movff	_SumData_GND+1,___lldiv@dividend+1
  1230   0001B8  C072  F042         	movff	_SumData_GND+2,___lldiv@dividend+2
  1231   0001BC  C073  F043         	movff	_SumData_GND+3,___lldiv@dividend+3
  1232   0001C0  0E05               	movlw	5
  1233   0001C2  6E44               	movwf	___lldiv@divisor^0,c
  1234   0001C4  0E00               	movlw	0
  1235   0001C6  6E45               	movwf	(___lldiv@divisor+1)^0,c
  1236   0001C8  0E00               	movlw	0
  1237   0001CA  6E46               	movwf	(___lldiv@divisor+2)^0,c
  1238   0001CC  0E00               	movlw	0
  1239   0001CE  6E47               	movwf	(___lldiv@divisor+3)^0,c
  1240   0001D0  EC1B  F009         	call	___lldiv	;wreg free
  1241   0001D4  C040  F060         	movff	?___lldiv,_Data_GND
  1242   0001D8  C041  F061         	movff	?___lldiv+1,_Data_GND+1
  1243   0001DC  C042  F062         	movff	?___lldiv+2,_Data_GND+2
  1244   0001E0  C043  F063         	movff	?___lldiv+3,_Data_GND+3
  1245   0001E4                     
  1246                           ;MagnetDigi24.c: 136:                 print_value(Data_GND);
  1247   0001E4  C060  F041         	movff	_Data_GND,print_value@value
  1248   0001E8  C061  F042         	movff	_Data_GND+1,print_value@value+1
  1249   0001EC  C062  F043         	movff	_Data_GND+2,print_value@value+2
  1250   0001F0  C063  F044         	movff	_Data_GND+3,print_value@value+3
  1251   0001F4  ECED  F00A         	call	_print_value	;wreg free
  1252                           
  1253                           ;MagnetDigi24.c: 138:                 break;
  1254   0001F8  EF15  F008         	goto	i2l182
  1255   0001FC                     i2l2187:
  1256   0001FC  FFFF               	dw	65535	; assembler added errata NOP
  1257                           
  1258                           ;MagnetDigi24.c: 141:                 TransmitCMD_USART('7');
  1259   0001FE  0E37               	movlw	55
  1260   000200  ECC7  F00A         	call	_TransmitCMD_USART
  1261                           
  1262                           ;MagnetDigi24.c: 142:                 break;
  1263   000204  EF15  F008         	goto	i2l182
  1264   000208                     i2l2189:
  1265   000208  FFFF               	dw	65535	; assembler added errata NOP
  1266                           
  1267                           ;MagnetDigi24.c: 145:                 TransmitCMD_USART('8');
  1268   00020A  0E38               	movlw	56
  1269   00020C  ECC7  F00A         	call	_TransmitCMD_USART
  1270                           
  1271                           ;MagnetDigi24.c: 149:                 break;
  1272   000210  EF15  F008         	goto	i2l182
  1273   000214                     i2l143:
  1274   000214  FFFF               	dw	65535	; assembler added errata NOP
  1275                           
  1276                           ;MagnetDigi24.c: 153:                 LATBbits.LB7 = 1;
  1277   000216  8E8A               	bsf	138,7,c	;volatile
  1278                           
  1279                           ;MagnetDigi24.c: 155:                 LATAbits.LA2 = 1;
  1280   000218  8489               	bsf	137,2,c	;volatile
  1281   00021A                     
  1282                           ;MagnetDigi24.c: 158:                 TMR0H = 0x10;
  1283   00021A  0E10               	movlw	16
  1284   00021C  6ED7               	movwf	215,c	;volatile
  1285                           
  1286                           ;MagnetDigi24.c: 159:                 TMR0L = 0x00;
  1287   00021E  0E00               	movlw	0
  1288   000220  6ED6               	movwf	214,c	;volatile
  1289                           
  1290                           ;MagnetDigi24.c: 160:                 T0CON = 0b10000100;
  1291   000222  0E84               	movlw	132
  1292   000224  6ED5               	movwf	213,c	;volatile
  1293   000226                     
  1294                           ;MagnetDigi24.c: 162:                 INTCONbits.TMR0IF = 0;
  1295   000226  94F2               	bcf	242,2,c	;volatile
  1296   000228                     
  1297                           ;MagnetDigi24.c: 163:                 INTCONbits.TMR0IE = 1;
  1298   000228  8AF2               	bsf	242,5,c	;volatile
  1299   00022A                     
  1300                           ;MagnetDigi24.c: 164:                 INTCONbits.INT0IE = 0;
  1301   00022A  98F2               	bcf	242,4,c	;volatile
  1302                           
  1303                           ;MagnetDigi24.c: 166:                 ContaSample = 0;
  1304   00022C  0E00               	movlw	0
  1305   00022E  6E3D               	movwf	_ContaSample^0,c
  1306                           
  1307                           ;MagnetDigi24.c: 167:                 ControlSample = 0;
  1308   000230  0E00               	movlw	0
  1309   000232  6E3E               	movwf	_ControlSample^0,c
  1310   000234                     
  1311                           ;MagnetDigi24.c: 168:                 TransmitCMD_USART('9');
  1312   000234  0E39               	movlw	57
  1313   000236  ECC7  F00A         	call	_TransmitCMD_USART
  1314   00023A                     
  1315                           ;MagnetDigi24.c: 171:                 print_string("G-JRODATEXXXXXXXXXXXX\n\r");
  1316   00023A  0E4F               	movlw	low STR_1
  1317   00023C  6E41               	movwf	print_string@str^0,c
  1318   00023E  0E10               	movlw	high STR_1
  1319   000240  6E42               	movwf	(print_string@str+1)^0,c
  1320   000242  EC78  F00A         	call	_print_string	;wreg free
  1321   000246                     
  1322                           ;MagnetDigi24.c: 174:                 TransferByte_SPI(0xC0);
  1323   000246  0EC0               	movlw	192
  1324   000248  ECFF  F00A         	call	_TransferByte_SPI
  1325   00024C                     
  1326                           ;MagnetDigi24.c: 176:                 CleanHolding();
  1327   00024C  EC22  F00B         	call	_CleanHolding	;wreg free
  1328   000250                     
  1329                           ;MagnetDigi24.c: 178:                 PORTB = 0x38;
  1330   000250  0E38               	movlw	56
  1331   000252  6E81               	movwf	129,c	;volatile
  1332   000254                     
  1333                           ;MagnetDigi24.c: 179:                 _delay((unsigned long)((7)*(39321600UL/4000.0)));
  1334   000254  0E44               	movlw	68
  1335   000256  6E52               	movwf	??_Interrups^0,c
  1336   000258  0E10               	movlw	16
  1337   00025A                     i2u94_47:
  1338   00025A  FFFF               	dw	65535	; errata NOP
  1339   00025C  2EE8               	decfsz	wreg,f,c
  1340   00025E  D7FD               	bra	i2u94_47
  1341   000260  2E52               	decfsz	??_Interrups^0,f,c
  1342   000262  D7FB               	bra	i2u94_47
  1343   000264  D000               	nop2	
  1344   000266                     
  1345                           ;MagnetDigi24.c: 180:                 SumData_X = 0;
  1346   000266  0E00               	movlw	0
  1347   000268  6E35               	movwf	_SumData_X^0,c
  1348   00026A  0E00               	movlw	0
  1349   00026C  6E36               	movwf	(_SumData_X+1)^0,c
  1350   00026E  0E00               	movlw	0
  1351   000270  6E37               	movwf	(_SumData_X+2)^0,c
  1352   000272  0E00               	movlw	0
  1353   000274  6E38               	movwf	(_SumData_X+3)^0,c
  1354   000276                     
  1355                           ;MagnetDigi24.c: 181:                 ReadAD24(0,0x00);
  1356   000276  0E00               	movlw	0
  1357   000278  6E42               	movwf	ReadAD24@cmd_convert^0,c
  1358   00027A  0E00               	movlw	0
  1359   00027C  ECB1  F008         	call	_ReadAD24
  1360   000280                     
  1361                           ;MagnetDigi24.c: 182:                 for(conta=0; conta<5; conta++){
  1362   000280  0E00               	movlw	0
  1363   000282  6E5B               	movwf	Interrups@conta^0,c
  1364   000284                     i2l2221:
  1365   000284  FFFF               	dw	65535	; assembler added errata NOP
  1366                           
  1367                           ;MagnetDigi24.c: 183:                     Data_X = ReadAD24(1,0x00);
  1368   000286  0E00               	movlw	0
  1369   000288  6E42               	movwf	ReadAD24@cmd_convert^0,c
  1370   00028A  0E01               	movlw	1
  1371   00028C  ECB1  F008         	call	_ReadAD24
  1372   000290  C042  F015         	movff	?_ReadAD24,_Data_X
  1373   000294  C043  F016         	movff	?_ReadAD24+1,_Data_X+1
  1374   000298  C044  F017         	movff	?_ReadAD24+2,_Data_X+2
  1375   00029C  C045  F018         	movff	?_ReadAD24+3,_Data_X+3
  1376   0002A0                     
  1377                           ;MagnetDigi24.c: 184:                     SumData_X = SumData_X + Data_X;
  1378   0002A0  5015               	movf	_Data_X^0,w,c
  1379   0002A2  2435               	addwf	_SumData_X^0,w,c
  1380   0002A4  6E35               	movwf	_SumData_X^0,c
  1381   0002A6  5016               	movf	(_Data_X+1)^0,w,c
  1382   0002A8  2036               	addwfc	(_SumData_X+1)^0,w,c
  1383   0002AA  6E36               	movwf	(_SumData_X+1)^0,c
  1384   0002AC  5017               	movf	(_Data_X+2)^0,w,c
  1385   0002AE  2037               	addwfc	(_SumData_X+2)^0,w,c
  1386   0002B0  6E37               	movwf	(_SumData_X+2)^0,c
  1387   0002B2  5018               	movf	(_Data_X+3)^0,w,c
  1388   0002B4  2038               	addwfc	(_SumData_X+3)^0,w,c
  1389   0002B6  6E38               	movwf	(_SumData_X+3)^0,c
  1390   0002B8                     
  1391                           ;MagnetDigi24.c: 185:                 }
  1392   0002B8  2A5B               	incf	Interrups@conta^0,f,c
  1393   0002BA  0E04               	movlw	4
  1394   0002BC  645B               	cpfsgt	Interrups@conta^0,c
  1395   0002BE  EF63  F001         	goto	i2u70_41
  1396   0002C2  EF66  F001         	goto	i2u70_40
  1397   0002C6                     i2u70_41:
  1398   0002C6  FFFF               	dw	65535	; assembler added errata NOP
  1399   0002C8  EF42  F001         	goto	i2l2221
  1400   0002CC                     i2u70_40:
  1401   0002CC  FFFF               	dw	65535	; assembler added errata NOP
  1402   0002CE                     
  1403                           ;MagnetDigi24.c: 187:                 CleanHolding();
  1404   0002CE  EC22  F00B         	call	_CleanHolding	;wreg free
  1405   0002D2                     
  1406                           ;MagnetDigi24.c: 189:                 PORTB = 0x18;
  1407   0002D2  0E18               	movlw	24
  1408   0002D4  6E81               	movwf	129,c	;volatile
  1409   0002D6                     
  1410                           ;MagnetDigi24.c: 190:                 _delay((unsigned long)((7)*(39321600UL/4000.0)));
  1411   0002D6  0E44               	movlw	68
  1412   0002D8  6E52               	movwf	??_Interrups^0,c
  1413   0002DA  0E10               	movlw	16
  1414   0002DC                     i2u95_47:
  1415   0002DC  FFFF               	dw	65535	; errata NOP
  1416   0002DE  2EE8               	decfsz	wreg,f,c
  1417   0002E0  D7FD               	bra	i2u95_47
  1418   0002E2  2E52               	decfsz	??_Interrups^0,f,c
  1419   0002E4  D7FB               	bra	i2u95_47
  1420   0002E6  D000               	nop2	
  1421   0002E8                     
  1422                           ;MagnetDigi24.c: 191:                 SumData_Y = 0;
  1423   0002E8  0E00               	movlw	0
  1424   0002EA  6E31               	movwf	_SumData_Y^0,c
  1425   0002EC  0E00               	movlw	0
  1426   0002EE  6E32               	movwf	(_SumData_Y+1)^0,c
  1427   0002F0  0E00               	movlw	0
  1428   0002F2  6E33               	movwf	(_SumData_Y+2)^0,c
  1429   0002F4  0E00               	movlw	0
  1430   0002F6  6E34               	movwf	(_SumData_Y+3)^0,c
  1431   0002F8                     
  1432                           ;MagnetDigi24.c: 192:                 ReadAD24(0,0x00);
  1433   0002F8  0E00               	movlw	0
  1434   0002FA  6E42               	movwf	ReadAD24@cmd_convert^0,c
  1435   0002FC  0E00               	movlw	0
  1436   0002FE  ECB1  F008         	call	_ReadAD24
  1437   000302                     
  1438                           ;MagnetDigi24.c: 193:                 for(conta=0; conta<5; conta++){
  1439   000302  0E00               	movlw	0
  1440   000304  6E5B               	movwf	Interrups@conta^0,c
  1441   000306                     i2l2245:
  1442   000306  FFFF               	dw	65535	; assembler added errata NOP
  1443                           
  1444                           ;MagnetDigi24.c: 194:                     Data_Y = ReadAD24(1,0x00);
  1445   000308  0E00               	movlw	0
  1446   00030A  6E42               	movwf	ReadAD24@cmd_convert^0,c
  1447   00030C  0E01               	movlw	1
  1448   00030E  ECB1  F008         	call	_ReadAD24
  1449   000312  C042  F011         	movff	?_ReadAD24,_Data_Y
  1450   000316  C043  F012         	movff	?_ReadAD24+1,_Data_Y+1
  1451   00031A  C044  F013         	movff	?_ReadAD24+2,_Data_Y+2
  1452   00031E  C045  F014         	movff	?_ReadAD24+3,_Data_Y+3
  1453   000322                     
  1454                           ;MagnetDigi24.c: 195:                     SumData_Y = SumData_Y + Data_Y;
  1455   000322  5011               	movf	_Data_Y^0,w,c
  1456   000324  2431               	addwf	_SumData_Y^0,w,c
  1457   000326  6E31               	movwf	_SumData_Y^0,c
  1458   000328  5012               	movf	(_Data_Y+1)^0,w,c
  1459   00032A  2032               	addwfc	(_SumData_Y+1)^0,w,c
  1460   00032C  6E32               	movwf	(_SumData_Y+1)^0,c
  1461   00032E  5013               	movf	(_Data_Y+2)^0,w,c
  1462   000330  2033               	addwfc	(_SumData_Y+2)^0,w,c
  1463   000332  6E33               	movwf	(_SumData_Y+2)^0,c
  1464   000334  5014               	movf	(_Data_Y+3)^0,w,c
  1465   000336  2034               	addwfc	(_SumData_Y+3)^0,w,c
  1466   000338  6E34               	movwf	(_SumData_Y+3)^0,c
  1467   00033A                     
  1468                           ;MagnetDigi24.c: 196:                 }
  1469   00033A  2A5B               	incf	Interrups@conta^0,f,c
  1470   00033C  0E04               	movlw	4
  1471   00033E  645B               	cpfsgt	Interrups@conta^0,c
  1472   000340  EFA4  F001         	goto	i2u71_41
  1473   000344  EFA7  F001         	goto	i2u71_40
  1474   000348                     i2u71_41:
  1475   000348  FFFF               	dw	65535	; assembler added errata NOP
  1476   00034A  EF83  F001         	goto	i2l2245
  1477   00034E                     i2u71_40:
  1478   00034E  FFFF               	dw	65535	; assembler added errata NOP
  1479   000350                     
  1480                           ;MagnetDigi24.c: 198:                 CleanHolding();
  1481   000350  EC22  F00B         	call	_CleanHolding	;wreg free
  1482   000354                     
  1483                           ;MagnetDigi24.c: 200:                 PORTB = 0x28;
  1484   000354  0E28               	movlw	40
  1485   000356  6E81               	movwf	129,c	;volatile
  1486   000358                     
  1487                           ;MagnetDigi24.c: 201:                 _delay((unsigned long)((7)*(39321600UL/4000.0)));
  1488   000358  0E44               	movlw	68
  1489   00035A  6E52               	movwf	??_Interrups^0,c
  1490   00035C  0E10               	movlw	16
  1491   00035E                     i2u96_47:
  1492   00035E  FFFF               	dw	65535	; errata NOP
  1493   000360  2EE8               	decfsz	wreg,f,c
  1494   000362  D7FD               	bra	i2u96_47
  1495   000364  2E52               	decfsz	??_Interrups^0,f,c
  1496   000366  D7FB               	bra	i2u96_47
  1497   000368  D000               	nop2	
  1498   00036A                     
  1499                           ;MagnetDigi24.c: 202:                 SumData_Z = 0;
  1500   00036A  0E00               	movlw	0
  1501   00036C  6E2D               	movwf	_SumData_Z^0,c
  1502   00036E  0E00               	movlw	0
  1503   000370  6E2E               	movwf	(_SumData_Z+1)^0,c
  1504   000372  0E00               	movlw	0
  1505   000374  6E2F               	movwf	(_SumData_Z+2)^0,c
  1506   000376  0E00               	movlw	0
  1507   000378  6E30               	movwf	(_SumData_Z+3)^0,c
  1508   00037A                     
  1509                           ;MagnetDigi24.c: 203:                 ReadAD24(0,0x00);
  1510   00037A  0E00               	movlw	0
  1511   00037C  6E42               	movwf	ReadAD24@cmd_convert^0,c
  1512   00037E  0E00               	movlw	0
  1513   000380  ECB1  F008         	call	_ReadAD24
  1514   000384                     
  1515                           ;MagnetDigi24.c: 204:                 for(conta=0; conta<5; conta++){
  1516   000384  0E00               	movlw	0
  1517   000386  6E5B               	movwf	Interrups@conta^0,c
  1518   000388                     i2l2269:
  1519   000388  FFFF               	dw	65535	; assembler added errata NOP
  1520                           
  1521                           ;MagnetDigi24.c: 205:                     Data_Z = ReadAD24(1,0x00);
  1522   00038A  0E00               	movlw	0
  1523   00038C  6E42               	movwf	ReadAD24@cmd_convert^0,c
  1524   00038E  0E01               	movlw	1
  1525   000390  ECB1  F008         	call	_ReadAD24
  1526   000394  C042  F00D         	movff	?_ReadAD24,_Data_Z
  1527   000398  C043  F00E         	movff	?_ReadAD24+1,_Data_Z+1
  1528   00039C  C044  F00F         	movff	?_ReadAD24+2,_Data_Z+2
  1529   0003A0  C045  F010         	movff	?_ReadAD24+3,_Data_Z+3
  1530   0003A4                     
  1531                           ;MagnetDigi24.c: 206:                     SumData_Z = SumData_Z + Data_Z;
  1532   0003A4  500D               	movf	_Data_Z^0,w,c
  1533   0003A6  242D               	addwf	_SumData_Z^0,w,c
  1534   0003A8  6E2D               	movwf	_SumData_Z^0,c
  1535   0003AA  500E               	movf	(_Data_Z+1)^0,w,c
  1536   0003AC  202E               	addwfc	(_SumData_Z+1)^0,w,c
  1537   0003AE  6E2E               	movwf	(_SumData_Z+1)^0,c
  1538   0003B0  500F               	movf	(_Data_Z+2)^0,w,c
  1539   0003B2  202F               	addwfc	(_SumData_Z+2)^0,w,c
  1540   0003B4  6E2F               	movwf	(_SumData_Z+2)^0,c
  1541   0003B6  5010               	movf	(_Data_Z+3)^0,w,c
  1542   0003B8  2030               	addwfc	(_SumData_Z+3)^0,w,c
  1543   0003BA  6E30               	movwf	(_SumData_Z+3)^0,c
  1544   0003BC                     
  1545                           ;MagnetDigi24.c: 207:                 }
  1546   0003BC  2A5B               	incf	Interrups@conta^0,f,c
  1547   0003BE  0E04               	movlw	4
  1548   0003C0  645B               	cpfsgt	Interrups@conta^0,c
  1549   0003C2  EFE5  F001         	goto	i2u72_41
  1550   0003C6  EFE8  F001         	goto	i2u72_40
  1551   0003CA                     i2u72_41:
  1552   0003CA  FFFF               	dw	65535	; assembler added errata NOP
  1553   0003CC  EFC4  F001         	goto	i2l2269
  1554   0003D0                     i2u72_40:
  1555   0003D0  FFFF               	dw	65535	; assembler added errata NOP
  1556   0003D2                     
  1557                           ;MagnetDigi24.c: 209:                 CleanHolding();
  1558   0003D2  EC22  F00B         	call	_CleanHolding	;wreg free
  1559   0003D6                     
  1560                           ;MagnetDigi24.c: 211:                 PORTB = 0x08;
  1561   0003D6  0E08               	movlw	8
  1562   0003D8  6E81               	movwf	129,c	;volatile
  1563   0003DA                     
  1564                           ;MagnetDigi24.c: 212:                 _delay((unsigned long)((7)*(39321600UL/4000.0)));
  1565   0003DA  0E44               	movlw	68
  1566   0003DC  6E52               	movwf	??_Interrups^0,c
  1567   0003DE  0E10               	movlw	16
  1568   0003E0                     i2u97_47:
  1569   0003E0  FFFF               	dw	65535	; errata NOP
  1570   0003E2  2EE8               	decfsz	wreg,f,c
  1571   0003E4  D7FD               	bra	i2u97_47
  1572   0003E6  2E52               	decfsz	??_Interrups^0,f,c
  1573   0003E8  D7FB               	bra	i2u97_47
  1574   0003EA  D000               	nop2	
  1575   0003EC                     
  1576                           ;MagnetDigi24.c: 213:                 SumData_TC = 0;
  1577   0003EC  0E00               	movlw	0
  1578   0003EE  6E29               	movwf	_SumData_TC^0,c
  1579   0003F0  0E00               	movlw	0
  1580   0003F2  6E2A               	movwf	(_SumData_TC+1)^0,c
  1581   0003F4  0E00               	movlw	0
  1582   0003F6  6E2B               	movwf	(_SumData_TC+2)^0,c
  1583   0003F8  0E00               	movlw	0
  1584   0003FA  6E2C               	movwf	(_SumData_TC+3)^0,c
  1585   0003FC                     
  1586                           ;MagnetDigi24.c: 214:                 ReadAD24(0,0x00);
  1587   0003FC  0E00               	movlw	0
  1588   0003FE  6E42               	movwf	ReadAD24@cmd_convert^0,c
  1589   000400  0E00               	movlw	0
  1590   000402  ECB1  F008         	call	_ReadAD24
  1591   000406                     
  1592                           ;MagnetDigi24.c: 215:                 for(conta=0; conta<5; conta++){
  1593   000406  0E00               	movlw	0
  1594   000408  6E5B               	movwf	Interrups@conta^0,c
  1595   00040A                     i2l2293:
  1596   00040A  FFFF               	dw	65535	; assembler added errata NOP
  1597                           
  1598                           ;MagnetDigi24.c: 216:                     Data_TC = ReadAD24(1,0x00);
  1599   00040C  0E00               	movlw	0
  1600   00040E  6E42               	movwf	ReadAD24@cmd_convert^0,c
  1601   000410  0E01               	movlw	1
  1602   000412  ECB1  F008         	call	_ReadAD24
  1603   000416  C042  F009         	movff	?_ReadAD24,_Data_TC
  1604   00041A  C043  F00A         	movff	?_ReadAD24+1,_Data_TC+1
  1605   00041E  C044  F00B         	movff	?_ReadAD24+2,_Data_TC+2
  1606   000422  C045  F00C         	movff	?_ReadAD24+3,_Data_TC+3
  1607   000426                     
  1608                           ;MagnetDigi24.c: 217:                     SumData_TC = SumData_TC + Data_TC;
  1609   000426  5009               	movf	_Data_TC^0,w,c
  1610   000428  2429               	addwf	_SumData_TC^0,w,c
  1611   00042A  6E29               	movwf	_SumData_TC^0,c
  1612   00042C  500A               	movf	(_Data_TC+1)^0,w,c
  1613   00042E  202A               	addwfc	(_SumData_TC+1)^0,w,c
  1614   000430  6E2A               	movwf	(_SumData_TC+1)^0,c
  1615   000432  500B               	movf	(_Data_TC+2)^0,w,c
  1616   000434  202B               	addwfc	(_SumData_TC+2)^0,w,c
  1617   000436  6E2B               	movwf	(_SumData_TC+2)^0,c
  1618   000438  500C               	movf	(_Data_TC+3)^0,w,c
  1619   00043A  202C               	addwfc	(_SumData_TC+3)^0,w,c
  1620   00043C  6E2C               	movwf	(_SumData_TC+3)^0,c
  1621   00043E                     
  1622                           ;MagnetDigi24.c: 218:                 }
  1623   00043E  2A5B               	incf	Interrups@conta^0,f,c
  1624   000440  0E04               	movlw	4
  1625   000442  645B               	cpfsgt	Interrups@conta^0,c
  1626   000444  EF26  F002         	goto	i2u73_41
  1627   000448  EF29  F002         	goto	i2u73_40
  1628   00044C                     i2u73_41:
  1629   00044C  FFFF               	dw	65535	; assembler added errata NOP
  1630   00044E  EF05  F002         	goto	i2l2293
  1631   000452                     i2u73_40:
  1632   000452  FFFF               	dw	65535	; assembler added errata NOP
  1633   000454                     
  1634                           ;MagnetDigi24.c: 220:                 CleanHolding();
  1635   000454  EC22  F00B         	call	_CleanHolding	;wreg free
  1636   000458                     
  1637                           ;MagnetDigi24.c: 222:                 PORTB = 0x04;
  1638   000458  0E04               	movlw	4
  1639   00045A  6E81               	movwf	129,c	;volatile
  1640   00045C                     
  1641                           ;MagnetDigi24.c: 223:                 _delay((unsigned long)((7)*(39321600UL/4000.0)));
  1642   00045C  0E44               	movlw	68
  1643   00045E  6E52               	movwf	??_Interrups^0,c
  1644   000460  0E10               	movlw	16
  1645   000462                     i2u98_47:
  1646   000462  FFFF               	dw	65535	; errata NOP
  1647   000464  2EE8               	decfsz	wreg,f,c
  1648   000466  D7FD               	bra	i2u98_47
  1649   000468  2E52               	decfsz	??_Interrups^0,f,c
  1650   00046A  D7FB               	bra	i2u98_47
  1651   00046C  D000               	nop2	
  1652   00046E                     
  1653                           ;MagnetDigi24.c: 224:                 SumData_TS = 0;
  1654   00046E  0E00               	movlw	0
  1655   000470  6E25               	movwf	_SumData_TS^0,c
  1656   000472  0E00               	movlw	0
  1657   000474  6E26               	movwf	(_SumData_TS+1)^0,c
  1658   000476  0E00               	movlw	0
  1659   000478  6E27               	movwf	(_SumData_TS+2)^0,c
  1660   00047A  0E00               	movlw	0
  1661   00047C  6E28               	movwf	(_SumData_TS+3)^0,c
  1662   00047E                     
  1663                           ;MagnetDigi24.c: 225:                 ReadAD24(0,0x00);
  1664   00047E  0E00               	movlw	0
  1665   000480  6E42               	movwf	ReadAD24@cmd_convert^0,c
  1666   000482  0E00               	movlw	0
  1667   000484  ECB1  F008         	call	_ReadAD24
  1668   000488                     
  1669                           ;MagnetDigi24.c: 226:                 for(conta=0; conta<5; conta++){
  1670   000488  0E00               	movlw	0
  1671   00048A  6E5B               	movwf	Interrups@conta^0,c
  1672   00048C                     i2l2317:
  1673   00048C  FFFF               	dw	65535	; assembler added errata NOP
  1674                           
  1675                           ;MagnetDigi24.c: 227:                     Data_TS = ReadAD24(1,0x00);
  1676   00048E  0E00               	movlw	0
  1677   000490  6E42               	movwf	ReadAD24@cmd_convert^0,c
  1678   000492  0E01               	movlw	1
  1679   000494  ECB1  F008         	call	_ReadAD24
  1680   000498  C042  F005         	movff	?_ReadAD24,_Data_TS
  1681   00049C  C043  F006         	movff	?_ReadAD24+1,_Data_TS+1
  1682   0004A0  C044  F007         	movff	?_ReadAD24+2,_Data_TS+2
  1683   0004A4  C045  F008         	movff	?_ReadAD24+3,_Data_TS+3
  1684   0004A8                     
  1685                           ;MagnetDigi24.c: 228:                     SumData_TS = SumData_TS + Data_TS;
  1686   0004A8  5005               	movf	_Data_TS^0,w,c
  1687   0004AA  2425               	addwf	_SumData_TS^0,w,c
  1688   0004AC  6E25               	movwf	_SumData_TS^0,c
  1689   0004AE  5006               	movf	(_Data_TS+1)^0,w,c
  1690   0004B0  2026               	addwfc	(_SumData_TS+1)^0,w,c
  1691   0004B2  6E26               	movwf	(_SumData_TS+1)^0,c
  1692   0004B4  5007               	movf	(_Data_TS+2)^0,w,c
  1693   0004B6  2027               	addwfc	(_SumData_TS+2)^0,w,c
  1694   0004B8  6E27               	movwf	(_SumData_TS+2)^0,c
  1695   0004BA  5008               	movf	(_Data_TS+3)^0,w,c
  1696   0004BC  2028               	addwfc	(_SumData_TS+3)^0,w,c
  1697   0004BE  6E28               	movwf	(_SumData_TS+3)^0,c
  1698   0004C0                     
  1699                           ;MagnetDigi24.c: 229:                 }
  1700   0004C0  2A5B               	incf	Interrups@conta^0,f,c
  1701   0004C2  0E04               	movlw	4
  1702   0004C4  645B               	cpfsgt	Interrups@conta^0,c
  1703   0004C6  EF67  F002         	goto	i2u74_41
  1704   0004CA  EF6A  F002         	goto	i2u74_40
  1705   0004CE                     i2u74_41:
  1706   0004CE  FFFF               	dw	65535	; assembler added errata NOP
  1707   0004D0  EF46  F002         	goto	i2l2317
  1708   0004D4                     i2u74_40:
  1709   0004D4  FFFF               	dw	65535	; assembler added errata NOP
  1710   0004D6                     
  1711                           ;MagnetDigi24.c: 231:                 CleanHolding();
  1712   0004D6  EC22  F00B         	call	_CleanHolding	;wreg free
  1713   0004DA                     
  1714                           ;MagnetDigi24.c: 233:                 PORTB = 0x34;
  1715   0004DA  0E34               	movlw	52
  1716   0004DC  6E81               	movwf	129,c	;volatile
  1717   0004DE                     
  1718                           ;MagnetDigi24.c: 234:                 _delay((unsigned long)((7)*(39321600UL/4000.0)));
  1719   0004DE  0E44               	movlw	68
  1720   0004E0  6E52               	movwf	??_Interrups^0,c
  1721   0004E2  0E10               	movlw	16
  1722   0004E4                     i2u99_47:
  1723   0004E4  FFFF               	dw	65535	; errata NOP
  1724   0004E6  2EE8               	decfsz	wreg,f,c
  1725   0004E8  D7FD               	bra	i2u99_47
  1726   0004EA  2E52               	decfsz	??_Interrups^0,f,c
  1727   0004EC  D7FB               	bra	i2u99_47
  1728   0004EE  D000               	nop2	
  1729   0004F0                     
  1730                           ;MagnetDigi24.c: 235:                 SumData_AUX0 = 0;
  1731   0004F0  0E00               	movlw	0
  1732   0004F2  6E21               	movwf	_SumData_AUX0^0,c
  1733   0004F4  0E00               	movlw	0
  1734   0004F6  6E22               	movwf	(_SumData_AUX0+1)^0,c
  1735   0004F8  0E00               	movlw	0
  1736   0004FA  6E23               	movwf	(_SumData_AUX0+2)^0,c
  1737   0004FC  0E00               	movlw	0
  1738   0004FE  6E24               	movwf	(_SumData_AUX0+3)^0,c
  1739   000500                     
  1740                           ;MagnetDigi24.c: 236:                 ReadAD24(0,0x00);
  1741   000500  0E00               	movlw	0
  1742   000502  6E42               	movwf	ReadAD24@cmd_convert^0,c
  1743   000504  0E00               	movlw	0
  1744   000506  ECB1  F008         	call	_ReadAD24
  1745   00050A                     
  1746                           ;MagnetDigi24.c: 237:                 for(conta=0; conta<5; conta++){
  1747   00050A  0E00               	movlw	0
  1748   00050C  6E5B               	movwf	Interrups@conta^0,c
  1749   00050E                     i2l2341:
  1750   00050E  FFFF               	dw	65535	; assembler added errata NOP
  1751                           
  1752                           ;MagnetDigi24.c: 238:                     Data_AUX0 = ReadAD24(1,0x00);
  1753   000510  0E00               	movlw	0
  1754   000512  6E42               	movwf	ReadAD24@cmd_convert^0,c
  1755   000514  0E01               	movlw	1
  1756   000516  ECB1  F008         	call	_ReadAD24
  1757   00051A  C042  F001         	movff	?_ReadAD24,_Data_AUX0
  1758   00051E  C043  F002         	movff	?_ReadAD24+1,_Data_AUX0+1
  1759   000522  C044  F003         	movff	?_ReadAD24+2,_Data_AUX0+2
  1760   000526  C045  F004         	movff	?_ReadAD24+3,_Data_AUX0+3
  1761   00052A                     
  1762                           ;MagnetDigi24.c: 239:                     SumData_AUX0 = SumData_AUX0 + Data_AUX0;
  1763   00052A  5001               	movf	_Data_AUX0^0,w,c
  1764   00052C  2421               	addwf	_SumData_AUX0^0,w,c
  1765   00052E  6E21               	movwf	_SumData_AUX0^0,c
  1766   000530  5002               	movf	(_Data_AUX0+1)^0,w,c
  1767   000532  2022               	addwfc	(_SumData_AUX0+1)^0,w,c
  1768   000534  6E22               	movwf	(_SumData_AUX0+1)^0,c
  1769   000536  5003               	movf	(_Data_AUX0+2)^0,w,c
  1770   000538  2023               	addwfc	(_SumData_AUX0+2)^0,w,c
  1771   00053A  6E23               	movwf	(_SumData_AUX0+2)^0,c
  1772   00053C  5004               	movf	(_Data_AUX0+3)^0,w,c
  1773   00053E  2024               	addwfc	(_SumData_AUX0+3)^0,w,c
  1774   000540  6E24               	movwf	(_SumData_AUX0+3)^0,c
  1775   000542                     
  1776                           ;MagnetDigi24.c: 240:                 }
  1777   000542  2A5B               	incf	Interrups@conta^0,f,c
  1778   000544  0E04               	movlw	4
  1779   000546  645B               	cpfsgt	Interrups@conta^0,c
  1780   000548  EFA8  F002         	goto	i2u75_41
  1781   00054C  EFAB  F002         	goto	i2u75_40
  1782   000550                     i2u75_41:
  1783   000550  FFFF               	dw	65535	; assembler added errata NOP
  1784   000552  EF87  F002         	goto	i2l2341
  1785   000556                     i2u75_40:
  1786   000556  FFFF               	dw	65535	; assembler added errata NOP
  1787   000558                     
  1788                           ;MagnetDigi24.c: 242:                 CleanHolding();
  1789   000558  EC22  F00B         	call	_CleanHolding	;wreg free
  1790   00055C                     
  1791                           ;MagnetDigi24.c: 244:                 PORTB = 0x14;
  1792   00055C  0E14               	movlw	20
  1793   00055E  6E81               	movwf	129,c	;volatile
  1794   000560                     
  1795                           ;MagnetDigi24.c: 245:                 _delay((unsigned long)((7)*(39321600UL/4000.0)));
  1796   000560  0E44               	movlw	68
  1797   000562  6E52               	movwf	??_Interrups^0,c
  1798   000564  0E10               	movlw	16
  1799   000566                     i2u100_47:
  1800   000566  FFFF               	dw	65535	; errata NOP
  1801   000568  2EE8               	decfsz	wreg,f,c
  1802   00056A  D7FD               	bra	i2u100_47
  1803   00056C  2E52               	decfsz	??_Interrups^0,f,c
  1804   00056E  D7FB               	bra	i2u100_47
  1805   000570  D000               	nop2	
  1806   000572                     
  1807                           ;MagnetDigi24.c: 246:                 SumData_AUX1 = 0;
  1808   000572  0E00               	movlw	0
  1809   000574  6E1D               	movwf	_SumData_AUX1^0,c
  1810   000576  0E00               	movlw	0
  1811   000578  6E1E               	movwf	(_SumData_AUX1+1)^0,c
  1812   00057A  0E00               	movlw	0
  1813   00057C  6E1F               	movwf	(_SumData_AUX1+2)^0,c
  1814   00057E  0E00               	movlw	0
  1815   000580  6E20               	movwf	(_SumData_AUX1+3)^0,c
  1816   000582                     
  1817                           ;MagnetDigi24.c: 247:                 ReadAD24(0,0x00);
  1818   000582  0E00               	movlw	0
  1819   000584  6E42               	movwf	ReadAD24@cmd_convert^0,c
  1820   000586  0E00               	movlw	0
  1821   000588  ECB1  F008         	call	_ReadAD24
  1822   00058C                     
  1823                           ;MagnetDigi24.c: 248:                 for(conta=0; conta<5; conta++){
  1824   00058C  0E00               	movlw	0
  1825   00058E  6E5B               	movwf	Interrups@conta^0,c
  1826   000590                     i2l2365:
  1827   000590  FFFF               	dw	65535	; assembler added errata NOP
  1828                           
  1829                           ;MagnetDigi24.c: 249:                     Data_AUX1 = ReadAD24(1,0x00);
  1830   000592  0E00               	movlw	0
  1831   000594  6E42               	movwf	ReadAD24@cmd_convert^0,c
  1832   000596  0E01               	movlw	1
  1833   000598  ECB1  F008         	call	_ReadAD24
  1834   00059C  C042  F068         	movff	?_ReadAD24,_Data_AUX1
  1835   0005A0  C043  F069         	movff	?_ReadAD24+1,_Data_AUX1+1
  1836   0005A4  C044  F06A         	movff	?_ReadAD24+2,_Data_AUX1+2
  1837   0005A8  C045  F06B         	movff	?_ReadAD24+3,_Data_AUX1+3
  1838   0005AC                     
  1839                           ;MagnetDigi24.c: 250:                     SumData_AUX1 = SumData_AUX1 + Data_AUX1;
  1840   0005AC  0100               	movlb	0	; () banked
  1841   0005AE  5168               	movf	_Data_AUX1& (0+255),w,b
  1842   0005B0  241D               	addwf	_SumData_AUX1^0,w,c
  1843   0005B2  6E1D               	movwf	_SumData_AUX1^0,c
  1844   0005B4  5169               	movf	(_Data_AUX1+1)& (0+255),w,b
  1845   0005B6  201E               	addwfc	(_SumData_AUX1+1)^0,w,c
  1846   0005B8  6E1E               	movwf	(_SumData_AUX1+1)^0,c
  1847   0005BA  516A               	movf	(_Data_AUX1+2)& (0+255),w,b
  1848   0005BC  201F               	addwfc	(_SumData_AUX1+2)^0,w,c
  1849   0005BE  6E1F               	movwf	(_SumData_AUX1+2)^0,c
  1850   0005C0  516B               	movf	(_Data_AUX1+3)& (0+255),w,b
  1851   0005C2  2020               	addwfc	(_SumData_AUX1+3)^0,w,c
  1852   0005C4  6E20               	movwf	(_SumData_AUX1+3)^0,c
  1853   0005C6                     
  1854                           ; BSR set to: 0
  1855                           ;MagnetDigi24.c: 251:                 }
  1856   0005C6  2A5B               	incf	Interrups@conta^0,f,c
  1857   0005C8                     
  1858                           ; BSR set to: 0
  1859   0005C8  0E04               	movlw	4
  1860   0005CA  645B               	cpfsgt	Interrups@conta^0,c
  1861   0005CC  EFEA  F002         	goto	i2u76_41
  1862   0005D0  EFED  F002         	goto	i2u76_40
  1863   0005D4                     i2u76_41:
  1864   0005D4  FFFF               	dw	65535	; assembler added errata NOP
  1865   0005D6  EFC8  F002         	goto	i2l2365
  1866   0005DA                     i2u76_40:
  1867   0005DA  FFFF               	dw	65535	; assembler added errata NOP
  1868   0005DC                     
  1869                           ; BSR set to: 0
  1870                           ;MagnetDigi24.c: 253:                 CleanHolding();
  1871   0005DC  EC22  F00B         	call	_CleanHolding	;wreg free
  1872   0005E0                     
  1873                           ;MagnetDigi24.c: 255:                 PORTB = 0x24;
  1874   0005E0  0E24               	movlw	36
  1875   0005E2  6E81               	movwf	129,c	;volatile
  1876   0005E4                     
  1877                           ;MagnetDigi24.c: 256:                 _delay((unsigned long)((7)*(39321600UL/4000.0)));
  1878   0005E4  0E44               	movlw	68
  1879   0005E6  6E52               	movwf	??_Interrups^0,c
  1880   0005E8  0E10               	movlw	16
  1881   0005EA                     i2u101_47:
  1882   0005EA  FFFF               	dw	65535	; errata NOP
  1883   0005EC  2EE8               	decfsz	wreg,f,c
  1884   0005EE  D7FD               	bra	i2u101_47
  1885   0005F0  2E52               	decfsz	??_Interrups^0,f,c
  1886   0005F2  D7FB               	bra	i2u101_47
  1887   0005F4  D000               	nop2	
  1888   0005F6                     
  1889                           ;MagnetDigi24.c: 257:                 SumData_AUX2 = 0;
  1890   0005F6  0E00               	movlw	0
  1891   0005F8  6E19               	movwf	_SumData_AUX2^0,c
  1892   0005FA  0E00               	movlw	0
  1893   0005FC  6E1A               	movwf	(_SumData_AUX2+1)^0,c
  1894   0005FE  0E00               	movlw	0
  1895   000600  6E1B               	movwf	(_SumData_AUX2+2)^0,c
  1896   000602  0E00               	movlw	0
  1897   000604  6E1C               	movwf	(_SumData_AUX2+3)^0,c
  1898   000606                     
  1899                           ;MagnetDigi24.c: 258:                 ReadAD24(0,0x00);
  1900   000606  0E00               	movlw	0
  1901   000608  6E42               	movwf	ReadAD24@cmd_convert^0,c
  1902   00060A  0E00               	movlw	0
  1903   00060C  ECB1  F008         	call	_ReadAD24
  1904   000610                     
  1905                           ;MagnetDigi24.c: 259:                 for(conta=0; conta<5; conta++){
  1906   000610  0E00               	movlw	0
  1907   000612  6E5B               	movwf	Interrups@conta^0,c
  1908   000614                     i2l2389:
  1909   000614  FFFF               	dw	65535	; assembler added errata NOP
  1910                           
  1911                           ;MagnetDigi24.c: 260:                     Data_AUX2 = ReadAD24(1,0x00);
  1912   000616  0E00               	movlw	0
  1913   000618  6E42               	movwf	ReadAD24@cmd_convert^0,c
  1914   00061A  0E01               	movlw	1
  1915   00061C  ECB1  F008         	call	_ReadAD24
  1916   000620  C042  F064         	movff	?_ReadAD24,_Data_AUX2
  1917   000624  C043  F065         	movff	?_ReadAD24+1,_Data_AUX2+1
  1918   000628  C044  F066         	movff	?_ReadAD24+2,_Data_AUX2+2
  1919   00062C  C045  F067         	movff	?_ReadAD24+3,_Data_AUX2+3
  1920   000630                     
  1921                           ;MagnetDigi24.c: 261:                     SumData_AUX2 = SumData_AUX2 + Data_AUX2;
  1922   000630  0100               	movlb	0	; () banked
  1923   000632  5164               	movf	_Data_AUX2& (0+255),w,b
  1924   000634  2419               	addwf	_SumData_AUX2^0,w,c
  1925   000636  6E19               	movwf	_SumData_AUX2^0,c
  1926   000638  5165               	movf	(_Data_AUX2+1)& (0+255),w,b
  1927   00063A  201A               	addwfc	(_SumData_AUX2+1)^0,w,c
  1928   00063C  6E1A               	movwf	(_SumData_AUX2+1)^0,c
  1929   00063E  5166               	movf	(_Data_AUX2+2)& (0+255),w,b
  1930   000640  201B               	addwfc	(_SumData_AUX2+2)^0,w,c
  1931   000642  6E1B               	movwf	(_SumData_AUX2+2)^0,c
  1932   000644  5167               	movf	(_Data_AUX2+3)& (0+255),w,b
  1933   000646  201C               	addwfc	(_SumData_AUX2+3)^0,w,c
  1934   000648  6E1C               	movwf	(_SumData_AUX2+3)^0,c
  1935   00064A                     
  1936                           ; BSR set to: 0
  1937                           ;MagnetDigi24.c: 262:                 }
  1938   00064A  2A5B               	incf	Interrups@conta^0,f,c
  1939   00064C                     
  1940                           ; BSR set to: 0
  1941   00064C  0E04               	movlw	4
  1942   00064E  645B               	cpfsgt	Interrups@conta^0,c
  1943   000650  EF2C  F003         	goto	i2u77_41
  1944   000654  EF2F  F003         	goto	i2u77_40
  1945   000658                     i2u77_41:
  1946   000658  FFFF               	dw	65535	; assembler added errata NOP
  1947   00065A  EF0A  F003         	goto	i2l2389
  1948   00065E                     i2u77_40:
  1949   00065E  FFFF               	dw	65535	; assembler added errata NOP
  1950   000660                     
  1951                           ; BSR set to: 0
  1952                           ;MagnetDigi24.c: 265:                 Data_X = SumData_X/5;
  1953   000660  C035  F040         	movff	_SumData_X,___lldiv@dividend
  1954   000664  C036  F041         	movff	_SumData_X+1,___lldiv@dividend+1
  1955   000668  C037  F042         	movff	_SumData_X+2,___lldiv@dividend+2
  1956   00066C  C038  F043         	movff	_SumData_X+3,___lldiv@dividend+3
  1957   000670  0E05               	movlw	5
  1958   000672  6E44               	movwf	___lldiv@divisor^0,c
  1959   000674  0E00               	movlw	0
  1960   000676  6E45               	movwf	(___lldiv@divisor+1)^0,c
  1961   000678  0E00               	movlw	0
  1962   00067A  6E46               	movwf	(___lldiv@divisor+2)^0,c
  1963   00067C  0E00               	movlw	0
  1964   00067E  6E47               	movwf	(___lldiv@divisor+3)^0,c
  1965   000680  EC1B  F009         	call	___lldiv	;wreg free
  1966   000684  C040  F015         	movff	?___lldiv,_Data_X
  1967   000688  C041  F016         	movff	?___lldiv+1,_Data_X+1
  1968   00068C  C042  F017         	movff	?___lldiv+2,_Data_X+2
  1969   000690  C043  F018         	movff	?___lldiv+3,_Data_X+3
  1970                           
  1971                           ;MagnetDigi24.c: 266:                 Data_Y = SumData_Y/5;
  1972   000694  C031  F040         	movff	_SumData_Y,___lldiv@dividend
  1973   000698  C032  F041         	movff	_SumData_Y+1,___lldiv@dividend+1
  1974   00069C  C033  F042         	movff	_SumData_Y+2,___lldiv@dividend+2
  1975   0006A0  C034  F043         	movff	_SumData_Y+3,___lldiv@dividend+3
  1976   0006A4  0E05               	movlw	5
  1977   0006A6  6E44               	movwf	___lldiv@divisor^0,c
  1978   0006A8  0E00               	movlw	0
  1979   0006AA  6E45               	movwf	(___lldiv@divisor+1)^0,c
  1980   0006AC  0E00               	movlw	0
  1981   0006AE  6E46               	movwf	(___lldiv@divisor+2)^0,c
  1982   0006B0  0E00               	movlw	0
  1983   0006B2  6E47               	movwf	(___lldiv@divisor+3)^0,c
  1984   0006B4  EC1B  F009         	call	___lldiv	;wreg free
  1985   0006B8  C040  F011         	movff	?___lldiv,_Data_Y
  1986   0006BC  C041  F012         	movff	?___lldiv+1,_Data_Y+1
  1987   0006C0  C042  F013         	movff	?___lldiv+2,_Data_Y+2
  1988   0006C4  C043  F014         	movff	?___lldiv+3,_Data_Y+3
  1989                           
  1990                           ;MagnetDigi24.c: 267:                 Data_Z = SumData_Z/5;
  1991   0006C8  C02D  F040         	movff	_SumData_Z,___lldiv@dividend
  1992   0006CC  C02E  F041         	movff	_SumData_Z+1,___lldiv@dividend+1
  1993   0006D0  C02F  F042         	movff	_SumData_Z+2,___lldiv@dividend+2
  1994   0006D4  C030  F043         	movff	_SumData_Z+3,___lldiv@dividend+3
  1995   0006D8  0E05               	movlw	5
  1996   0006DA  6E44               	movwf	___lldiv@divisor^0,c
  1997   0006DC  0E00               	movlw	0
  1998   0006DE  6E45               	movwf	(___lldiv@divisor+1)^0,c
  1999   0006E0  0E00               	movlw	0
  2000   0006E2  6E46               	movwf	(___lldiv@divisor+2)^0,c
  2001   0006E4  0E00               	movlw	0
  2002   0006E6  6E47               	movwf	(___lldiv@divisor+3)^0,c
  2003   0006E8  EC1B  F009         	call	___lldiv	;wreg free
  2004   0006EC  C040  F00D         	movff	?___lldiv,_Data_Z
  2005   0006F0  C041  F00E         	movff	?___lldiv+1,_Data_Z+1
  2006   0006F4  C042  F00F         	movff	?___lldiv+2,_Data_Z+2
  2007   0006F8  C043  F010         	movff	?___lldiv+3,_Data_Z+3
  2008                           
  2009                           ;MagnetDigi24.c: 268:                 Data_TC = SumData_TC/5;
  2010   0006FC  C029  F040         	movff	_SumData_TC,___lldiv@dividend
  2011   000700  C02A  F041         	movff	_SumData_TC+1,___lldiv@dividend+1
  2012   000704  C02B  F042         	movff	_SumData_TC+2,___lldiv@dividend+2
  2013   000708  C02C  F043         	movff	_SumData_TC+3,___lldiv@dividend+3
  2014   00070C  0E05               	movlw	5
  2015   00070E  6E44               	movwf	___lldiv@divisor^0,c
  2016   000710  0E00               	movlw	0
  2017   000712  6E45               	movwf	(___lldiv@divisor+1)^0,c
  2018   000714  0E00               	movlw	0
  2019   000716  6E46               	movwf	(___lldiv@divisor+2)^0,c
  2020   000718  0E00               	movlw	0
  2021   00071A  6E47               	movwf	(___lldiv@divisor+3)^0,c
  2022   00071C  EC1B  F009         	call	___lldiv	;wreg free
  2023   000720  C040  F009         	movff	?___lldiv,_Data_TC
  2024   000724  C041  F00A         	movff	?___lldiv+1,_Data_TC+1
  2025   000728  C042  F00B         	movff	?___lldiv+2,_Data_TC+2
  2026   00072C  C043  F00C         	movff	?___lldiv+3,_Data_TC+3
  2027                           
  2028                           ;MagnetDigi24.c: 269:                 Data_TS = SumData_TS/5;
  2029   000730  C025  F040         	movff	_SumData_TS,___lldiv@dividend
  2030   000734  C026  F041         	movff	_SumData_TS+1,___lldiv@dividend+1
  2031   000738  C027  F042         	movff	_SumData_TS+2,___lldiv@dividend+2
  2032   00073C  C028  F043         	movff	_SumData_TS+3,___lldiv@dividend+3
  2033   000740  0E05               	movlw	5
  2034   000742  6E44               	movwf	___lldiv@divisor^0,c
  2035   000744  0E00               	movlw	0
  2036   000746  6E45               	movwf	(___lldiv@divisor+1)^0,c
  2037   000748  0E00               	movlw	0
  2038   00074A  6E46               	movwf	(___lldiv@divisor+2)^0,c
  2039   00074C  0E00               	movlw	0
  2040   00074E  6E47               	movwf	(___lldiv@divisor+3)^0,c
  2041   000750  EC1B  F009         	call	___lldiv	;wreg free
  2042   000754  C040  F005         	movff	?___lldiv,_Data_TS
  2043   000758  C041  F006         	movff	?___lldiv+1,_Data_TS+1
  2044   00075C  C042  F007         	movff	?___lldiv+2,_Data_TS+2
  2045   000760  C043  F008         	movff	?___lldiv+3,_Data_TS+3
  2046                           
  2047                           ;MagnetDigi24.c: 270:                 Data_AUX0 = SumData_AUX0/5;
  2048   000764  C021  F040         	movff	_SumData_AUX0,___lldiv@dividend
  2049   000768  C022  F041         	movff	_SumData_AUX0+1,___lldiv@dividend+1
  2050   00076C  C023  F042         	movff	_SumData_AUX0+2,___lldiv@dividend+2
  2051   000770  C024  F043         	movff	_SumData_AUX0+3,___lldiv@dividend+3
  2052   000774  0E05               	movlw	5
  2053   000776  6E44               	movwf	___lldiv@divisor^0,c
  2054   000778  0E00               	movlw	0
  2055   00077A  6E45               	movwf	(___lldiv@divisor+1)^0,c
  2056   00077C  0E00               	movlw	0
  2057   00077E  6E46               	movwf	(___lldiv@divisor+2)^0,c
  2058   000780  0E00               	movlw	0
  2059   000782  6E47               	movwf	(___lldiv@divisor+3)^0,c
  2060   000784  EC1B  F009         	call	___lldiv	;wreg free
  2061   000788  C040  F001         	movff	?___lldiv,_Data_AUX0
  2062   00078C  C041  F002         	movff	?___lldiv+1,_Data_AUX0+1
  2063   000790  C042  F003         	movff	?___lldiv+2,_Data_AUX0+2
  2064   000794  C043  F004         	movff	?___lldiv+3,_Data_AUX0+3
  2065                           
  2066                           ;MagnetDigi24.c: 271:                 Data_AUX1 = SumData_AUX1/5;
  2067   000798  C01D  F040         	movff	_SumData_AUX1,___lldiv@dividend
  2068   00079C  C01E  F041         	movff	_SumData_AUX1+1,___lldiv@dividend+1
  2069   0007A0  C01F  F042         	movff	_SumData_AUX1+2,___lldiv@dividend+2
  2070   0007A4  C020  F043         	movff	_SumData_AUX1+3,___lldiv@dividend+3
  2071   0007A8  0E05               	movlw	5
  2072   0007AA  6E44               	movwf	___lldiv@divisor^0,c
  2073   0007AC  0E00               	movlw	0
  2074   0007AE  6E45               	movwf	(___lldiv@divisor+1)^0,c
  2075   0007B0  0E00               	movlw	0
  2076   0007B2  6E46               	movwf	(___lldiv@divisor+2)^0,c
  2077   0007B4  0E00               	movlw	0
  2078   0007B6  6E47               	movwf	(___lldiv@divisor+3)^0,c
  2079   0007B8  EC1B  F009         	call	___lldiv	;wreg free
  2080   0007BC  C040  F068         	movff	?___lldiv,_Data_AUX1
  2081   0007C0  C041  F069         	movff	?___lldiv+1,_Data_AUX1+1
  2082   0007C4  C042  F06A         	movff	?___lldiv+2,_Data_AUX1+2
  2083   0007C8  C043  F06B         	movff	?___lldiv+3,_Data_AUX1+3
  2084                           
  2085                           ;MagnetDigi24.c: 272:                 Data_AUX2 = SumData_AUX2/5;
  2086   0007CC  C019  F040         	movff	_SumData_AUX2,___lldiv@dividend
  2087   0007D0  C01A  F041         	movff	_SumData_AUX2+1,___lldiv@dividend+1
  2088   0007D4  C01B  F042         	movff	_SumData_AUX2+2,___lldiv@dividend+2
  2089   0007D8  C01C  F043         	movff	_SumData_AUX2+3,___lldiv@dividend+3
  2090   0007DC  0E05               	movlw	5
  2091   0007DE  6E44               	movwf	___lldiv@divisor^0,c
  2092   0007E0  0E00               	movlw	0
  2093   0007E2  6E45               	movwf	(___lldiv@divisor+1)^0,c
  2094   0007E4  0E00               	movlw	0
  2095   0007E6  6E46               	movwf	(___lldiv@divisor+2)^0,c
  2096   0007E8  0E00               	movlw	0
  2097   0007EA  6E47               	movwf	(___lldiv@divisor+3)^0,c
  2098   0007EC  EC1B  F009         	call	___lldiv	;wreg free
  2099   0007F0  C040  F064         	movff	?___lldiv,_Data_AUX2
  2100   0007F4  C041  F065         	movff	?___lldiv+1,_Data_AUX2+1
  2101   0007F8  C042  F066         	movff	?___lldiv+2,_Data_AUX2+2
  2102   0007FC  C043  F067         	movff	?___lldiv+3,_Data_AUX2+3
  2103   000800                     
  2104                           ;MagnetDigi24.c: 275:                 print_string("JROADQ");
  2105   000800  0E7D               	movlw	low STR_2
  2106   000802  6E41               	movwf	print_string@str^0,c
  2107   000804  0E10               	movlw	high STR_2
  2108   000806  6E42               	movwf	(print_string@str+1)^0,c
  2109   000808  EC78  F00A         	call	_print_string	;wreg free
  2110   00080C                     
  2111                           ;MagnetDigi24.c: 276:                 WriteByte_USART(ContaSample);
  2112   00080C  503D               	movf	_ContaSample^0,w,c
  2113   00080E  EC11  F00B         	call	_WriteByte_USART
  2114   000812                     
  2115                           ;MagnetDigi24.c: 277:                 print_value(Data_X);
  2116   000812  C015  F041         	movff	_Data_X,print_value@value
  2117   000816  C016  F042         	movff	_Data_X+1,print_value@value+1
  2118   00081A  C017  F043         	movff	_Data_X+2,print_value@value+2
  2119   00081E  C018  F044         	movff	_Data_X+3,print_value@value+3
  2120   000822  ECED  F00A         	call	_print_value	;wreg free
  2121   000826                     
  2122                           ;MagnetDigi24.c: 278:                 print_value(Data_Y);
  2123   000826  C011  F041         	movff	_Data_Y,print_value@value
  2124   00082A  C012  F042         	movff	_Data_Y+1,print_value@value+1
  2125   00082E  C013  F043         	movff	_Data_Y+2,print_value@value+2
  2126   000832  C014  F044         	movff	_Data_Y+3,print_value@value+3
  2127   000836  ECED  F00A         	call	_print_value	;wreg free
  2128   00083A                     
  2129                           ;MagnetDigi24.c: 279:                 print_value(Data_Z);
  2130   00083A  C00D  F041         	movff	_Data_Z,print_value@value
  2131   00083E  C00E  F042         	movff	_Data_Z+1,print_value@value+1
  2132   000842  C00F  F043         	movff	_Data_Z+2,print_value@value+2
  2133   000846  C010  F044         	movff	_Data_Z+3,print_value@value+3
  2134   00084A  ECED  F00A         	call	_print_value	;wreg free
  2135   00084E                     
  2136                           ;MagnetDigi24.c: 280:                 print_value(Data_TC);
  2137   00084E  C009  F041         	movff	_Data_TC,print_value@value
  2138   000852  C00A  F042         	movff	_Data_TC+1,print_value@value+1
  2139   000856  C00B  F043         	movff	_Data_TC+2,print_value@value+2
  2140   00085A  C00C  F044         	movff	_Data_TC+3,print_value@value+3
  2141   00085E  ECED  F00A         	call	_print_value	;wreg free
  2142   000862                     
  2143                           ;MagnetDigi24.c: 281:                 print_value(Data_TS);
  2144   000862  C005  F041         	movff	_Data_TS,print_value@value
  2145   000866  C006  F042         	movff	_Data_TS+1,print_value@value+1
  2146   00086A  C007  F043         	movff	_Data_TS+2,print_value@value+2
  2147   00086E  C008  F044         	movff	_Data_TS+3,print_value@value+3
  2148   000872  ECED  F00A         	call	_print_value	;wreg free
  2149   000876                     
  2150                           ;MagnetDigi24.c: 282:                 print_value(Data_AUX0);
  2151   000876  C001  F041         	movff	_Data_AUX0,print_value@value
  2152   00087A  C002  F042         	movff	_Data_AUX0+1,print_value@value+1
  2153   00087E  C003  F043         	movff	_Data_AUX0+2,print_value@value+2
  2154   000882  C004  F044         	movff	_Data_AUX0+3,print_value@value+3
  2155   000886  ECED  F00A         	call	_print_value	;wreg free
  2156   00088A                     
  2157                           ;MagnetDigi24.c: 283:                 print_value(Data_AUX1);
  2158   00088A  C068  F041         	movff	_Data_AUX1,print_value@value
  2159   00088E  C069  F042         	movff	_Data_AUX1+1,print_value@value+1
  2160   000892  C06A  F043         	movff	_Data_AUX1+2,print_value@value+2
  2161   000896  C06B  F044         	movff	_Data_AUX1+3,print_value@value+3
  2162   00089A  ECED  F00A         	call	_print_value	;wreg free
  2163   00089E                     
  2164                           ;MagnetDigi24.c: 284:                 print_value(Data_AUX2);
  2165   00089E  C064  F041         	movff	_Data_AUX2,print_value@value
  2166   0008A2  C065  F042         	movff	_Data_AUX2+1,print_value@value+1
  2167   0008A6  C066  F043         	movff	_Data_AUX2+2,print_value@value+2
  2168   0008AA  C067  F044         	movff	_Data_AUX2+3,print_value@value+3
  2169   0008AE  ECED  F00A         	call	_print_value	;wreg free
  2170   0008B2                     
  2171                           ;MagnetDigi24.c: 285:                 print_string("\n\r");
  2172   0008B2  0E64               	movlw	low (STR_1+21)
  2173   0008B4  6E41               	movwf	print_string@str^0,c
  2174   0008B6  0E10               	movlw	high (STR_1+21)
  2175   0008B8  6E42               	movwf	(print_string@str+1)^0,c
  2176   0008BA  EC78  F00A         	call	_print_string	;wreg free
  2177   0008BE                     
  2178                           ;MagnetDigi24.c: 287:                 LATAbits.LA2 = 0;
  2179   0008BE  9489               	bcf	137,2,c	;volatile
  2180                           
  2181                           ;MagnetDigi24.c: 288:                 break;
  2182   0008C0  EF15  F008         	goto	i2l182
  2183   0008C4                     i2l2423:
  2184   0008C4  FFFF               	dw	65535	; assembler added errata NOP
  2185                           
  2186                           ;MagnetDigi24.c: 290:                 TransmitCMD_USART('X');
  2187   0008C6  0E58               	movlw	88
  2188   0008C8  ECC7  F00A         	call	_TransmitCMD_USART
  2189   0008CC                     
  2190                           ;MagnetDigi24.c: 291:                 RCSTAbits.CREN = 1;
  2191   0008CC  88AB               	bsf	171,4,c	;volatile
  2192                           
  2193                           ;MagnetDigi24.c: 292:         }
  2194   0008CE  EF15  F008         	goto	i2l182
  2195   0008D2                     i2l2427:
  2196   0008D2  FFFF               	dw	65535	; assembler added errata NOP
  2197   0008D4  505A               	movf	Interrups@ID^0,w,c
  2198   0008D6  6E52               	movwf	??_Interrups^0,c
  2199   0008D8  6A53               	clrf	(??_Interrups+1)^0,c
  2200                           
  2201                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2202                           ; Switch size 1, requested type "simple"
  2203                           ; Number of cases is 1, Range of values is 0 to 0
  2204                           ; switch strategies available:
  2205                           ; Name         Instructions Cycles
  2206                           ; simple_byte            4     3 (average)
  2207                           ;	Chosen strategy is simple_byte
  2208   0008DA  5053               	movf	(??_Interrups+1)^0,w,c
  2209   0008DC  0A00               	xorlw	0	; case 0
  2210   0008DE  B4D8               	btfsc	status,2,c
  2211   0008E0  EF74  F004         	goto	i2l2761
  2212   0008E4  EF62  F004         	goto	i2l2423
  2213   0008E8                     i2l2761:
  2214   0008E8  FFFF               	dw	65535	; assembler added errata NOP
  2215                           
  2216                           ; Switch size 1, requested type "simple"
  2217                           ; Number of cases is 10, Range of values is 48 to 57
  2218                           ; switch strategies available:
  2219                           ; Name         Instructions Cycles
  2220                           ; simple_byte           31    16 (average)
  2221                           ;	Chosen strategy is simple_byte
  2222   0008EA  5052               	movf	??_Interrups^0,w,c
  2223   0008EC  0A30               	xorlw	48	; case 48
  2224   0008EE  B4D8               	btfsc	status,2,c
  2225   0008F0  EF31  F000         	goto	i2l2103
  2226   0008F4  0A01               	xorlw	1	; case 49
  2227   0008F6  B4D8               	btfsc	status,2,c
  2228   0008F8  EF43  F000         	goto	i2l2115
  2229   0008FC  0A03               	xorlw	3	; case 50
  2230   0008FE  B4D8               	btfsc	status,2,c
  2231   000900  EF49  F000         	goto	i2l2117
  2232   000904  0A01               	xorlw	1	; case 51
  2233   000906  B4D8               	btfsc	status,2,c
  2234   000908  EF4F  F000         	goto	i2l2119
  2235   00090C  0A07               	xorlw	7	; case 52
  2236   00090E  B4D8               	btfsc	status,2,c
  2237   000910  EF87  F000         	goto	i2l2153
  2238   000914  0A01               	xorlw	1	; case 53
  2239   000916  B4D8               	btfsc	status,2,c
  2240   000918  EF29  F000         	goto	i2l2099
  2241   00091C  0A03               	xorlw	3	; case 54
  2242   00091E  B4D8               	btfsc	status,2,c
  2243   000920  EF8D  F000         	goto	i2l2155
  2244   000924  0A01               	xorlw	1	; case 55
  2245   000926  B4D8               	btfsc	status,2,c
  2246   000928  EFFE  F000         	goto	i2l2187
  2247   00092C  0A0F               	xorlw	15	; case 56
  2248   00092E  B4D8               	btfsc	status,2,c
  2249   000930  EF04  F001         	goto	i2l2189
  2250   000934  0A01               	xorlw	1	; case 57
  2251   000936  B4D8               	btfsc	status,2,c
  2252   000938  EF0A  F001         	goto	i2l143
  2253   00093C  EF62  F004         	goto	i2l2423
  2254   000940                     i2l129:
  2255   000940  FFFF               	dw	65535	; assembler added errata NOP
  2256   000942  AAF2               	btfss	242,5,c	;volatile
  2257   000944  EFA6  F004         	goto	i2u78_41
  2258   000948  EFA9  F004         	goto	i2u78_40
  2259   00094C                     i2u78_41:
  2260   00094C  FFFF               	dw	65535	; assembler added errata NOP
  2261   00094E  EF15  F008         	goto	i2l182
  2262   000952                     i2u78_40:
  2263   000952  FFFF               	dw	65535	; assembler added errata NOP
  2264   000954  A4F2               	btfss	242,2,c	;volatile
  2265   000956  EFAF  F004         	goto	i2u79_41
  2266   00095A  EFB2  F004         	goto	i2u79_40
  2267   00095E                     i2u79_41:
  2268   00095E  FFFF               	dw	65535	; assembler added errata NOP
  2269   000960  EF15  F008         	goto	i2l182
  2270   000964                     i2u79_40:
  2271   000964  FFFF               	dw	65535	; assembler added errata NOP
  2272   000966                     
  2273                           ;MagnetDigi24.c: 295:         LATAbits.LA2 = 1;
  2274   000966  8489               	bsf	137,2,c	;volatile
  2275                           
  2276                           ;MagnetDigi24.c: 297:         INTCONbits.TMR0IF = 0;
  2277   000968  94F2               	bcf	242,2,c	;volatile
  2278   00096A                     
  2279                           ;MagnetDigi24.c: 298:         TMR0H = 0x10;
  2280   00096A  0E10               	movlw	16
  2281   00096C  6ED7               	movwf	215,c	;volatile
  2282                           
  2283                           ;MagnetDigi24.c: 299:         TMR0L = 0x00;
  2284   00096E  0E00               	movlw	0
  2285   000970  6ED6               	movwf	214,c	;volatile
  2286   000972                     
  2287                           ;MagnetDigi24.c: 300:         ContaSample++;
  2288   000972  2A3D               	incf	_ContaSample^0,f,c
  2289   000974                     
  2290                           ;MagnetDigi24.c: 303:         CleanHolding();
  2291   000974  EC22  F00B         	call	_CleanHolding	;wreg free
  2292   000978                     
  2293                           ;MagnetDigi24.c: 305:         PORTB = 0x38;
  2294   000978  0E38               	movlw	56
  2295   00097A  6E81               	movwf	129,c	;volatile
  2296   00097C                     
  2297                           ;MagnetDigi24.c: 306:         _delay((unsigned long)((7)*(39321600UL/4000.0)));
  2298   00097C  0E44               	movlw	68
  2299   00097E  6E52               	movwf	??_Interrups^0,c
  2300   000980  0E10               	movlw	16
  2301   000982                     i2u102_47:
  2302   000982  FFFF               	dw	65535	; errata NOP
  2303   000984  2EE8               	decfsz	wreg,f,c
  2304   000986  D7FD               	bra	i2u102_47
  2305   000988  2E52               	decfsz	??_Interrups^0,f,c
  2306   00098A  D7FB               	bra	i2u102_47
  2307   00098C  D000               	nop2	
  2308   00098E                     
  2309                           ;MagnetDigi24.c: 307:         SumData_X = 0;
  2310   00098E  0E00               	movlw	0
  2311   000990  6E35               	movwf	_SumData_X^0,c
  2312   000992  0E00               	movlw	0
  2313   000994  6E36               	movwf	(_SumData_X+1)^0,c
  2314   000996  0E00               	movlw	0
  2315   000998  6E37               	movwf	(_SumData_X+2)^0,c
  2316   00099A  0E00               	movlw	0
  2317   00099C  6E38               	movwf	(_SumData_X+3)^0,c
  2318   00099E                     
  2319                           ;MagnetDigi24.c: 308:         ReadAD24(0,0x00);
  2320   00099E  0E00               	movlw	0
  2321   0009A0  6E42               	movwf	ReadAD24@cmd_convert^0,c
  2322   0009A2  0E00               	movlw	0
  2323   0009A4  ECB1  F008         	call	_ReadAD24
  2324   0009A8                     
  2325                           ;MagnetDigi24.c: 309:         for(conta=0; conta<5; conta++){
  2326   0009A8  0E00               	movlw	0
  2327   0009AA  6E5B               	movwf	Interrups@conta^0,c
  2328   0009AC                     i2l2451:
  2329   0009AC  FFFF               	dw	65535	; assembler added errata NOP
  2330                           
  2331                           ;MagnetDigi24.c: 310:             Data_X = ReadAD24(1,0x00);
  2332   0009AE  0E00               	movlw	0
  2333   0009B0  6E42               	movwf	ReadAD24@cmd_convert^0,c
  2334   0009B2  0E01               	movlw	1
  2335   0009B4  ECB1  F008         	call	_ReadAD24
  2336   0009B8  C042  F015         	movff	?_ReadAD24,_Data_X
  2337   0009BC  C043  F016         	movff	?_ReadAD24+1,_Data_X+1
  2338   0009C0  C044  F017         	movff	?_ReadAD24+2,_Data_X+2
  2339   0009C4  C045  F018         	movff	?_ReadAD24+3,_Data_X+3
  2340   0009C8                     
  2341                           ;MagnetDigi24.c: 311:             SumData_X = SumData_X + Data_X;
  2342   0009C8  5015               	movf	_Data_X^0,w,c
  2343   0009CA  2435               	addwf	_SumData_X^0,w,c
  2344   0009CC  6E35               	movwf	_SumData_X^0,c
  2345   0009CE  5016               	movf	(_Data_X+1)^0,w,c
  2346   0009D0  2036               	addwfc	(_SumData_X+1)^0,w,c
  2347   0009D2  6E36               	movwf	(_SumData_X+1)^0,c
  2348   0009D4  5017               	movf	(_Data_X+2)^0,w,c
  2349   0009D6  2037               	addwfc	(_SumData_X+2)^0,w,c
  2350   0009D8  6E37               	movwf	(_SumData_X+2)^0,c
  2351   0009DA  5018               	movf	(_Data_X+3)^0,w,c
  2352   0009DC  2038               	addwfc	(_SumData_X+3)^0,w,c
  2353   0009DE  6E38               	movwf	(_SumData_X+3)^0,c
  2354   0009E0                     
  2355                           ;MagnetDigi24.c: 312:         }
  2356   0009E0  2A5B               	incf	Interrups@conta^0,f,c
  2357   0009E2  0E04               	movlw	4
  2358   0009E4  645B               	cpfsgt	Interrups@conta^0,c
  2359   0009E6  EFF7  F004         	goto	i2u80_41
  2360   0009EA  EFFA  F004         	goto	i2u80_40
  2361   0009EE                     i2u80_41:
  2362   0009EE  FFFF               	dw	65535	; assembler added errata NOP
  2363   0009F0  EFD6  F004         	goto	i2l2451
  2364   0009F4                     i2u80_40:
  2365   0009F4  FFFF               	dw	65535	; assembler added errata NOP
  2366   0009F6                     
  2367                           ;MagnetDigi24.c: 314:         CleanHolding();
  2368   0009F6  EC22  F00B         	call	_CleanHolding	;wreg free
  2369   0009FA                     
  2370                           ;MagnetDigi24.c: 316:         PORTB = 0x18;
  2371   0009FA  0E18               	movlw	24
  2372   0009FC  6E81               	movwf	129,c	;volatile
  2373   0009FE                     
  2374                           ;MagnetDigi24.c: 317:         _delay((unsigned long)((7)*(39321600UL/4000.0)));
  2375   0009FE  0E44               	movlw	68
  2376   000A00  6E52               	movwf	??_Interrups^0,c
  2377   000A02  0E10               	movlw	16
  2378   000A04                     i2u103_47:
  2379   000A04  FFFF               	dw	65535	; errata NOP
  2380   000A06  2EE8               	decfsz	wreg,f,c
  2381   000A08  D7FD               	bra	i2u103_47
  2382   000A0A  2E52               	decfsz	??_Interrups^0,f,c
  2383   000A0C  D7FB               	bra	i2u103_47
  2384   000A0E  D000               	nop2	
  2385   000A10                     
  2386                           ;MagnetDigi24.c: 318:         SumData_Y = 0;
  2387   000A10  0E00               	movlw	0
  2388   000A12  6E31               	movwf	_SumData_Y^0,c
  2389   000A14  0E00               	movlw	0
  2390   000A16  6E32               	movwf	(_SumData_Y+1)^0,c
  2391   000A18  0E00               	movlw	0
  2392   000A1A  6E33               	movwf	(_SumData_Y+2)^0,c
  2393   000A1C  0E00               	movlw	0
  2394   000A1E  6E34               	movwf	(_SumData_Y+3)^0,c
  2395   000A20                     
  2396                           ;MagnetDigi24.c: 319:         ReadAD24(0,0x00);
  2397   000A20  0E00               	movlw	0
  2398   000A22  6E42               	movwf	ReadAD24@cmd_convert^0,c
  2399   000A24  0E00               	movlw	0
  2400   000A26  ECB1  F008         	call	_ReadAD24
  2401   000A2A                     
  2402                           ;MagnetDigi24.c: 320:         for(conta=0; conta<5; conta++){
  2403   000A2A  0E00               	movlw	0
  2404   000A2C  6E5B               	movwf	Interrups@conta^0,c
  2405   000A2E                     i2l2475:
  2406   000A2E  FFFF               	dw	65535	; assembler added errata NOP
  2407                           
  2408                           ;MagnetDigi24.c: 321:             Data_Y = ReadAD24(1,0x00);
  2409   000A30  0E00               	movlw	0
  2410   000A32  6E42               	movwf	ReadAD24@cmd_convert^0,c
  2411   000A34  0E01               	movlw	1
  2412   000A36  ECB1  F008         	call	_ReadAD24
  2413   000A3A  C042  F011         	movff	?_ReadAD24,_Data_Y
  2414   000A3E  C043  F012         	movff	?_ReadAD24+1,_Data_Y+1
  2415   000A42  C044  F013         	movff	?_ReadAD24+2,_Data_Y+2
  2416   000A46  C045  F014         	movff	?_ReadAD24+3,_Data_Y+3
  2417   000A4A                     
  2418                           ;MagnetDigi24.c: 322:             SumData_Y = SumData_Y + Data_Y;
  2419   000A4A  5011               	movf	_Data_Y^0,w,c
  2420   000A4C  2431               	addwf	_SumData_Y^0,w,c
  2421   000A4E  6E31               	movwf	_SumData_Y^0,c
  2422   000A50  5012               	movf	(_Data_Y+1)^0,w,c
  2423   000A52  2032               	addwfc	(_SumData_Y+1)^0,w,c
  2424   000A54  6E32               	movwf	(_SumData_Y+1)^0,c
  2425   000A56  5013               	movf	(_Data_Y+2)^0,w,c
  2426   000A58  2033               	addwfc	(_SumData_Y+2)^0,w,c
  2427   000A5A  6E33               	movwf	(_SumData_Y+2)^0,c
  2428   000A5C  5014               	movf	(_Data_Y+3)^0,w,c
  2429   000A5E  2034               	addwfc	(_SumData_Y+3)^0,w,c
  2430   000A60  6E34               	movwf	(_SumData_Y+3)^0,c
  2431   000A62                     
  2432                           ;MagnetDigi24.c: 323:         }
  2433   000A62  2A5B               	incf	Interrups@conta^0,f,c
  2434   000A64  0E04               	movlw	4
  2435   000A66  645B               	cpfsgt	Interrups@conta^0,c
  2436   000A68  EF38  F005         	goto	i2u81_41
  2437   000A6C  EF3B  F005         	goto	i2u81_40
  2438   000A70                     i2u81_41:
  2439   000A70  FFFF               	dw	65535	; assembler added errata NOP
  2440   000A72  EF17  F005         	goto	i2l2475
  2441   000A76                     i2u81_40:
  2442   000A76  FFFF               	dw	65535	; assembler added errata NOP
  2443   000A78                     
  2444                           ;MagnetDigi24.c: 325:         CleanHolding();
  2445   000A78  EC22  F00B         	call	_CleanHolding	;wreg free
  2446   000A7C                     
  2447                           ;MagnetDigi24.c: 327:         PORTB = 0x28;
  2448   000A7C  0E28               	movlw	40
  2449   000A7E  6E81               	movwf	129,c	;volatile
  2450   000A80                     
  2451                           ;MagnetDigi24.c: 328:         _delay((unsigned long)((7)*(39321600UL/4000.0)));
  2452   000A80  0E44               	movlw	68
  2453   000A82  6E52               	movwf	??_Interrups^0,c
  2454   000A84  0E10               	movlw	16
  2455   000A86                     i2u104_47:
  2456   000A86  FFFF               	dw	65535	; errata NOP
  2457   000A88  2EE8               	decfsz	wreg,f,c
  2458   000A8A  D7FD               	bra	i2u104_47
  2459   000A8C  2E52               	decfsz	??_Interrups^0,f,c
  2460   000A8E  D7FB               	bra	i2u104_47
  2461   000A90  D000               	nop2	
  2462   000A92                     
  2463                           ;MagnetDigi24.c: 329:         SumData_Z = 0;
  2464   000A92  0E00               	movlw	0
  2465   000A94  6E2D               	movwf	_SumData_Z^0,c
  2466   000A96  0E00               	movlw	0
  2467   000A98  6E2E               	movwf	(_SumData_Z+1)^0,c
  2468   000A9A  0E00               	movlw	0
  2469   000A9C  6E2F               	movwf	(_SumData_Z+2)^0,c
  2470   000A9E  0E00               	movlw	0
  2471   000AA0  6E30               	movwf	(_SumData_Z+3)^0,c
  2472   000AA2                     
  2473                           ;MagnetDigi24.c: 330:         ReadAD24(0,0x00);
  2474   000AA2  0E00               	movlw	0
  2475   000AA4  6E42               	movwf	ReadAD24@cmd_convert^0,c
  2476   000AA6  0E00               	movlw	0
  2477   000AA8  ECB1  F008         	call	_ReadAD24
  2478   000AAC                     
  2479                           ;MagnetDigi24.c: 331:         for(conta=0; conta<5; conta++){
  2480   000AAC  0E00               	movlw	0
  2481   000AAE  6E5B               	movwf	Interrups@conta^0,c
  2482   000AB0                     i2l2499:
  2483   000AB0  FFFF               	dw	65535	; assembler added errata NOP
  2484                           
  2485                           ;MagnetDigi24.c: 332:             Data_Z = ReadAD24(1,0x00);
  2486   000AB2  0E00               	movlw	0
  2487   000AB4  6E42               	movwf	ReadAD24@cmd_convert^0,c
  2488   000AB6  0E01               	movlw	1
  2489   000AB8  ECB1  F008         	call	_ReadAD24
  2490   000ABC  C042  F00D         	movff	?_ReadAD24,_Data_Z
  2491   000AC0  C043  F00E         	movff	?_ReadAD24+1,_Data_Z+1
  2492   000AC4  C044  F00F         	movff	?_ReadAD24+2,_Data_Z+2
  2493   000AC8  C045  F010         	movff	?_ReadAD24+3,_Data_Z+3
  2494   000ACC                     
  2495                           ;MagnetDigi24.c: 333:             SumData_Z = SumData_Z + Data_Z;
  2496   000ACC  500D               	movf	_Data_Z^0,w,c
  2497   000ACE  242D               	addwf	_SumData_Z^0,w,c
  2498   000AD0  6E2D               	movwf	_SumData_Z^0,c
  2499   000AD2  500E               	movf	(_Data_Z+1)^0,w,c
  2500   000AD4  202E               	addwfc	(_SumData_Z+1)^0,w,c
  2501   000AD6  6E2E               	movwf	(_SumData_Z+1)^0,c
  2502   000AD8  500F               	movf	(_Data_Z+2)^0,w,c
  2503   000ADA  202F               	addwfc	(_SumData_Z+2)^0,w,c
  2504   000ADC  6E2F               	movwf	(_SumData_Z+2)^0,c
  2505   000ADE  5010               	movf	(_Data_Z+3)^0,w,c
  2506   000AE0  2030               	addwfc	(_SumData_Z+3)^0,w,c
  2507   000AE2  6E30               	movwf	(_SumData_Z+3)^0,c
  2508   000AE4                     
  2509                           ;MagnetDigi24.c: 334:         }
  2510   000AE4  2A5B               	incf	Interrups@conta^0,f,c
  2511   000AE6  0E04               	movlw	4
  2512   000AE8  645B               	cpfsgt	Interrups@conta^0,c
  2513   000AEA  EF79  F005         	goto	i2u82_41
  2514   000AEE  EF7C  F005         	goto	i2u82_40
  2515   000AF2                     i2u82_41:
  2516   000AF2  FFFF               	dw	65535	; assembler added errata NOP
  2517   000AF4  EF58  F005         	goto	i2l2499
  2518   000AF8                     i2u82_40:
  2519   000AF8  FFFF               	dw	65535	; assembler added errata NOP
  2520   000AFA                     
  2521                           ;MagnetDigi24.c: 336:         CleanHolding();
  2522   000AFA  EC22  F00B         	call	_CleanHolding	;wreg free
  2523   000AFE                     
  2524                           ;MagnetDigi24.c: 338:         PORTB = 0x08;
  2525   000AFE  0E08               	movlw	8
  2526   000B00  6E81               	movwf	129,c	;volatile
  2527   000B02                     
  2528                           ;MagnetDigi24.c: 339:         _delay((unsigned long)((7)*(39321600UL/4000.0)));
  2529   000B02  0E44               	movlw	68
  2530   000B04  6E52               	movwf	??_Interrups^0,c
  2531   000B06  0E10               	movlw	16
  2532   000B08                     i2u105_47:
  2533   000B08  FFFF               	dw	65535	; errata NOP
  2534   000B0A  2EE8               	decfsz	wreg,f,c
  2535   000B0C  D7FD               	bra	i2u105_47
  2536   000B0E  2E52               	decfsz	??_Interrups^0,f,c
  2537   000B10  D7FB               	bra	i2u105_47
  2538   000B12  D000               	nop2	
  2539   000B14                     
  2540                           ;MagnetDigi24.c: 340:         SumData_TC = 0;
  2541   000B14  0E00               	movlw	0
  2542   000B16  6E29               	movwf	_SumData_TC^0,c
  2543   000B18  0E00               	movlw	0
  2544   000B1A  6E2A               	movwf	(_SumData_TC+1)^0,c
  2545   000B1C  0E00               	movlw	0
  2546   000B1E  6E2B               	movwf	(_SumData_TC+2)^0,c
  2547   000B20  0E00               	movlw	0
  2548   000B22  6E2C               	movwf	(_SumData_TC+3)^0,c
  2549   000B24                     
  2550                           ;MagnetDigi24.c: 341:         ReadAD24(0,0x00);
  2551   000B24  0E00               	movlw	0
  2552   000B26  6E42               	movwf	ReadAD24@cmd_convert^0,c
  2553   000B28  0E00               	movlw	0
  2554   000B2A  ECB1  F008         	call	_ReadAD24
  2555   000B2E                     
  2556                           ;MagnetDigi24.c: 342:         for(conta=0; conta<5; conta++){
  2557   000B2E  0E00               	movlw	0
  2558   000B30  6E5B               	movwf	Interrups@conta^0,c
  2559   000B32                     i2l2523:
  2560   000B32  FFFF               	dw	65535	; assembler added errata NOP
  2561                           
  2562                           ;MagnetDigi24.c: 343:             Data_TC = ReadAD24(1,0x00);
  2563   000B34  0E00               	movlw	0
  2564   000B36  6E42               	movwf	ReadAD24@cmd_convert^0,c
  2565   000B38  0E01               	movlw	1
  2566   000B3A  ECB1  F008         	call	_ReadAD24
  2567   000B3E  C042  F009         	movff	?_ReadAD24,_Data_TC
  2568   000B42  C043  F00A         	movff	?_ReadAD24+1,_Data_TC+1
  2569   000B46  C044  F00B         	movff	?_ReadAD24+2,_Data_TC+2
  2570   000B4A  C045  F00C         	movff	?_ReadAD24+3,_Data_TC+3
  2571   000B4E                     
  2572                           ;MagnetDigi24.c: 344:             SumData_TC = SumData_TC + Data_TC;
  2573   000B4E  5009               	movf	_Data_TC^0,w,c
  2574   000B50  2429               	addwf	_SumData_TC^0,w,c
  2575   000B52  6E29               	movwf	_SumData_TC^0,c
  2576   000B54  500A               	movf	(_Data_TC+1)^0,w,c
  2577   000B56  202A               	addwfc	(_SumData_TC+1)^0,w,c
  2578   000B58  6E2A               	movwf	(_SumData_TC+1)^0,c
  2579   000B5A  500B               	movf	(_Data_TC+2)^0,w,c
  2580   000B5C  202B               	addwfc	(_SumData_TC+2)^0,w,c
  2581   000B5E  6E2B               	movwf	(_SumData_TC+2)^0,c
  2582   000B60  500C               	movf	(_Data_TC+3)^0,w,c
  2583   000B62  202C               	addwfc	(_SumData_TC+3)^0,w,c
  2584   000B64  6E2C               	movwf	(_SumData_TC+3)^0,c
  2585   000B66                     
  2586                           ;MagnetDigi24.c: 345:         }
  2587   000B66  2A5B               	incf	Interrups@conta^0,f,c
  2588   000B68  0E04               	movlw	4
  2589   000B6A  645B               	cpfsgt	Interrups@conta^0,c
  2590   000B6C  EFBA  F005         	goto	i2u83_41
  2591   000B70  EFBD  F005         	goto	i2u83_40
  2592   000B74                     i2u83_41:
  2593   000B74  FFFF               	dw	65535	; assembler added errata NOP
  2594   000B76  EF99  F005         	goto	i2l2523
  2595   000B7A                     i2u83_40:
  2596   000B7A  FFFF               	dw	65535	; assembler added errata NOP
  2597   000B7C                     
  2598                           ;MagnetDigi24.c: 347:         CleanHolding();
  2599   000B7C  EC22  F00B         	call	_CleanHolding	;wreg free
  2600   000B80                     
  2601                           ;MagnetDigi24.c: 349:         PORTB = 0x04;
  2602   000B80  0E04               	movlw	4
  2603   000B82  6E81               	movwf	129,c	;volatile
  2604   000B84                     
  2605                           ;MagnetDigi24.c: 350:         _delay((unsigned long)((7)*(39321600UL/4000.0)));
  2606   000B84  0E44               	movlw	68
  2607   000B86  6E52               	movwf	??_Interrups^0,c
  2608   000B88  0E10               	movlw	16
  2609   000B8A                     i2u106_47:
  2610   000B8A  FFFF               	dw	65535	; errata NOP
  2611   000B8C  2EE8               	decfsz	wreg,f,c
  2612   000B8E  D7FD               	bra	i2u106_47
  2613   000B90  2E52               	decfsz	??_Interrups^0,f,c
  2614   000B92  D7FB               	bra	i2u106_47
  2615   000B94  D000               	nop2	
  2616   000B96                     
  2617                           ;MagnetDigi24.c: 351:         SumData_TS = 0;
  2618   000B96  0E00               	movlw	0
  2619   000B98  6E25               	movwf	_SumData_TS^0,c
  2620   000B9A  0E00               	movlw	0
  2621   000B9C  6E26               	movwf	(_SumData_TS+1)^0,c
  2622   000B9E  0E00               	movlw	0
  2623   000BA0  6E27               	movwf	(_SumData_TS+2)^0,c
  2624   000BA2  0E00               	movlw	0
  2625   000BA4  6E28               	movwf	(_SumData_TS+3)^0,c
  2626   000BA6                     
  2627                           ;MagnetDigi24.c: 352:         ReadAD24(0,0x00);
  2628   000BA6  0E00               	movlw	0
  2629   000BA8  6E42               	movwf	ReadAD24@cmd_convert^0,c
  2630   000BAA  0E00               	movlw	0
  2631   000BAC  ECB1  F008         	call	_ReadAD24
  2632   000BB0                     
  2633                           ;MagnetDigi24.c: 353:         for(conta=0; conta<5; conta++){
  2634   000BB0  0E00               	movlw	0
  2635   000BB2  6E5B               	movwf	Interrups@conta^0,c
  2636   000BB4                     i2l2547:
  2637   000BB4  FFFF               	dw	65535	; assembler added errata NOP
  2638                           
  2639                           ;MagnetDigi24.c: 354:             Data_TS = ReadAD24(1,0x00);
  2640   000BB6  0E00               	movlw	0
  2641   000BB8  6E42               	movwf	ReadAD24@cmd_convert^0,c
  2642   000BBA  0E01               	movlw	1
  2643   000BBC  ECB1  F008         	call	_ReadAD24
  2644   000BC0  C042  F005         	movff	?_ReadAD24,_Data_TS
  2645   000BC4  C043  F006         	movff	?_ReadAD24+1,_Data_TS+1
  2646   000BC8  C044  F007         	movff	?_ReadAD24+2,_Data_TS+2
  2647   000BCC  C045  F008         	movff	?_ReadAD24+3,_Data_TS+3
  2648   000BD0                     
  2649                           ;MagnetDigi24.c: 355:             SumData_TS = SumData_TS + Data_TS;
  2650   000BD0  5005               	movf	_Data_TS^0,w,c
  2651   000BD2  2425               	addwf	_SumData_TS^0,w,c
  2652   000BD4  6E25               	movwf	_SumData_TS^0,c
  2653   000BD6  5006               	movf	(_Data_TS+1)^0,w,c
  2654   000BD8  2026               	addwfc	(_SumData_TS+1)^0,w,c
  2655   000BDA  6E26               	movwf	(_SumData_TS+1)^0,c
  2656   000BDC  5007               	movf	(_Data_TS+2)^0,w,c
  2657   000BDE  2027               	addwfc	(_SumData_TS+2)^0,w,c
  2658   000BE0  6E27               	movwf	(_SumData_TS+2)^0,c
  2659   000BE2  5008               	movf	(_Data_TS+3)^0,w,c
  2660   000BE4  2028               	addwfc	(_SumData_TS+3)^0,w,c
  2661   000BE6  6E28               	movwf	(_SumData_TS+3)^0,c
  2662   000BE8                     
  2663                           ;MagnetDigi24.c: 356:         }
  2664   000BE8  2A5B               	incf	Interrups@conta^0,f,c
  2665   000BEA  0E04               	movlw	4
  2666   000BEC  645B               	cpfsgt	Interrups@conta^0,c
  2667   000BEE  EFFB  F005         	goto	i2u84_41
  2668   000BF2  EFFE  F005         	goto	i2u84_40
  2669   000BF6                     i2u84_41:
  2670   000BF6  FFFF               	dw	65535	; assembler added errata NOP
  2671   000BF8  EFDA  F005         	goto	i2l2547
  2672   000BFC                     i2u84_40:
  2673   000BFC  FFFF               	dw	65535	; assembler added errata NOP
  2674   000BFE                     
  2675                           ;MagnetDigi24.c: 358:         CleanHolding();
  2676   000BFE  EC22  F00B         	call	_CleanHolding	;wreg free
  2677   000C02                     
  2678                           ;MagnetDigi24.c: 360:         PORTB = 0x34;
  2679   000C02  0E34               	movlw	52
  2680   000C04  6E81               	movwf	129,c	;volatile
  2681   000C06                     
  2682                           ;MagnetDigi24.c: 361:         _delay((unsigned long)((7)*(39321600UL/4000.0)));
  2683   000C06  0E44               	movlw	68
  2684   000C08  6E52               	movwf	??_Interrups^0,c
  2685   000C0A  0E10               	movlw	16
  2686   000C0C                     i2u107_47:
  2687   000C0C  FFFF               	dw	65535	; errata NOP
  2688   000C0E  2EE8               	decfsz	wreg,f,c
  2689   000C10  D7FD               	bra	i2u107_47
  2690   000C12  2E52               	decfsz	??_Interrups^0,f,c
  2691   000C14  D7FB               	bra	i2u107_47
  2692   000C16  D000               	nop2	
  2693   000C18                     
  2694                           ;MagnetDigi24.c: 362:         SumData_AUX0 = 0;
  2695   000C18  0E00               	movlw	0
  2696   000C1A  6E21               	movwf	_SumData_AUX0^0,c
  2697   000C1C  0E00               	movlw	0
  2698   000C1E  6E22               	movwf	(_SumData_AUX0+1)^0,c
  2699   000C20  0E00               	movlw	0
  2700   000C22  6E23               	movwf	(_SumData_AUX0+2)^0,c
  2701   000C24  0E00               	movlw	0
  2702   000C26  6E24               	movwf	(_SumData_AUX0+3)^0,c
  2703   000C28                     
  2704                           ;MagnetDigi24.c: 363:         ReadAD24(0,0x00);
  2705   000C28  0E00               	movlw	0
  2706   000C2A  6E42               	movwf	ReadAD24@cmd_convert^0,c
  2707   000C2C  0E00               	movlw	0
  2708   000C2E  ECB1  F008         	call	_ReadAD24
  2709   000C32                     
  2710                           ;MagnetDigi24.c: 364:         for(conta=0; conta<5; conta++){
  2711   000C32  0E00               	movlw	0
  2712   000C34  6E5B               	movwf	Interrups@conta^0,c
  2713   000C36                     i2l2571:
  2714   000C36  FFFF               	dw	65535	; assembler added errata NOP
  2715                           
  2716                           ;MagnetDigi24.c: 365:             Data_AUX0 = ReadAD24(1,0x00);
  2717   000C38  0E00               	movlw	0
  2718   000C3A  6E42               	movwf	ReadAD24@cmd_convert^0,c
  2719   000C3C  0E01               	movlw	1
  2720   000C3E  ECB1  F008         	call	_ReadAD24
  2721   000C42  C042  F001         	movff	?_ReadAD24,_Data_AUX0
  2722   000C46  C043  F002         	movff	?_ReadAD24+1,_Data_AUX0+1
  2723   000C4A  C044  F003         	movff	?_ReadAD24+2,_Data_AUX0+2
  2724   000C4E  C045  F004         	movff	?_ReadAD24+3,_Data_AUX0+3
  2725   000C52                     
  2726                           ;MagnetDigi24.c: 366:             SumData_AUX0 = SumData_AUX0 + Data_AUX0;
  2727   000C52  5001               	movf	_Data_AUX0^0,w,c
  2728   000C54  2421               	addwf	_SumData_AUX0^0,w,c
  2729   000C56  6E21               	movwf	_SumData_AUX0^0,c
  2730   000C58  5002               	movf	(_Data_AUX0+1)^0,w,c
  2731   000C5A  2022               	addwfc	(_SumData_AUX0+1)^0,w,c
  2732   000C5C  6E22               	movwf	(_SumData_AUX0+1)^0,c
  2733   000C5E  5003               	movf	(_Data_AUX0+2)^0,w,c
  2734   000C60  2023               	addwfc	(_SumData_AUX0+2)^0,w,c
  2735   000C62  6E23               	movwf	(_SumData_AUX0+2)^0,c
  2736   000C64  5004               	movf	(_Data_AUX0+3)^0,w,c
  2737   000C66  2024               	addwfc	(_SumData_AUX0+3)^0,w,c
  2738   000C68  6E24               	movwf	(_SumData_AUX0+3)^0,c
  2739   000C6A                     
  2740                           ;MagnetDigi24.c: 367:         }
  2741   000C6A  2A5B               	incf	Interrups@conta^0,f,c
  2742   000C6C  0E04               	movlw	4
  2743   000C6E  645B               	cpfsgt	Interrups@conta^0,c
  2744   000C70  EF3C  F006         	goto	i2u85_41
  2745   000C74  EF3F  F006         	goto	i2u85_40
  2746   000C78                     i2u85_41:
  2747   000C78  FFFF               	dw	65535	; assembler added errata NOP
  2748   000C7A  EF1B  F006         	goto	i2l2571
  2749   000C7E                     i2u85_40:
  2750   000C7E  FFFF               	dw	65535	; assembler added errata NOP
  2751   000C80                     
  2752                           ;MagnetDigi24.c: 369:         CleanHolding();
  2753   000C80  EC22  F00B         	call	_CleanHolding	;wreg free
  2754   000C84                     
  2755                           ;MagnetDigi24.c: 371:         PORTB = 0x14;
  2756   000C84  0E14               	movlw	20
  2757   000C86  6E81               	movwf	129,c	;volatile
  2758   000C88                     
  2759                           ;MagnetDigi24.c: 372:         _delay((unsigned long)((7)*(39321600UL/4000.0)));
  2760   000C88  0E44               	movlw	68
  2761   000C8A  6E52               	movwf	??_Interrups^0,c
  2762   000C8C  0E10               	movlw	16
  2763   000C8E                     i2u108_47:
  2764   000C8E  FFFF               	dw	65535	; errata NOP
  2765   000C90  2EE8               	decfsz	wreg,f,c
  2766   000C92  D7FD               	bra	i2u108_47
  2767   000C94  2E52               	decfsz	??_Interrups^0,f,c
  2768   000C96  D7FB               	bra	i2u108_47
  2769   000C98  D000               	nop2	
  2770   000C9A                     
  2771                           ;MagnetDigi24.c: 373:         SumData_AUX1 = 0;
  2772   000C9A  0E00               	movlw	0
  2773   000C9C  6E1D               	movwf	_SumData_AUX1^0,c
  2774   000C9E  0E00               	movlw	0
  2775   000CA0  6E1E               	movwf	(_SumData_AUX1+1)^0,c
  2776   000CA2  0E00               	movlw	0
  2777   000CA4  6E1F               	movwf	(_SumData_AUX1+2)^0,c
  2778   000CA6  0E00               	movlw	0
  2779   000CA8  6E20               	movwf	(_SumData_AUX1+3)^0,c
  2780   000CAA                     
  2781                           ;MagnetDigi24.c: 374:         ReadAD24(0,0x00);
  2782   000CAA  0E00               	movlw	0
  2783   000CAC  6E42               	movwf	ReadAD24@cmd_convert^0,c
  2784   000CAE  0E00               	movlw	0
  2785   000CB0  ECB1  F008         	call	_ReadAD24
  2786   000CB4                     
  2787                           ;MagnetDigi24.c: 375:         for(conta=0; conta<5; conta++){
  2788   000CB4  0E00               	movlw	0
  2789   000CB6  6E5B               	movwf	Interrups@conta^0,c
  2790   000CB8                     i2l2595:
  2791   000CB8  FFFF               	dw	65535	; assembler added errata NOP
  2792                           
  2793                           ;MagnetDigi24.c: 376:             Data_AUX1 = ReadAD24(1,0x00);
  2794   000CBA  0E00               	movlw	0
  2795   000CBC  6E42               	movwf	ReadAD24@cmd_convert^0,c
  2796   000CBE  0E01               	movlw	1
  2797   000CC0  ECB1  F008         	call	_ReadAD24
  2798   000CC4  C042  F068         	movff	?_ReadAD24,_Data_AUX1
  2799   000CC8  C043  F069         	movff	?_ReadAD24+1,_Data_AUX1+1
  2800   000CCC  C044  F06A         	movff	?_ReadAD24+2,_Data_AUX1+2
  2801   000CD0  C045  F06B         	movff	?_ReadAD24+3,_Data_AUX1+3
  2802   000CD4                     
  2803                           ;MagnetDigi24.c: 377:             SumData_AUX1 = SumData_AUX1 + Data_AUX1;
  2804   000CD4  0100               	movlb	0	; () banked
  2805   000CD6  5168               	movf	_Data_AUX1& (0+255),w,b
  2806   000CD8  241D               	addwf	_SumData_AUX1^0,w,c
  2807   000CDA  6E1D               	movwf	_SumData_AUX1^0,c
  2808   000CDC  5169               	movf	(_Data_AUX1+1)& (0+255),w,b
  2809   000CDE  201E               	addwfc	(_SumData_AUX1+1)^0,w,c
  2810   000CE0  6E1E               	movwf	(_SumData_AUX1+1)^0,c
  2811   000CE2  516A               	movf	(_Data_AUX1+2)& (0+255),w,b
  2812   000CE4  201F               	addwfc	(_SumData_AUX1+2)^0,w,c
  2813   000CE6  6E1F               	movwf	(_SumData_AUX1+2)^0,c
  2814   000CE8  516B               	movf	(_Data_AUX1+3)& (0+255),w,b
  2815   000CEA  2020               	addwfc	(_SumData_AUX1+3)^0,w,c
  2816   000CEC  6E20               	movwf	(_SumData_AUX1+3)^0,c
  2817   000CEE                     
  2818                           ; BSR set to: 0
  2819                           ;MagnetDigi24.c: 378:         }
  2820   000CEE  2A5B               	incf	Interrups@conta^0,f,c
  2821   000CF0                     
  2822                           ; BSR set to: 0
  2823   000CF0  0E04               	movlw	4
  2824   000CF2  645B               	cpfsgt	Interrups@conta^0,c
  2825   000CF4  EF7E  F006         	goto	i2u86_41
  2826   000CF8  EF81  F006         	goto	i2u86_40
  2827   000CFC                     i2u86_41:
  2828   000CFC  FFFF               	dw	65535	; assembler added errata NOP
  2829   000CFE  EF5C  F006         	goto	i2l2595
  2830   000D02                     i2u86_40:
  2831   000D02  FFFF               	dw	65535	; assembler added errata NOP
  2832   000D04                     
  2833                           ; BSR set to: 0
  2834                           ;MagnetDigi24.c: 380:         CleanHolding();
  2835   000D04  EC22  F00B         	call	_CleanHolding	;wreg free
  2836   000D08                     
  2837                           ;MagnetDigi24.c: 382:         PORTB = 0x24;
  2838   000D08  0E24               	movlw	36
  2839   000D0A  6E81               	movwf	129,c	;volatile
  2840   000D0C                     
  2841                           ;MagnetDigi24.c: 383:         _delay((unsigned long)((7)*(39321600UL/4000.0)));
  2842   000D0C  0E44               	movlw	68
  2843   000D0E  6E52               	movwf	??_Interrups^0,c
  2844   000D10  0E10               	movlw	16
  2845   000D12                     i2u109_47:
  2846   000D12  FFFF               	dw	65535	; errata NOP
  2847   000D14  2EE8               	decfsz	wreg,f,c
  2848   000D16  D7FD               	bra	i2u109_47
  2849   000D18  2E52               	decfsz	??_Interrups^0,f,c
  2850   000D1A  D7FB               	bra	i2u109_47
  2851   000D1C  D000               	nop2	
  2852   000D1E                     
  2853                           ;MagnetDigi24.c: 384:         SumData_AUX2 = 0;
  2854   000D1E  0E00               	movlw	0
  2855   000D20  6E19               	movwf	_SumData_AUX2^0,c
  2856   000D22  0E00               	movlw	0
  2857   000D24  6E1A               	movwf	(_SumData_AUX2+1)^0,c
  2858   000D26  0E00               	movlw	0
  2859   000D28  6E1B               	movwf	(_SumData_AUX2+2)^0,c
  2860   000D2A  0E00               	movlw	0
  2861   000D2C  6E1C               	movwf	(_SumData_AUX2+3)^0,c
  2862   000D2E                     
  2863                           ;MagnetDigi24.c: 385:         ReadAD24(0,0x00);
  2864   000D2E  0E00               	movlw	0
  2865   000D30  6E42               	movwf	ReadAD24@cmd_convert^0,c
  2866   000D32  0E00               	movlw	0
  2867   000D34  ECB1  F008         	call	_ReadAD24
  2868   000D38                     
  2869                           ;MagnetDigi24.c: 386:         for(conta=0; conta<5; conta++){
  2870   000D38  0E00               	movlw	0
  2871   000D3A  6E5B               	movwf	Interrups@conta^0,c
  2872   000D3C                     i2l2619:
  2873   000D3C  FFFF               	dw	65535	; assembler added errata NOP
  2874                           
  2875                           ;MagnetDigi24.c: 387:             Data_AUX2 = ReadAD24(1,0x00);
  2876   000D3E  0E00               	movlw	0
  2877   000D40  6E42               	movwf	ReadAD24@cmd_convert^0,c
  2878   000D42  0E01               	movlw	1
  2879   000D44  ECB1  F008         	call	_ReadAD24
  2880   000D48  C042  F064         	movff	?_ReadAD24,_Data_AUX2
  2881   000D4C  C043  F065         	movff	?_ReadAD24+1,_Data_AUX2+1
  2882   000D50  C044  F066         	movff	?_ReadAD24+2,_Data_AUX2+2
  2883   000D54  C045  F067         	movff	?_ReadAD24+3,_Data_AUX2+3
  2884   000D58                     
  2885                           ;MagnetDigi24.c: 388:             SumData_AUX2 = SumData_AUX2 + Data_AUX2;
  2886   000D58  0100               	movlb	0	; () banked
  2887   000D5A  5164               	movf	_Data_AUX2& (0+255),w,b
  2888   000D5C  2419               	addwf	_SumData_AUX2^0,w,c
  2889   000D5E  6E19               	movwf	_SumData_AUX2^0,c
  2890   000D60  5165               	movf	(_Data_AUX2+1)& (0+255),w,b
  2891   000D62  201A               	addwfc	(_SumData_AUX2+1)^0,w,c
  2892   000D64  6E1A               	movwf	(_SumData_AUX2+1)^0,c
  2893   000D66  5166               	movf	(_Data_AUX2+2)& (0+255),w,b
  2894   000D68  201B               	addwfc	(_SumData_AUX2+2)^0,w,c
  2895   000D6A  6E1B               	movwf	(_SumData_AUX2+2)^0,c
  2896   000D6C  5167               	movf	(_Data_AUX2+3)& (0+255),w,b
  2897   000D6E  201C               	addwfc	(_SumData_AUX2+3)^0,w,c
  2898   000D70  6E1C               	movwf	(_SumData_AUX2+3)^0,c
  2899   000D72                     
  2900                           ; BSR set to: 0
  2901                           ;MagnetDigi24.c: 389:         }
  2902   000D72  2A5B               	incf	Interrups@conta^0,f,c
  2903   000D74                     
  2904                           ; BSR set to: 0
  2905   000D74  0E04               	movlw	4
  2906   000D76  645B               	cpfsgt	Interrups@conta^0,c
  2907   000D78  EFC0  F006         	goto	i2u87_41
  2908   000D7C  EFC3  F006         	goto	i2u87_40
  2909   000D80                     i2u87_41:
  2910   000D80  FFFF               	dw	65535	; assembler added errata NOP
  2911   000D82  EF9E  F006         	goto	i2l2619
  2912   000D86                     i2u87_40:
  2913   000D86  FFFF               	dw	65535	; assembler added errata NOP
  2914   000D88                     
  2915                           ; BSR set to: 0
  2916                           ;MagnetDigi24.c: 392:         Data_X = SumData_X/5;
  2917   000D88  C035  F040         	movff	_SumData_X,___lldiv@dividend
  2918   000D8C  C036  F041         	movff	_SumData_X+1,___lldiv@dividend+1
  2919   000D90  C037  F042         	movff	_SumData_X+2,___lldiv@dividend+2
  2920   000D94  C038  F043         	movff	_SumData_X+3,___lldiv@dividend+3
  2921   000D98  0E05               	movlw	5
  2922   000D9A  6E44               	movwf	___lldiv@divisor^0,c
  2923   000D9C  0E00               	movlw	0
  2924   000D9E  6E45               	movwf	(___lldiv@divisor+1)^0,c
  2925   000DA0  0E00               	movlw	0
  2926   000DA2  6E46               	movwf	(___lldiv@divisor+2)^0,c
  2927   000DA4  0E00               	movlw	0
  2928   000DA6  6E47               	movwf	(___lldiv@divisor+3)^0,c
  2929   000DA8  EC1B  F009         	call	___lldiv	;wreg free
  2930   000DAC  C040  F015         	movff	?___lldiv,_Data_X
  2931   000DB0  C041  F016         	movff	?___lldiv+1,_Data_X+1
  2932   000DB4  C042  F017         	movff	?___lldiv+2,_Data_X+2
  2933   000DB8  C043  F018         	movff	?___lldiv+3,_Data_X+3
  2934                           
  2935                           ;MagnetDigi24.c: 393:         Data_Y = SumData_Y/5;
  2936   000DBC  C031  F040         	movff	_SumData_Y,___lldiv@dividend
  2937   000DC0  C032  F041         	movff	_SumData_Y+1,___lldiv@dividend+1
  2938   000DC4  C033  F042         	movff	_SumData_Y+2,___lldiv@dividend+2
  2939   000DC8  C034  F043         	movff	_SumData_Y+3,___lldiv@dividend+3
  2940   000DCC  0E05               	movlw	5
  2941   000DCE  6E44               	movwf	___lldiv@divisor^0,c
  2942   000DD0  0E00               	movlw	0
  2943   000DD2  6E45               	movwf	(___lldiv@divisor+1)^0,c
  2944   000DD4  0E00               	movlw	0
  2945   000DD6  6E46               	movwf	(___lldiv@divisor+2)^0,c
  2946   000DD8  0E00               	movlw	0
  2947   000DDA  6E47               	movwf	(___lldiv@divisor+3)^0,c
  2948   000DDC  EC1B  F009         	call	___lldiv	;wreg free
  2949   000DE0  C040  F011         	movff	?___lldiv,_Data_Y
  2950   000DE4  C041  F012         	movff	?___lldiv+1,_Data_Y+1
  2951   000DE8  C042  F013         	movff	?___lldiv+2,_Data_Y+2
  2952   000DEC  C043  F014         	movff	?___lldiv+3,_Data_Y+3
  2953                           
  2954                           ;MagnetDigi24.c: 394:         Data_Z = SumData_Z/5;
  2955   000DF0  C02D  F040         	movff	_SumData_Z,___lldiv@dividend
  2956   000DF4  C02E  F041         	movff	_SumData_Z+1,___lldiv@dividend+1
  2957   000DF8  C02F  F042         	movff	_SumData_Z+2,___lldiv@dividend+2
  2958   000DFC  C030  F043         	movff	_SumData_Z+3,___lldiv@dividend+3
  2959   000E00  0E05               	movlw	5
  2960   000E02  6E44               	movwf	___lldiv@divisor^0,c
  2961   000E04  0E00               	movlw	0
  2962   000E06  6E45               	movwf	(___lldiv@divisor+1)^0,c
  2963   000E08  0E00               	movlw	0
  2964   000E0A  6E46               	movwf	(___lldiv@divisor+2)^0,c
  2965   000E0C  0E00               	movlw	0
  2966   000E0E  6E47               	movwf	(___lldiv@divisor+3)^0,c
  2967   000E10  EC1B  F009         	call	___lldiv	;wreg free
  2968   000E14  C040  F00D         	movff	?___lldiv,_Data_Z
  2969   000E18  C041  F00E         	movff	?___lldiv+1,_Data_Z+1
  2970   000E1C  C042  F00F         	movff	?___lldiv+2,_Data_Z+2
  2971   000E20  C043  F010         	movff	?___lldiv+3,_Data_Z+3
  2972                           
  2973                           ;MagnetDigi24.c: 395:         Data_TC = SumData_TC/5;
  2974   000E24  C029  F040         	movff	_SumData_TC,___lldiv@dividend
  2975   000E28  C02A  F041         	movff	_SumData_TC+1,___lldiv@dividend+1
  2976   000E2C  C02B  F042         	movff	_SumData_TC+2,___lldiv@dividend+2
  2977   000E30  C02C  F043         	movff	_SumData_TC+3,___lldiv@dividend+3
  2978   000E34  0E05               	movlw	5
  2979   000E36  6E44               	movwf	___lldiv@divisor^0,c
  2980   000E38  0E00               	movlw	0
  2981   000E3A  6E45               	movwf	(___lldiv@divisor+1)^0,c
  2982   000E3C  0E00               	movlw	0
  2983   000E3E  6E46               	movwf	(___lldiv@divisor+2)^0,c
  2984   000E40  0E00               	movlw	0
  2985   000E42  6E47               	movwf	(___lldiv@divisor+3)^0,c
  2986   000E44  EC1B  F009         	call	___lldiv	;wreg free
  2987   000E48  C040  F009         	movff	?___lldiv,_Data_TC
  2988   000E4C  C041  F00A         	movff	?___lldiv+1,_Data_TC+1
  2989   000E50  C042  F00B         	movff	?___lldiv+2,_Data_TC+2
  2990   000E54  C043  F00C         	movff	?___lldiv+3,_Data_TC+3
  2991                           
  2992                           ;MagnetDigi24.c: 396:         Data_TS = SumData_TS/5;
  2993   000E58  C025  F040         	movff	_SumData_TS,___lldiv@dividend
  2994   000E5C  C026  F041         	movff	_SumData_TS+1,___lldiv@dividend+1
  2995   000E60  C027  F042         	movff	_SumData_TS+2,___lldiv@dividend+2
  2996   000E64  C028  F043         	movff	_SumData_TS+3,___lldiv@dividend+3
  2997   000E68  0E05               	movlw	5
  2998   000E6A  6E44               	movwf	___lldiv@divisor^0,c
  2999   000E6C  0E00               	movlw	0
  3000   000E6E  6E45               	movwf	(___lldiv@divisor+1)^0,c
  3001   000E70  0E00               	movlw	0
  3002   000E72  6E46               	movwf	(___lldiv@divisor+2)^0,c
  3003   000E74  0E00               	movlw	0
  3004   000E76  6E47               	movwf	(___lldiv@divisor+3)^0,c
  3005   000E78  EC1B  F009         	call	___lldiv	;wreg free
  3006   000E7C  C040  F005         	movff	?___lldiv,_Data_TS
  3007   000E80  C041  F006         	movff	?___lldiv+1,_Data_TS+1
  3008   000E84  C042  F007         	movff	?___lldiv+2,_Data_TS+2
  3009   000E88  C043  F008         	movff	?___lldiv+3,_Data_TS+3
  3010                           
  3011                           ;MagnetDigi24.c: 397:         Data_AUX0 = SumData_AUX0/5;
  3012   000E8C  C021  F040         	movff	_SumData_AUX0,___lldiv@dividend
  3013   000E90  C022  F041         	movff	_SumData_AUX0+1,___lldiv@dividend+1
  3014   000E94  C023  F042         	movff	_SumData_AUX0+2,___lldiv@dividend+2
  3015   000E98  C024  F043         	movff	_SumData_AUX0+3,___lldiv@dividend+3
  3016   000E9C  0E05               	movlw	5
  3017   000E9E  6E44               	movwf	___lldiv@divisor^0,c
  3018   000EA0  0E00               	movlw	0
  3019   000EA2  6E45               	movwf	(___lldiv@divisor+1)^0,c
  3020   000EA4  0E00               	movlw	0
  3021   000EA6  6E46               	movwf	(___lldiv@divisor+2)^0,c
  3022   000EA8  0E00               	movlw	0
  3023   000EAA  6E47               	movwf	(___lldiv@divisor+3)^0,c
  3024   000EAC  EC1B  F009         	call	___lldiv	;wreg free
  3025   000EB0  C040  F001         	movff	?___lldiv,_Data_AUX0
  3026   000EB4  C041  F002         	movff	?___lldiv+1,_Data_AUX0+1
  3027   000EB8  C042  F003         	movff	?___lldiv+2,_Data_AUX0+2
  3028   000EBC  C043  F004         	movff	?___lldiv+3,_Data_AUX0+3
  3029                           
  3030                           ;MagnetDigi24.c: 398:         Data_AUX1 = SumData_AUX1/5;
  3031   000EC0  C01D  F040         	movff	_SumData_AUX1,___lldiv@dividend
  3032   000EC4  C01E  F041         	movff	_SumData_AUX1+1,___lldiv@dividend+1
  3033   000EC8  C01F  F042         	movff	_SumData_AUX1+2,___lldiv@dividend+2
  3034   000ECC  C020  F043         	movff	_SumData_AUX1+3,___lldiv@dividend+3
  3035   000ED0  0E05               	movlw	5
  3036   000ED2  6E44               	movwf	___lldiv@divisor^0,c
  3037   000ED4  0E00               	movlw	0
  3038   000ED6  6E45               	movwf	(___lldiv@divisor+1)^0,c
  3039   000ED8  0E00               	movlw	0
  3040   000EDA  6E46               	movwf	(___lldiv@divisor+2)^0,c
  3041   000EDC  0E00               	movlw	0
  3042   000EDE  6E47               	movwf	(___lldiv@divisor+3)^0,c
  3043   000EE0  EC1B  F009         	call	___lldiv	;wreg free
  3044   000EE4  C040  F068         	movff	?___lldiv,_Data_AUX1
  3045   000EE8  C041  F069         	movff	?___lldiv+1,_Data_AUX1+1
  3046   000EEC  C042  F06A         	movff	?___lldiv+2,_Data_AUX1+2
  3047   000EF0  C043  F06B         	movff	?___lldiv+3,_Data_AUX1+3
  3048                           
  3049                           ;MagnetDigi24.c: 399:         Data_AUX2 = SumData_AUX2/5;
  3050   000EF4  C019  F040         	movff	_SumData_AUX2,___lldiv@dividend
  3051   000EF8  C01A  F041         	movff	_SumData_AUX2+1,___lldiv@dividend+1
  3052   000EFC  C01B  F042         	movff	_SumData_AUX2+2,___lldiv@dividend+2
  3053   000F00  C01C  F043         	movff	_SumData_AUX2+3,___lldiv@dividend+3
  3054   000F04  0E05               	movlw	5
  3055   000F06  6E44               	movwf	___lldiv@divisor^0,c
  3056   000F08  0E00               	movlw	0
  3057   000F0A  6E45               	movwf	(___lldiv@divisor+1)^0,c
  3058   000F0C  0E00               	movlw	0
  3059   000F0E  6E46               	movwf	(___lldiv@divisor+2)^0,c
  3060   000F10  0E00               	movlw	0
  3061   000F12  6E47               	movwf	(___lldiv@divisor+3)^0,c
  3062   000F14  EC1B  F009         	call	___lldiv	;wreg free
  3063   000F18  C040  F064         	movff	?___lldiv,_Data_AUX2
  3064   000F1C  C041  F065         	movff	?___lldiv+1,_Data_AUX2+1
  3065   000F20  C042  F066         	movff	?___lldiv+2,_Data_AUX2+2
  3066   000F24  C043  F067         	movff	?___lldiv+3,_Data_AUX2+3
  3067   000F28                     
  3068                           ;MagnetDigi24.c: 402:         print_string("JROADQ");
  3069   000F28  0E7D               	movlw	low STR_2
  3070   000F2A  6E41               	movwf	print_string@str^0,c
  3071   000F2C  0E10               	movlw	high STR_2
  3072   000F2E  6E42               	movwf	(print_string@str+1)^0,c
  3073   000F30  EC78  F00A         	call	_print_string	;wreg free
  3074   000F34                     
  3075                           ;MagnetDigi24.c: 403:         WriteByte_USART(ContaSample);
  3076   000F34  503D               	movf	_ContaSample^0,w,c
  3077   000F36  EC11  F00B         	call	_WriteByte_USART
  3078   000F3A                     
  3079                           ;MagnetDigi24.c: 404:         print_value(Data_X);
  3080   000F3A  C015  F041         	movff	_Data_X,print_value@value
  3081   000F3E  C016  F042         	movff	_Data_X+1,print_value@value+1
  3082   000F42  C017  F043         	movff	_Data_X+2,print_value@value+2
  3083   000F46  C018  F044         	movff	_Data_X+3,print_value@value+3
  3084   000F4A  ECED  F00A         	call	_print_value	;wreg free
  3085   000F4E                     
  3086                           ;MagnetDigi24.c: 405:         print_value(Data_Y);
  3087   000F4E  C011  F041         	movff	_Data_Y,print_value@value
  3088   000F52  C012  F042         	movff	_Data_Y+1,print_value@value+1
  3089   000F56  C013  F043         	movff	_Data_Y+2,print_value@value+2
  3090   000F5A  C014  F044         	movff	_Data_Y+3,print_value@value+3
  3091   000F5E  ECED  F00A         	call	_print_value	;wreg free
  3092   000F62                     
  3093                           ;MagnetDigi24.c: 406:         print_value(Data_Z);
  3094   000F62  C00D  F041         	movff	_Data_Z,print_value@value
  3095   000F66  C00E  F042         	movff	_Data_Z+1,print_value@value+1
  3096   000F6A  C00F  F043         	movff	_Data_Z+2,print_value@value+2
  3097   000F6E  C010  F044         	movff	_Data_Z+3,print_value@value+3
  3098   000F72  ECED  F00A         	call	_print_value	;wreg free
  3099   000F76                     
  3100                           ;MagnetDigi24.c: 407:         print_value(Data_TC);
  3101   000F76  C009  F041         	movff	_Data_TC,print_value@value
  3102   000F7A  C00A  F042         	movff	_Data_TC+1,print_value@value+1
  3103   000F7E  C00B  F043         	movff	_Data_TC+2,print_value@value+2
  3104   000F82  C00C  F044         	movff	_Data_TC+3,print_value@value+3
  3105   000F86  ECED  F00A         	call	_print_value	;wreg free
  3106   000F8A                     
  3107                           ;MagnetDigi24.c: 408:         print_value(Data_TS);
  3108   000F8A  C005  F041         	movff	_Data_TS,print_value@value
  3109   000F8E  C006  F042         	movff	_Data_TS+1,print_value@value+1
  3110   000F92  C007  F043         	movff	_Data_TS+2,print_value@value+2
  3111   000F96  C008  F044         	movff	_Data_TS+3,print_value@value+3
  3112   000F9A  ECED  F00A         	call	_print_value	;wreg free
  3113   000F9E                     
  3114                           ;MagnetDigi24.c: 409:         print_value(Data_AUX0);
  3115   000F9E  C001  F041         	movff	_Data_AUX0,print_value@value
  3116   000FA2  C002  F042         	movff	_Data_AUX0+1,print_value@value+1
  3117   000FA6  C003  F043         	movff	_Data_AUX0+2,print_value@value+2
  3118   000FAA  C004  F044         	movff	_Data_AUX0+3,print_value@value+3
  3119   000FAE  ECED  F00A         	call	_print_value	;wreg free
  3120   000FB2                     
  3121                           ;MagnetDigi24.c: 410:         print_value(Data_AUX1);
  3122   000FB2  C068  F041         	movff	_Data_AUX1,print_value@value
  3123   000FB6  C069  F042         	movff	_Data_AUX1+1,print_value@value+1
  3124   000FBA  C06A  F043         	movff	_Data_AUX1+2,print_value@value+2
  3125   000FBE  C06B  F044         	movff	_Data_AUX1+3,print_value@value+3
  3126   000FC2  ECED  F00A         	call	_print_value	;wreg free
  3127   000FC6                     
  3128                           ;MagnetDigi24.c: 411:         print_value(Data_AUX2);
  3129   000FC6  C064  F041         	movff	_Data_AUX2,print_value@value
  3130   000FCA  C065  F042         	movff	_Data_AUX2+1,print_value@value+1
  3131   000FCE  C066  F043         	movff	_Data_AUX2+2,print_value@value+2
  3132   000FD2  C067  F044         	movff	_Data_AUX2+3,print_value@value+3
  3133   000FD6  ECED  F00A         	call	_print_value	;wreg free
  3134   000FDA                     
  3135                           ;MagnetDigi24.c: 412:         print_string("\n\r");
  3136   000FDA  0E64               	movlw	low (STR_1+21)
  3137   000FDC  6E41               	movwf	print_string@str^0,c
  3138   000FDE  0E10               	movlw	high (STR_1+21)
  3139   000FE0  6E42               	movwf	(print_string@str+1)^0,c
  3140   000FE2  EC78  F00A         	call	_print_string	;wreg free
  3141   000FE6                     
  3142                           ;MagnetDigi24.c: 414:         LATAbits.LA2 = 0;
  3143   000FE6  9489               	bcf	137,2,c	;volatile
  3144   000FE8                     
  3145                           ;MagnetDigi24.c: 416:         if(ContaSample == 4){
  3146   000FE8  0E04               	movlw	4
  3147   000FEA  183D               	xorwf	_ContaSample^0,w,c
  3148   000FEC  A4D8               	btfss	status,2,c
  3149   000FEE  EFFB  F007         	goto	i2u88_41
  3150   000FF2  EFFE  F007         	goto	i2u88_40
  3151   000FF6                     i2u88_41:
  3152   000FF6  FFFF               	dw	65535	; assembler added errata NOP
  3153   000FF8  EF15  F008         	goto	i2l182
  3154   000FFC                     i2u88_40:
  3155   000FFC  FFFF               	dw	65535	; assembler added errata NOP
  3156   000FFE                     
  3157                           ;MagnetDigi24.c: 417:             INTCONbits.TMR0IE = 0;
  3158   000FFE  9AF2               	bcf	242,5,c	;volatile
  3159                           
  3160                           ;MagnetDigi24.c: 418:             LATBbits.LB7 = 0;
  3161   001000  9E8A               	bcf	138,7,c	;volatile
  3162   001002                     
  3163                           ;MagnetDigi24.c: 419:             if(ControlSample == 1){
  3164   001002  043E               	decf	_ControlSample^0,w,c
  3165   001004  A4D8               	btfss	status,2,c
  3166   001006  EF07  F008         	goto	i2u89_41
  3167   00100A  EF0A  F008         	goto	i2u89_40
  3168   00100E                     i2u89_41:
  3169   00100E  FFFF               	dw	65535	; assembler added errata NOP
  3170   001010  EF0F  F008         	goto	i2l2661
  3171   001014                     i2u89_40:
  3172   001014  FFFF               	dw	65535	; assembler added errata NOP
  3173   001016                     
  3174                           ;MagnetDigi24.c: 420:                 INTCONbits.INT0IF = 0;
  3175   001016  92F2               	bcf	242,1,c	;volatile
  3176                           
  3177                           ;MagnetDigi24.c: 421:                 INTCONbits.INT0IE = 1;
  3178   001018  88F2               	bsf	242,4,c	;volatile
  3179                           
  3180                           ;MagnetDigi24.c: 422:             }else{
  3181   00101A  EF15  F008         	goto	i2l182
  3182   00101E                     i2l2661:
  3183   00101E  FFFF               	dw	65535	; assembler added errata NOP
  3184                           
  3185                           ;MagnetDigi24.c: 423:                 ReadAD24(0,0xFF);
  3186   001020  0EFF               	movlw	255
  3187   001022  6E42               	movwf	ReadAD24@cmd_convert^0,c
  3188   001024  0E00               	movlw	0
  3189   001026  ECB1  F008         	call	_ReadAD24
  3190   00102A                     i2l182:
  3191   00102A  FFFF               	dw	65535	; assembler added errata NOP
  3192   00102C  C059  FFF5         	movff	??_Interrups+7,tablat
  3193   001030  C058  FFF8         	movff	??_Interrups+6,tblptru
  3194   001034  C057  FFF7         	movff	??_Interrups+5,tblptrh
  3195   001038  C056  FFF6         	movff	??_Interrups+4,tblptrl
  3196   00103C  C055  FFDA         	movff	??_Interrups+3,fsr2h
  3197   001040  C054  FFD9         	movff	??_Interrups+2,fsr2l
  3198   001044  925C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  3199   001046  0011               	retfie		f
  3200   001048  FFFF               	dw	65535	; errata NOP
  3201   00104A                     __end_of_Interrups:
  3202                           	callstack 0
  3203                           
  3204 ;; *************** function _print_value *****************
  3205 ;; Defined at:
  3206 ;;		line 139 in file "Lib258_serial.c"
  3207 ;; Parameters:    Size  Location     Type
  3208 ;;  value           4    1[COMRAM] unsigned long 
  3209 ;; Auto vars:     Size  Location     Type
  3210 ;;  Bytes           3    5[COMRAM] unsigned char [3]
  3211 ;; Return value:  Size  Location     Type
  3212 ;;                  1    wreg      void 
  3213 ;; Registers used:
  3214 ;;		wreg, status,2, cstack
  3215 ;; Tracked objects:
  3216 ;;		On entry : 0/0
  3217 ;;		On exit  : 0/0
  3218 ;;		Unchanged: 0/0
  3219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3220 ;;      Params:         4       0       0       0       0       0       0
  3221 ;;      Locals:         3       0       0       0       0       0       0
  3222 ;;      Temps:          0       0       0       0       0       0       0
  3223 ;;      Totals:         7       0       0       0       0       0       0
  3224 ;;Total ram usage:        7 bytes
  3225 ;; Hardware stack levels used: 1
  3226 ;; Hardware stack levels required when called: 1
  3227 ;; This function calls:
  3228 ;;		_WriteByte_USART
  3229 ;; This function is called by:
  3230 ;;		_Interrups
  3231 ;; This function uses a non-reentrant model
  3232 ;;
  3233                           
  3234                           	psect	text8
  3235   0015DA                     __ptext8:
  3236                           	callstack 0
  3237   0015DA                     _print_value:
  3238                           	callstack 0
  3239   0015DA  FFFF               	dw	65535	; assembler added errata NOP
  3240   0015DC                     
  3241                           ;Lib258_serial.c: 141:     char Bytes[3];;Lib258_serial.c: 144:     Bytes[2] =(char)(val
      +                          ue>>16);
  3242   0015DC  C043  F047         	movff	print_value@value+2,print_value@Bytes+2
  3243                           
  3244                           ;Lib258_serial.c: 146:     Bytes[1] = (char)(value>>8);
  3245   0015E0  C042  F046         	movff	print_value@value+1,print_value@Bytes+1
  3246                           
  3247                           ;Lib258_serial.c: 148:     Bytes[0] = (char)value;
  3248   0015E4  C041  F045         	movff	print_value@value,print_value@Bytes
  3249   0015E8                     
  3250                           ;Lib258_serial.c: 150:     WriteByte_USART(Bytes[0]);
  3251   0015E8  5045               	movf	print_value@Bytes^0,w,c
  3252   0015EA  EC11  F00B         	call	_WriteByte_USART
  3253                           
  3254                           ;Lib258_serial.c: 151:     WriteByte_USART(Bytes[1]);
  3255   0015EE  5046               	movf	(print_value@Bytes+1)^0,w,c
  3256   0015F0  EC11  F00B         	call	_WriteByte_USART
  3257                           
  3258                           ;Lib258_serial.c: 152:     WriteByte_USART(Bytes[2]);
  3259   0015F4  5047               	movf	(print_value@Bytes+2)^0,w,c
  3260   0015F6  EC11  F00B         	call	_WriteByte_USART
  3261   0015FA  0012               	return		;funcret
  3262   0015FC  FFFF               	dw	65535	; errata NOP
  3263   0015FE                     __end_of_print_value:
  3264                           	callstack 0
  3265                           
  3266 ;; *************** function ___lldiv *****************
  3267 ;; Defined at:
  3268 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\__lldiv.c"
  3269 ;; Parameters:    Size  Location     Type
  3270 ;;  dividend        4    0[COMRAM] unsigned long 
  3271 ;;  divisor         4    4[COMRAM] unsigned long 
  3272 ;; Auto vars:     Size  Location     Type
  3273 ;;  quotient        4    8[COMRAM] unsigned long 
  3274 ;;  counter         1   12[COMRAM] unsigned char 
  3275 ;; Return value:  Size  Location     Type
  3276 ;;                  4    0[COMRAM] unsigned long 
  3277 ;; Registers used:
  3278 ;;		wreg, status,2, status,0
  3279 ;; Tracked objects:
  3280 ;;		On entry : 0/0
  3281 ;;		On exit  : 0/0
  3282 ;;		Unchanged: 0/0
  3283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3284 ;;      Params:         8       0       0       0       0       0       0
  3285 ;;      Locals:         5       0       0       0       0       0       0
  3286 ;;      Temps:          0       0       0       0       0       0       0
  3287 ;;      Totals:        13       0       0       0       0       0       0
  3288 ;;Total ram usage:       13 bytes
  3289 ;; Hardware stack levels used: 1
  3290 ;; This function calls:
  3291 ;;		Nothing
  3292 ;; This function is called by:
  3293 ;;		_Interrups
  3294 ;; This function uses a non-reentrant model
  3295 ;;
  3296                           
  3297                           	psect	text9
  3298   001236                     __ptext9:
  3299                           	callstack 0
  3300   001236                     ___lldiv:
  3301                           	callstack 0
  3302   001236  FFFF               	dw	65535	; assembler added errata NOP
  3303   001238  0E00               	movlw	0
  3304   00123A  6E48               	movwf	___lldiv@quotient^0,c
  3305   00123C  0E00               	movlw	0
  3306   00123E  6E49               	movwf	(___lldiv@quotient+1)^0,c
  3307   001240  0E00               	movlw	0
  3308   001242  6E4A               	movwf	(___lldiv@quotient+2)^0,c
  3309   001244  0E00               	movlw	0
  3310   001246  6E4B               	movwf	(___lldiv@quotient+3)^0,c
  3311   001248  5044               	movf	___lldiv@divisor^0,w,c
  3312   00124A  1045               	iorwf	(___lldiv@divisor+1)^0,w,c
  3313   00124C  1046               	iorwf	(___lldiv@divisor+2)^0,w,c
  3314   00124E  1047               	iorwf	(___lldiv@divisor+3)^0,w,c
  3315   001250  B4D8               	btfsc	status,2,c
  3316   001252  EF2D  F009         	goto	i2u64_41
  3317   001256  EF30  F009         	goto	i2u64_40
  3318   00125A                     i2u64_41:
  3319   00125A  FFFF               	dw	65535	; assembler added errata NOP
  3320   00125C  EF6F  F009         	goto	i2l373
  3321   001260                     i2u64_40:
  3322   001260  FFFF               	dw	65535	; assembler added errata NOP
  3323   001262  0E01               	movlw	1
  3324   001264  6E4C               	movwf	___lldiv@counter^0,c
  3325   001266  EF3C  F009         	goto	i2l2079
  3326   00126A                     i2l2077:
  3327   00126A  FFFF               	dw	65535	; assembler added errata NOP
  3328   00126C  90D8               	bcf	status,0,c
  3329   00126E  3644               	rlcf	___lldiv@divisor^0,f,c
  3330   001270  3645               	rlcf	(___lldiv@divisor+1)^0,f,c
  3331   001272  3646               	rlcf	(___lldiv@divisor+2)^0,f,c
  3332   001274  3647               	rlcf	(___lldiv@divisor+3)^0,f,c
  3333   001276  2A4C               	incf	___lldiv@counter^0,f,c
  3334   001278                     i2l2079:
  3335   001278  FFFF               	dw	65535	; assembler added errata NOP
  3336   00127A  AE47               	btfss	(___lldiv@divisor+3)^0,7,c
  3337   00127C  EF42  F009         	goto	i2u65_41
  3338   001280  EF45  F009         	goto	i2u65_40
  3339   001284                     i2u65_41:
  3340   001284  FFFF               	dw	65535	; assembler added errata NOP
  3341   001286  EF35  F009         	goto	i2l2077
  3342   00128A                     i2u65_40:
  3343   00128A  FFFF               	dw	65535	; assembler added errata NOP
  3344   00128C                     i2l2081:
  3345   00128C  FFFF               	dw	65535	; assembler added errata NOP
  3346   00128E  90D8               	bcf	status,0,c
  3347   001290  3648               	rlcf	___lldiv@quotient^0,f,c
  3348   001292  3649               	rlcf	(___lldiv@quotient+1)^0,f,c
  3349   001294  364A               	rlcf	(___lldiv@quotient+2)^0,f,c
  3350   001296  364B               	rlcf	(___lldiv@quotient+3)^0,f,c
  3351   001298  5044               	movf	___lldiv@divisor^0,w,c
  3352   00129A  5C40               	subwf	___lldiv@dividend^0,w,c
  3353   00129C  5045               	movf	(___lldiv@divisor+1)^0,w,c
  3354   00129E  5841               	subwfb	(___lldiv@dividend+1)^0,w,c
  3355   0012A0  5046               	movf	(___lldiv@divisor+2)^0,w,c
  3356   0012A2  5842               	subwfb	(___lldiv@dividend+2)^0,w,c
  3357   0012A4  5047               	movf	(___lldiv@divisor+3)^0,w,c
  3358   0012A6  5843               	subwfb	(___lldiv@dividend+3)^0,w,c
  3359   0012A8  A0D8               	btfss	status,0,c
  3360   0012AA  EF59  F009         	goto	i2u66_41
  3361   0012AE  EF5C  F009         	goto	i2u66_40
  3362   0012B2                     i2u66_41:
  3363   0012B2  FFFF               	dw	65535	; assembler added errata NOP
  3364   0012B4  EF66  F009         	goto	i2l2089
  3365   0012B8                     i2u66_40:
  3366   0012B8  FFFF               	dw	65535	; assembler added errata NOP
  3367   0012BA  5044               	movf	___lldiv@divisor^0,w,c
  3368   0012BC  5E40               	subwf	___lldiv@dividend^0,f,c
  3369   0012BE  5045               	movf	(___lldiv@divisor+1)^0,w,c
  3370   0012C0  5A41               	subwfb	(___lldiv@dividend+1)^0,f,c
  3371   0012C2  5046               	movf	(___lldiv@divisor+2)^0,w,c
  3372   0012C4  5A42               	subwfb	(___lldiv@dividend+2)^0,f,c
  3373   0012C6  5047               	movf	(___lldiv@divisor+3)^0,w,c
  3374   0012C8  5A43               	subwfb	(___lldiv@dividend+3)^0,f,c
  3375   0012CA  8048               	bsf	___lldiv@quotient^0,0,c
  3376   0012CC                     i2l2089:
  3377   0012CC  FFFF               	dw	65535	; assembler added errata NOP
  3378   0012CE  90D8               	bcf	status,0,c
  3379   0012D0  3247               	rrcf	(___lldiv@divisor+3)^0,f,c
  3380   0012D2  3246               	rrcf	(___lldiv@divisor+2)^0,f,c
  3381   0012D4  3245               	rrcf	(___lldiv@divisor+1)^0,f,c
  3382   0012D6  3244               	rrcf	___lldiv@divisor^0,f,c
  3383   0012D8  2E4C               	decfsz	___lldiv@counter^0,f,c
  3384   0012DA  EF46  F009         	goto	i2l2081
  3385   0012DE                     i2l373:
  3386   0012DE  FFFF               	dw	65535	; assembler added errata NOP
  3387   0012E0  C048  F040         	movff	___lldiv@quotient,?___lldiv
  3388   0012E4  C049  F041         	movff	___lldiv@quotient+1,?___lldiv+1
  3389   0012E8  C04A  F042         	movff	___lldiv@quotient+2,?___lldiv+2
  3390   0012EC  C04B  F043         	movff	___lldiv@quotient+3,?___lldiv+3
  3391   0012F0  0012               	return		;funcret
  3392   0012F2  FFFF               	dw	65535	; errata NOP
  3393   0012F4                     __end_of___lldiv:
  3394                           	callstack 0
  3395                           
  3396 ;; *************** function _TransmitDAT_USART *****************
  3397 ;; Defined at:
  3398 ;;		line 126 in file "Lib258_serial.c"
  3399 ;; Parameters:    Size  Location     Type
  3400 ;;  DAT_ID          1    wreg     unsigned char 
  3401 ;; Auto vars:     Size  Location     Type
  3402 ;;  DAT_ID          1    3[COMRAM] unsigned char 
  3403 ;;  conta           1    4[COMRAM] unsigned char 
  3404 ;; Return value:  Size  Location     Type
  3405 ;;                  1    wreg      void 
  3406 ;; Registers used:
  3407 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3408 ;; Tracked objects:
  3409 ;;		On entry : 0/0
  3410 ;;		On exit  : 0/0
  3411 ;;		Unchanged: 0/0
  3412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3413 ;;      Params:         0       0       0       0       0       0       0
  3414 ;;      Locals:         2       0       0       0       0       0       0
  3415 ;;      Temps:          0       0       0       0       0       0       0
  3416 ;;      Totals:         2       0       0       0       0       0       0
  3417 ;;Total ram usage:        2 bytes
  3418 ;; Hardware stack levels used: 1
  3419 ;; Hardware stack levels required when called: 2
  3420 ;; This function calls:
  3421 ;;		_WriteByte_USART
  3422 ;;		_print_string
  3423 ;; This function is called by:
  3424 ;;		_Interrups
  3425 ;; This function uses a non-reentrant model
  3426 ;;
  3427                           
  3428                           	psect	text10
  3429   001456                     __ptext10:
  3430                           	callstack 0
  3431   001456                     _TransmitDAT_USART:
  3432                           	callstack 0
  3433   001456  FFFF               	dw	65535	; assembler added errata NOP
  3434                           
  3435                           ;incstack = 0
  3436                           ;TransmitDAT_USART@DAT_ID stored from wreg
  3437   001458  6E43               	movwf	TransmitDAT_USART@DAT_ID^0,c
  3438   00145A                     
  3439                           ;Lib258_serial.c: 127:     unsigned char conta;;Lib258_serial.c: 129:     print_string("
      +                          NNNNJRODAT");
  3440   00145A  0E72               	movlw	low STR_8
  3441   00145C  6E41               	movwf	print_string@str^0,c
  3442   00145E  0E10               	movlw	high STR_8
  3443   001460  6E42               	movwf	(print_string@str+1)^0,c
  3444   001462  EC78  F00A         	call	_print_string	;wreg free
  3445   001466                     
  3446                           ;Lib258_serial.c: 130:     WriteByte_USART(DAT_ID);
  3447   001466  5043               	movf	TransmitDAT_USART@DAT_ID^0,w,c
  3448   001468  EC11  F00B         	call	_WriteByte_USART
  3449   00146C                     
  3450                           ;Lib258_serial.c: 131:     for(conta=0; conta<12; conta++){
  3451   00146C  0E00               	movlw	0
  3452   00146E  6E44               	movwf	TransmitDAT_USART@conta^0,c
  3453   001470                     i2l1995:
  3454   001470  FFFF               	dw	65535	; assembler added errata NOP
  3455                           
  3456                           ;Lib258_serial.c: 132:         WriteByte_USART(BufferDAT[conta]);
  3457   001472  0E74               	movlw	low _BufferDAT
  3458   001474  2444               	addwf	TransmitDAT_USART@conta^0,w,c
  3459   001476  6ED9               	movwf	fsr2l,c
  3460   001478  6ADA               	clrf	fsr2h,c
  3461   00147A  0E00               	movlw	high _BufferDAT
  3462   00147C  22DA               	addwfc	fsr2h,f,c
  3463   00147E  50DF               	movf	indf2,w,c
  3464   001480  EC11  F00B         	call	_WriteByte_USART
  3465   001484                     
  3466                           ;Lib258_serial.c: 133:     }
  3467   001484  2A44               	incf	TransmitDAT_USART@conta^0,f,c
  3468   001486  0E0B               	movlw	11
  3469   001488  6444               	cpfsgt	TransmitDAT_USART@conta^0,c
  3470   00148A  EF49  F00A         	goto	i2u62_41
  3471   00148E  EF4C  F00A         	goto	i2u62_40
  3472   001492                     i2u62_41:
  3473   001492  FFFF               	dw	65535	; assembler added errata NOP
  3474   001494  EF38  F00A         	goto	i2l1995
  3475   001498                     i2u62_40:
  3476   001498  FFFF               	dw	65535	; assembler added errata NOP
  3477   00149A                     
  3478                           ;Lib258_serial.c: 134:     print_string("\n\r");
  3479   00149A  0E64               	movlw	low (STR_1+21)
  3480   00149C  6E41               	movwf	print_string@str^0,c
  3481   00149E  0E10               	movlw	high (STR_1+21)
  3482   0014A0  6E42               	movwf	(print_string@str+1)^0,c
  3483   0014A2  EC78  F00A         	call	_print_string	;wreg free
  3484   0014A6  0012               	return		;funcret
  3485   0014A8  FFFF               	dw	65535	; errata NOP
  3486   0014AA                     __end_of_TransmitDAT_USART:
  3487                           	callstack 0
  3488                           
  3489 ;; *************** function _TransmitCMD_USART *****************
  3490 ;; Defined at:
  3491 ;;		line 117 in file "Lib258_serial.c"
  3492 ;; Parameters:    Size  Location     Type
  3493 ;;  CMD_ID          1    wreg     unsigned char 
  3494 ;; Auto vars:     Size  Location     Type
  3495 ;;  CMD_ID          1    3[COMRAM] unsigned char 
  3496 ;; Return value:  Size  Location     Type
  3497 ;;                  1    wreg      void 
  3498 ;; Registers used:
  3499 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3500 ;; Tracked objects:
  3501 ;;		On entry : 0/0
  3502 ;;		On exit  : 0/0
  3503 ;;		Unchanged: 0/0
  3504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3505 ;;      Params:         0       0       0       0       0       0       0
  3506 ;;      Locals:         1       0       0       0       0       0       0
  3507 ;;      Temps:          0       0       0       0       0       0       0
  3508 ;;      Totals:         1       0       0       0       0       0       0
  3509 ;;Total ram usage:        1 bytes
  3510 ;; Hardware stack levels used: 1
  3511 ;; Hardware stack levels required when called: 2
  3512 ;; This function calls:
  3513 ;;		_WriteByte_USART
  3514 ;;		_print_string
  3515 ;; This function is called by:
  3516 ;;		_Interrups
  3517 ;; This function uses a non-reentrant model
  3518 ;;
  3519                           
  3520                           	psect	text11
  3521   00158E                     __ptext11:
  3522                           	callstack 0
  3523   00158E                     _TransmitCMD_USART:
  3524                           	callstack 0
  3525   00158E  FFFF               	dw	65535	; assembler added errata NOP
  3526                           
  3527                           ;incstack = 0
  3528                           ;TransmitCMD_USART@CMD_ID stored from wreg
  3529   001590  6E43               	movwf	TransmitCMD_USART@CMD_ID^0,c
  3530   001592                     
  3531                           ;Lib258_serial.c: 119:     print_string("NNNNJROCMD");
  3532   001592  0E67               	movlw	low STR_6
  3533   001594  6E41               	movwf	print_string@str^0,c
  3534   001596  0E10               	movlw	high STR_6
  3535   001598  6E42               	movwf	(print_string@str+1)^0,c
  3536   00159A  EC78  F00A         	call	_print_string	;wreg free
  3537   00159E                     
  3538                           ;Lib258_serial.c: 120:     WriteByte_USART(CMD_ID);
  3539   00159E  5043               	movf	TransmitCMD_USART@CMD_ID^0,w,c
  3540   0015A0  EC11  F00B         	call	_WriteByte_USART
  3541   0015A4                     
  3542                           ;Lib258_serial.c: 121:     print_string("\n\r");
  3543   0015A4  0E64               	movlw	low (STR_1+21)
  3544   0015A6  6E41               	movwf	print_string@str^0,c
  3545   0015A8  0E10               	movlw	high (STR_1+21)
  3546   0015AA  6E42               	movwf	(print_string@str+1)^0,c
  3547   0015AC  EC78  F00A         	call	_print_string	;wreg free
  3548   0015B0  0012               	return		;funcret
  3549   0015B2  FFFF               	dw	65535	; errata NOP
  3550   0015B4                     __end_of_TransmitCMD_USART:
  3551                           	callstack 0
  3552                           
  3553 ;; *************** function _print_string *****************
  3554 ;; Defined at:
  3555 ;;		line 76 in file "Lib258_serial.c"
  3556 ;; Parameters:    Size  Location     Type
  3557 ;;  str             2    1[COMRAM] PTR unsigned char 
  3558 ;;		 -> STR_9(3), STR_8(11), STR_7(3), STR_6(11), 
  3559 ;;		 -> STR_5(3), STR_4(7), STR_3(3), STR_2(7), 
  3560 ;;		 -> STR_1(24), 
  3561 ;; Auto vars:     Size  Location     Type
  3562 ;;		None
  3563 ;; Return value:  Size  Location     Type
  3564 ;;                  1    wreg      void 
  3565 ;; Registers used:
  3566 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3567 ;; Tracked objects:
  3568 ;;		On entry : 0/0
  3569 ;;		On exit  : 0/0
  3570 ;;		Unchanged: 0/0
  3571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3572 ;;      Params:         2       0       0       0       0       0       0
  3573 ;;      Locals:         0       0       0       0       0       0       0
  3574 ;;      Temps:          0       0       0       0       0       0       0
  3575 ;;      Totals:         2       0       0       0       0       0       0
  3576 ;;Total ram usage:        2 bytes
  3577 ;; Hardware stack levels used: 1
  3578 ;; Hardware stack levels required when called: 1
  3579 ;; This function calls:
  3580 ;;		_WriteByte_USART
  3581 ;; This function is called by:
  3582 ;;		_Interrups
  3583 ;;		_TransmitCMD_USART
  3584 ;;		_TransmitDAT_USART
  3585 ;; This function uses a non-reentrant model
  3586 ;;
  3587                           
  3588                           	psect	text12
  3589   0014F0                     __ptext12:
  3590                           	callstack 0
  3591   0014F0                     _print_string:
  3592                           	callstack 0
  3593   0014F0  FFFF               	dw	65535	; assembler added errata NOP
  3594   0014F2                     
  3595                           ;Lib258_serial.c: 77:     while(*str != '\0'){
  3596   0014F2  EF87  F00A         	goto	i2l1911
  3597   0014F6                     i2l1907:
  3598   0014F6  FFFF               	dw	65535	; assembler added errata NOP
  3599                           
  3600                           ;Lib258_serial.c: 78:         WriteByte_USART(*str);
  3601   0014F8  C041  FFF6         	movff	print_string@str,tblptrl
  3602   0014FC  C042  FFF7         	movff	print_string@str+1,tblptrh
  3603   001500                     	if	0	;tblptru may be non-zero
  3604   001500                     	endif
  3605   001500                     	if	0	;tblptru may be non-zero
  3606   001500                     	endif
  3607   001500  0008               	tblrd		*
  3608   001502  FFFF               	dw	65535	; errata NOP
  3609   001504  50F5               	movf	tablat,w,c
  3610   001506  EC11  F00B         	call	_WriteByte_USART
  3611   00150A                     
  3612                           ;Lib258_serial.c: 79:         str++;
  3613   00150A  4A41               	infsnz	print_string@str^0,f,c
  3614   00150C  2A42               	incf	(print_string@str+1)^0,f,c
  3615   00150E                     i2l1911:
  3616   00150E  FFFF               	dw	65535	; assembler added errata NOP
  3617                           
  3618                           ;Lib258_serial.c: 77:     while(*str != '\0'){
  3619   001510  C041  FFF6         	movff	print_string@str,tblptrl
  3620   001514  C042  FFF7         	movff	print_string@str+1,tblptrh
  3621   001518                     	if	0	;tblptru may be non-zero
  3622   001518                     	endif
  3623   001518                     	if	0	;tblptru may be non-zero
  3624   001518                     	endif
  3625   001518  0008               	tblrd		*
  3626   00151A  FFFF               	dw	65535	; errata NOP
  3627   00151C  50F5               	movf	tablat,w,c
  3628   00151E  0900               	iorlw	0
  3629   001520  A4D8               	btfss	status,2,c
  3630   001522  EF95  F00A         	goto	i2u50_41
  3631   001526  EF98  F00A         	goto	i2u50_40
  3632   00152A                     i2u50_41:
  3633   00152A  FFFF               	dw	65535	; assembler added errata NOP
  3634   00152C  EF7B  F00A         	goto	i2l1907
  3635   001530                     i2u50_40:
  3636   001530  FFFF               	dw	65535	; assembler added errata NOP
  3637   001532  0012               	return		;funcret
  3638   001534  FFFF               	dw	65535	; errata NOP
  3639   001536                     __end_of_print_string:
  3640                           	callstack 0
  3641                           
  3642 ;; *************** function _WriteByte_USART *****************
  3643 ;; Defined at:
  3644 ;;		line 68 in file "Lib258_serial.c"
  3645 ;; Parameters:    Size  Location     Type
  3646 ;;  byte            1    wreg     unsigned char 
  3647 ;; Auto vars:     Size  Location     Type
  3648 ;;  byte            1    0[COMRAM] unsigned char 
  3649 ;; Return value:  Size  Location     Type
  3650 ;;                  1    wreg      void 
  3651 ;; Registers used:
  3652 ;;		wreg
  3653 ;; Tracked objects:
  3654 ;;		On entry : 0/0
  3655 ;;		On exit  : 0/0
  3656 ;;		Unchanged: 0/0
  3657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3658 ;;      Params:         0       0       0       0       0       0       0
  3659 ;;      Locals:         1       0       0       0       0       0       0
  3660 ;;      Temps:          0       0       0       0       0       0       0
  3661 ;;      Totals:         1       0       0       0       0       0       0
  3662 ;;Total ram usage:        1 bytes
  3663 ;; Hardware stack levels used: 1
  3664 ;; This function calls:
  3665 ;;		Nothing
  3666 ;; This function is called by:
  3667 ;;		_Interrups
  3668 ;;		_print_string
  3669 ;;		_TransmitCMD_USART
  3670 ;;		_TransmitDAT_USART
  3671 ;;		_print_value
  3672 ;; This function uses a non-reentrant model
  3673 ;;
  3674                           
  3675                           	psect	text13
  3676   001622                     __ptext13:
  3677                           	callstack 0
  3678   001622                     _WriteByte_USART:
  3679                           	callstack 0
  3680   001622  FFFF               	dw	65535	; assembler added errata NOP
  3681                           
  3682                           ;incstack = 0
  3683                           ;WriteByte_USART@byte stored from wreg
  3684   001624  6E40               	movwf	WriteByte_USART@byte^0,c
  3685   001626                     
  3686                           ;Lib258_serial.c: 70:     TXREG = byte;
  3687   001626  C040  FFAD         	movff	WriteByte_USART@byte,4013	;volatile
  3688   00162A                     
  3689                           ;Lib258_serial.c: 71:     __nop();
  3690   00162A  F000               	nop	
  3691   00162C                     i2l254:
  3692   00162C  FFFF               	dw	65535	; assembler added errata NOP
  3693   00162E  A2AC               	btfss	172,1,c	;volatile
  3694   001630  EF1C  F00B         	goto	i2u47_41
  3695   001634  EF1F  F00B         	goto	i2u47_40
  3696   001638                     i2u47_41:
  3697   001638  FFFF               	dw	65535	; assembler added errata NOP
  3698   00163A  EF16  F00B         	goto	i2l254
  3699   00163E                     i2u47_40:
  3700   00163E  FFFF               	dw	65535	; assembler added errata NOP
  3701   001640  0012               	return		;funcret
  3702   001642  FFFF               	dw	65535	; errata NOP
  3703   001644                     __end_of_WriteByte_USART:
  3704                           	callstack 0
  3705                           
  3706 ;; *************** function _ResetCS5532 *****************
  3707 ;; Defined at:
  3708 ;;		line 43 in file "Lib258_spi.c"
  3709 ;; Parameters:    Size  Location     Type
  3710 ;;		None
  3711 ;; Auto vars:     Size  Location     Type
  3712 ;;  conta           1    3[COMRAM] unsigned char 
  3713 ;; Return value:  Size  Location     Type
  3714 ;;                  1    wreg      unsigned char 
  3715 ;; Registers used:
  3716 ;;		wreg, status,2, status,0, cstack
  3717 ;; Tracked objects:
  3718 ;;		On entry : 0/0
  3719 ;;		On exit  : 0/0
  3720 ;;		Unchanged: 0/0
  3721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3722 ;;      Params:         0       0       0       0       0       0       0
  3723 ;;      Locals:         1       0       0       0       0       0       0
  3724 ;;      Temps:          1       0       0       0       0       0       0
  3725 ;;      Totals:         2       0       0       0       0       0       0
  3726 ;;Total ram usage:        2 bytes
  3727 ;; Hardware stack levels used: 1
  3728 ;; Hardware stack levels required when called: 2
  3729 ;; This function calls:
  3730 ;;		_ReadRegister_4bytesCS5532
  3731 ;;		_TransferByte_SPI
  3732 ;;		_WriteRegister_4bytesCS5532
  3733 ;; This function is called by:
  3734 ;;		_Interrups
  3735 ;; This function uses a non-reentrant model
  3736 ;;
  3737                           
  3738                           	psect	text14
  3739   00137E                     __ptext14:
  3740                           	callstack 0
  3741   00137E                     _ResetCS5532:
  3742                           	callstack 0
  3743   00137E  FFFF               	dw	65535	; assembler added errata NOP
  3744   001380                     
  3745                           ;Lib258_spi.c: 44:     unsigned char conta;;Lib258_spi.c: 47:     for(conta=0;conta<15;c
      +                          onta++){
  3746   001380  0E00               	movlw	0
  3747   001382  6E43               	movwf	ResetCS5532@conta^0,c
  3748   001384                     i2l2011:
  3749   001384  FFFF               	dw	65535	; assembler added errata NOP
  3750                           
  3751                           ;Lib258_spi.c: 48:         TransferByte_SPI(0xFF);
  3752   001386  0EFF               	movlw	255
  3753   001388  ECFF  F00A         	call	_TransferByte_SPI
  3754   00138C                     
  3755                           ;Lib258_spi.c: 49:     }
  3756   00138C  2A43               	incf	ResetCS5532@conta^0,f,c
  3757   00138E  0E0E               	movlw	14
  3758   001390  6443               	cpfsgt	ResetCS5532@conta^0,c
  3759   001392  EFCD  F009         	goto	i2u63_41
  3760   001396  EFD0  F009         	goto	i2u63_40
  3761   00139A                     i2u63_41:
  3762   00139A  FFFF               	dw	65535	; assembler added errata NOP
  3763   00139C  EFC2  F009         	goto	i2l2011
  3764   0013A0                     i2u63_40:
  3765   0013A0  FFFF               	dw	65535	; assembler added errata NOP
  3766   0013A2                     
  3767                           ;Lib258_spi.c: 50:     TransferByte_SPI(0xFE);
  3768   0013A2  0EFE               	movlw	254
  3769   0013A4  ECFF  F00A         	call	_TransferByte_SPI
  3770   0013A8                     
  3771                           ;Lib258_spi.c: 51:     _delay((unsigned long)((2)*(39321600UL/4000.0)));
  3772   0013A8  0E14               	movlw	20
  3773   0013AA  6E42               	movwf	??_ResetCS5532^0,c
  3774   0013AC  0E28               	movlw	40
  3775   0013AE                     i2u110_47:
  3776   0013AE  FFFF               	dw	65535	; errata NOP
  3777   0013B0  2EE8               	decfsz	wreg,f,c
  3778   0013B2  D7FD               	bra	i2u110_47
  3779   0013B4  2E42               	decfsz	??_ResetCS5532^0,f,c
  3780   0013B6  D7FB               	bra	i2u110_47
  3781   0013B8  D000               	nop2	
  3782   0013BA                     
  3783                           ;Lib258_spi.c: 53:     ReadRegister_4bytesCS5532(0x0B);
  3784   0013BA  0E0B               	movlw	11
  3785   0013BC  EC9B  F00A         	call	_ReadRegister_4bytesCS5532
  3786   0013C0                     
  3787                           ;Lib258_spi.c: 54:     BufferSPI[0] |= 0x20;
  3788   0013C0  8A39               	bsf	_BufferSPI^0,5,c
  3789   0013C2                     
  3790                           ;Lib258_spi.c: 55:     WriteRegister_4bytesCS5532(0x03);
  3791   0013C2  0E03               	movlw	3
  3792   0013C4  ECDA  F00A         	call	_WriteRegister_4bytesCS5532
  3793   0013C8                     
  3794                           ;Lib258_spi.c: 56:     _delay((unsigned long)((25)*(39321600UL/4000000.0)));
  3795   0013C8  0E3D               	movlw	61
  3796   0013CA                     i2u111_47:
  3797   0013CA  FFFF               	dw	65535	; errata NOP
  3798   0013CC  2EE8               	decfsz	wreg,f,c
  3799   0013CE  D7FD               	bra	i2u111_47
  3800   0013D0  F000               	nop	
  3801   0013D2                     
  3802                           ;Lib258_spi.c: 57:     BufferSPI[0] &= 0xDF;
  3803   0013D2  9A39               	bcf	_BufferSPI^0,5,c
  3804                           
  3805                           ;Lib258_spi.c: 58:     WriteRegister_4bytesCS5532(0x03);
  3806   0013D4  0E03               	movlw	3
  3807   0013D6  ECDA  F00A         	call	_WriteRegister_4bytesCS5532
  3808   0013DA                     
  3809                           ;Lib258_spi.c: 59:     _delay((unsigned long)((25)*(39321600UL/4000000.0)));
  3810   0013DA  0E3D               	movlw	61
  3811   0013DC                     i2u112_47:
  3812   0013DC  FFFF               	dw	65535	; errata NOP
  3813   0013DE  2EE8               	decfsz	wreg,f,c
  3814   0013E0  D7FD               	bra	i2u112_47
  3815   0013E2  F000               	nop	
  3816   0013E4                     
  3817                           ;Lib258_spi.c: 60:     ReadRegister_4bytesCS5532(0x0B);
  3818   0013E4  0E0B               	movlw	11
  3819   0013E6  EC9B  F00A         	call	_ReadRegister_4bytesCS5532
  3820   0013EA                     
  3821                           ;Lib258_spi.c: 61:     return BufferSPI[0];
  3822   0013EA  5039               	movf	_BufferSPI^0,w,c
  3823   0013EC  0012               	return		;funcret
  3824   0013EE  FFFF               	dw	65535	; errata NOP
  3825   0013F0                     __end_of_ResetCS5532:
  3826                           	callstack 0
  3827                           
  3828 ;; *************** function _ReceiveCMD_USART *****************
  3829 ;; Defined at:
  3830 ;;		line 85 in file "Lib258_serial.c"
  3831 ;; Parameters:    Size  Location     Type
  3832 ;;		None
  3833 ;; Auto vars:     Size  Location     Type
  3834 ;;  data_byte       1    4[COMRAM] unsigned char 
  3835 ;;  conta_byte      1    3[COMRAM] unsigned char 
  3836 ;; Return value:  Size  Location     Type
  3837 ;;                  1    wreg      unsigned char 
  3838 ;; Registers used:
  3839 ;;		wreg, status,2, status,0, cstack
  3840 ;; Tracked objects:
  3841 ;;		On entry : 0/0
  3842 ;;		On exit  : 0/0
  3843 ;;		Unchanged: 0/0
  3844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3845 ;;      Params:         0       0       0       0       0       0       0
  3846 ;;      Locals:         2       0       0       0       0       0       0
  3847 ;;      Temps:          0       0       0       0       0       0       0
  3848 ;;      Totals:         2       0       0       0       0       0       0
  3849 ;;Total ram usage:        2 bytes
  3850 ;; Hardware stack levels used: 1
  3851 ;; Hardware stack levels required when called: 1
  3852 ;; This function calls:
  3853 ;;		_ReadByte_USART
  3854 ;; This function is called by:
  3855 ;;		_Interrups
  3856 ;; This function uses a non-reentrant model
  3857 ;;
  3858                           
  3859                           	psect	text15
  3860   001086                     __ptext15:
  3861                           	callstack 0
  3862   001086                     _ReceiveCMD_USART:
  3863                           	callstack 0
  3864   001086  FFFF               	dw	65535	; assembler added errata NOP
  3865   001088                     
  3866                           ;Lib258_serial.c: 86:     unsigned char conta_byte;;Lib258_serial.c: 87:     char data_b
      +                          yte;;Lib258_serial.c: 89:     for(conta_byte=0; conta_byte<10;conta_byte++){
  3867   001088  0E00               	movlw	0
  3868   00108A  6E43               	movwf	ReceiveCMD_USART@conta_byte^0,c
  3869   00108C                     i2l1943:
  3870   00108C  FFFF               	dw	65535	; assembler added errata NOP
  3871                           
  3872                           ;Lib258_serial.c: 90:         data_byte = ReadByte_USART();
  3873   00108E  EC7A  F009         	call	_ReadByte_USART	;wreg free
  3874   001092  6E44               	movwf	ReceiveCMD_USART@data_byte^0,c
  3875   001094                     
  3876                           ;Lib258_serial.c: 91:         if(data_byte == 'J'){
  3877   001094  0E4A               	movlw	74
  3878   001096  1844               	xorwf	ReceiveCMD_USART@data_byte^0,w,c
  3879   001098  A4D8               	btfss	status,2,c
  3880   00109A  EF51  F008         	goto	i2u56_41
  3881   00109E  EF54  F008         	goto	i2u56_40
  3882   0010A2                     i2u56_41:
  3883   0010A2  FFFF               	dw	65535	; assembler added errata NOP
  3884   0010A4  EF57  F008         	goto	i2l1949
  3885   0010A8                     i2u56_40:
  3886   0010A8  FFFF               	dw	65535	; assembler added errata NOP
  3887   0010AA  EF62  F008         	goto	i2l1953
  3888   0010AE                     i2l1949:
  3889   0010AE  FFFF               	dw	65535	; assembler added errata NOP
  3890                           
  3891                           ;Lib258_serial.c: 94:     }
  3892   0010B0  2A43               	incf	ReceiveCMD_USART@conta_byte^0,f,c
  3893   0010B2  0E09               	movlw	9
  3894   0010B4  6443               	cpfsgt	ReceiveCMD_USART@conta_byte^0,c
  3895   0010B6  EF5F  F008         	goto	i2u57_41
  3896   0010BA  EF62  F008         	goto	i2u57_40
  3897   0010BE                     i2u57_41:
  3898   0010BE  FFFF               	dw	65535	; assembler added errata NOP
  3899   0010C0  EF46  F008         	goto	i2l1943
  3900   0010C4                     i2u57_40:
  3901   0010C4                     i2l1953:
  3902   0010C4  FFFF               	dw	65535	; assembler added errata NOP
  3903                           
  3904                           ;Lib258_serial.c: 95:     if(conta_byte < 10){
  3905   0010C6  0E0A               	movlw	10
  3906   0010C8  6043               	cpfslt	ReceiveCMD_USART@conta_byte^0,c
  3907   0010CA  EF69  F008         	goto	i2u58_41
  3908   0010CE  EF6C  F008         	goto	i2u58_40
  3909   0010D2                     i2u58_41:
  3910   0010D2  FFFF               	dw	65535	; assembler added errata NOP
  3911   0010D4  EFAB  F008         	goto	i2l269
  3912   0010D8                     i2u58_40:
  3913   0010D8  FFFF               	dw	65535	; assembler added errata NOP
  3914   0010DA                     
  3915                           ;Lib258_serial.c: 96:         data_byte = ReadByte_USART();
  3916   0010DA  EC7A  F009         	call	_ReadByte_USART	;wreg free
  3917   0010DE  6E44               	movwf	ReceiveCMD_USART@data_byte^0,c
  3918   0010E0                     
  3919                           ;Lib258_serial.c: 97:         if(data_byte == 'R'){
  3920   0010E0  0E52               	movlw	82
  3921   0010E2  1844               	xorwf	ReceiveCMD_USART@data_byte^0,w,c
  3922   0010E4  A4D8               	btfss	status,2,c
  3923   0010E6  EF77  F008         	goto	i2u59_41
  3924   0010EA  EF7A  F008         	goto	i2u59_40
  3925   0010EE                     i2u59_41:
  3926   0010EE  FFFF               	dw	65535	; assembler added errata NOP
  3927   0010F0  EFAB  F008         	goto	i2l269
  3928   0010F4                     i2u59_40:
  3929   0010F4  FFFF               	dw	65535	; assembler added errata NOP
  3930   0010F6                     
  3931                           ;Lib258_serial.c: 98:             data_byte = ReadByte_USART();
  3932   0010F6  EC7A  F009         	call	_ReadByte_USART	;wreg free
  3933   0010FA  6E44               	movwf	ReceiveCMD_USART@data_byte^0,c
  3934   0010FC                     
  3935                           ;Lib258_serial.c: 99:             if(data_byte == 'O'){
  3936   0010FC  0E4F               	movlw	79
  3937   0010FE  1844               	xorwf	ReceiveCMD_USART@data_byte^0,w,c
  3938   001100  A4D8               	btfss	status,2,c
  3939   001102  EF85  F008         	goto	i2u60_41
  3940   001106  EF88  F008         	goto	i2u60_40
  3941   00110A                     i2u60_41:
  3942   00110A  FFFF               	dw	65535	; assembler added errata NOP
  3943   00110C  EFAB  F008         	goto	i2l269
  3944   001110                     i2u60_40:
  3945   001110  FFFF               	dw	65535	; assembler added errata NOP
  3946   001112                     
  3947                           ;Lib258_serial.c: 100:                 data_byte = ReadByte_USART();
  3948   001112  EC7A  F009         	call	_ReadByte_USART	;wreg free
  3949   001116  6E44               	movwf	ReceiveCMD_USART@data_byte^0,c
  3950   001118                     
  3951                           ;Lib258_serial.c: 101:                 if(data_byte == 'C'){
  3952   001118  0E43               	movlw	67
  3953   00111A  1844               	xorwf	ReceiveCMD_USART@data_byte^0,w,c
  3954   00111C  A4D8               	btfss	status,2,c
  3955   00111E  EF93  F008         	goto	i2u61_41
  3956   001122  EF96  F008         	goto	i2u61_40
  3957   001126                     i2u61_41:
  3958   001126  FFFF               	dw	65535	; assembler added errata NOP
  3959   001128  EFAB  F008         	goto	i2l269
  3960   00112C                     i2u61_40:
  3961   00112C  FFFF               	dw	65535	; assembler added errata NOP
  3962   00112E                     
  3963                           ;Lib258_serial.c: 102:                     data_byte = ReadByte_USART();
  3964   00112E  EC7A  F009         	call	_ReadByte_USART	;wreg free
  3965   001132  6E44               	movwf	ReceiveCMD_USART@data_byte^0,c
  3966                           
  3967                           ;Lib258_serial.c: 103:                     data_byte = ReadByte_USART();
  3968   001134  EC7A  F009         	call	_ReadByte_USART	;wreg free
  3969   001138  6E44               	movwf	ReceiveCMD_USART@data_byte^0,c
  3970                           
  3971                           ;Lib258_serial.c: 104:                     BufferDAT[12] = ReadByte_USART();
  3972   00113A  EC7A  F009         	call	_ReadByte_USART	;wreg free
  3973   00113E  0100               	movlb	0	; () banked
  3974   001140  6F80               	movwf	(_BufferDAT+12)& (0+255),b
  3975                           
  3976                           ;Lib258_serial.c: 105:                     data_byte = ReadByte_USART();
  3977   001142  EC7A  F009         	call	_ReadByte_USART	;wreg free
  3978   001146  6E44               	movwf	ReceiveCMD_USART@data_byte^0,c
  3979                           
  3980                           ;Lib258_serial.c: 106:                     data_byte = ReadByte_USART();
  3981   001148  EC7A  F009         	call	_ReadByte_USART	;wreg free
  3982   00114C  6E44               	movwf	ReceiveCMD_USART@data_byte^0,c
  3983   00114E                     
  3984                           ;Lib258_serial.c: 107:                     return BufferDAT[12];
  3985   00114E  0100               	movlb	0	; () banked
  3986   001150  5180               	movf	(_BufferDAT+12)& (0+255),w,b
  3987   001152  EFAE  F008         	goto	i2l273
  3988   001156                     i2l269:
  3989   001156  FFFF               	dw	65535	; assembler added errata NOP
  3990                           
  3991                           ;Lib258_serial.c: 112:     RCSTAbits.CREN = 0;
  3992   001158  98AB               	bcf	171,4,c	;volatile
  3993   00115A                     
  3994                           ;Lib258_serial.c: 113:     return 'X';
  3995   00115A  0E58               	movlw	88
  3996   00115C                     i2l273:
  3997   00115C  FFFF               	dw	65535	; assembler added errata NOP
  3998   00115E  0012               	return		;funcret
  3999   001160  FFFF               	dw	65535	; errata NOP
  4000   001162                     __end_of_ReceiveCMD_USART:
  4001                           	callstack 0
  4002                           
  4003 ;; *************** function _ReadByte_USART *****************
  4004 ;; Defined at:
  4005 ;;		line 36 in file "Lib258_serial.c"
  4006 ;; Parameters:    Size  Location     Type
  4007 ;;		None
  4008 ;; Auto vars:     Size  Location     Type
  4009 ;;  Ready           1    2[COMRAM] unsigned char 
  4010 ;;  conta           1    1[COMRAM] unsigned char 
  4011 ;;  data            1    0[COMRAM] unsigned char 
  4012 ;; Return value:  Size  Location     Type
  4013 ;;                  1    wreg      unsigned char 
  4014 ;; Registers used:
  4015 ;;		wreg, status,2, status,0
  4016 ;; Tracked objects:
  4017 ;;		On entry : 0/0
  4018 ;;		On exit  : 0/0
  4019 ;;		Unchanged: 0/0
  4020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4021 ;;      Params:         0       0       0       0       0       0       0
  4022 ;;      Locals:         3       0       0       0       0       0       0
  4023 ;;      Temps:          0       0       0       0       0       0       0
  4024 ;;      Totals:         3       0       0       0       0       0       0
  4025 ;;Total ram usage:        3 bytes
  4026 ;; Hardware stack levels used: 1
  4027 ;; This function calls:
  4028 ;;		Nothing
  4029 ;; This function is called by:
  4030 ;;		_ReceiveCMD_USART
  4031 ;; This function uses a non-reentrant model
  4032 ;;
  4033                           
  4034                           	psect	text16
  4035   0012F4                     __ptext16:
  4036                           	callstack 0
  4037   0012F4                     _ReadByte_USART:
  4038                           	callstack 0
  4039   0012F4  FFFF               	dw	65535	; assembler added errata NOP
  4040   0012F6                     
  4041                           ;Lib258_serial.c: 37:     unsigned char conta;;Lib258_serial.c: 38:     unsigned char Re
      +                          ady;;Lib258_serial.c: 39:     char data;;Lib258_serial.c: 41:     conta = 0;
  4042   0012F6  0E00               	movlw	0
  4043   0012F8  6E41               	movwf	ReadByte_USART@conta^0,c
  4044   0012FA                     
  4045                           ;Lib258_serial.c: 42:     Ready = 255;
  4046   0012FA  6842               	setf	ReadByte_USART@Ready^0,c
  4047                           
  4048                           ;Lib258_serial.c: 43:     TMR2 = 0x00;
  4049   0012FC  0E00               	movlw	0
  4050   0012FE  6ECC               	movwf	204,c	;volatile
  4051   001300                     
  4052                           ;Lib258_serial.c: 44:     T2CONbits.TMR2ON = 1;
  4053   001300  84CA               	bsf	202,2,c	;volatile
  4054                           
  4055                           ;Lib258_serial.c: 46:     while(Ready){
  4056   001302  EFAD  F009         	goto	i2l234
  4057   001306                     i2l236:
  4058   001306  FFFF               	dw	65535	; assembler added errata NOP
  4059   001308  BA9E               	btfsc	158,5,c	;volatile
  4060   00130A  EF89  F009         	goto	i2u51_41
  4061   00130E  EF8C  F009         	goto	i2u51_40
  4062   001312                     i2u51_41:
  4063   001312  FFFF               	dw	65535	; assembler added errata NOP
  4064   001314  EF95  F009         	goto	i2l240
  4065   001318                     i2u51_40:
  4066   001318  FFFF               	dw	65535	; assembler added errata NOP
  4067   00131A  A29E               	btfss	158,1,c	;volatile
  4068   00131C  EF92  F009         	goto	i2u52_41
  4069   001320  EF95  F009         	goto	i2u52_40
  4070   001324                     i2u52_41:
  4071   001324  FFFF               	dw	65535	; assembler added errata NOP
  4072   001326  EF83  F009         	goto	i2l236
  4073   00132A                     i2u52_40:
  4074   00132A                     i2l240:
  4075   00132A  FFFF               	dw	65535	; assembler added errata NOP
  4076                           
  4077                           ;Lib258_serial.c: 48:         PIR1bits.TMR2IF = 0;
  4078   00132C  929E               	bcf	158,1,c	;volatile
  4079   00132E                     
  4080                           ;Lib258_serial.c: 49:         conta++;
  4081   00132E  2A41               	incf	ReadByte_USART@conta^0,f,c
  4082   001330                     
  4083                           ;Lib258_serial.c: 50:         if((PIR1bits.RCIF == 1) || (conta>3)){
  4084   001330  BA9E               	btfsc	158,5,c	;volatile
  4085   001332  EF9D  F009         	goto	i2u53_41
  4086   001336  EFA0  F009         	goto	i2u53_40
  4087   00133A                     i2u53_41:
  4088   00133A  FFFF               	dw	65535	; assembler added errata NOP
  4089   00133C  EFAA  F009         	goto	i2l1927
  4090   001340                     i2u53_40:
  4091   001340  FFFF               	dw	65535	; assembler added errata NOP
  4092   001342  0E03               	movlw	3
  4093   001344  6441               	cpfsgt	ReadByte_USART@conta^0,c
  4094   001346  EFA7  F009         	goto	i2u54_41
  4095   00134A  EFAA  F009         	goto	i2u54_40
  4096   00134E                     i2u54_41:
  4097   00134E  FFFF               	dw	65535	; assembler added errata NOP
  4098   001350  EFAD  F009         	goto	i2l234
  4099   001354                     i2u54_40:
  4100   001354                     i2l1927:
  4101   001354  FFFF               	dw	65535	; assembler added errata NOP
  4102                           
  4103                           ;Lib258_serial.c: 51:             Ready = 0;
  4104   001356  0E00               	movlw	0
  4105   001358  6E42               	movwf	ReadByte_USART@Ready^0,c
  4106   00135A                     i2l234:
  4107   00135A  FFFF               	dw	65535	; assembler added errata NOP
  4108                           
  4109                           ;Lib258_serial.c: 46:     while(Ready){
  4110   00135C  5042               	movf	ReadByte_USART@Ready^0,w,c
  4111   00135E  A4D8               	btfss	status,2,c
  4112   001360  EFB4  F009         	goto	i2u55_41
  4113   001364  EFB7  F009         	goto	i2u55_40
  4114   001368                     i2u55_41:
  4115   001368  FFFF               	dw	65535	; assembler added errata NOP
  4116   00136A  EF83  F009         	goto	i2l236
  4117   00136E                     i2u55_40:
  4118   00136E  FFFF               	dw	65535	; assembler added errata NOP
  4119   001370                     
  4120                           ;Lib258_serial.c: 54:     PIR1bits.TMR2IF = 0;
  4121   001370  929E               	bcf	158,1,c	;volatile
  4122                           
  4123                           ;Lib258_serial.c: 55:     T2CONbits.TMR2ON = 0;
  4124   001372  94CA               	bcf	202,2,c	;volatile
  4125                           
  4126                           ;Lib258_serial.c: 56:     data = (char) RCREG;
  4127   001374  CFAE F040          	movff	4014,ReadByte_USART@data	;volatile
  4128   001378                     
  4129                           ;Lib258_serial.c: 57:     return data;
  4130   001378  5040               	movf	ReadByte_USART@data^0,w,c
  4131   00137A  0012               	return		;funcret
  4132   00137C  FFFF               	dw	65535	; errata NOP
  4133   00137E                     __end_of_ReadByte_USART:
  4134                           	callstack 0
  4135                           
  4136 ;; *************** function _InitCS5532 *****************
  4137 ;; Defined at:
  4138 ;;		line 64 in file "Lib258_spi.c"
  4139 ;; Parameters:    Size  Location     Type
  4140 ;;		None
  4141 ;; Auto vars:     Size  Location     Type
  4142 ;;		None
  4143 ;; Return value:  Size  Location     Type
  4144 ;;                  1    wreg      void 
  4145 ;; Registers used:
  4146 ;;		wreg, status,2, status,0, cstack
  4147 ;; Tracked objects:
  4148 ;;		On entry : 0/0
  4149 ;;		On exit  : 0/0
  4150 ;;		Unchanged: 0/0
  4151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4152 ;;      Params:         0       0       0       0       0       0       0
  4153 ;;      Locals:         0       0       0       0       0       0       0
  4154 ;;      Temps:          0       0       0       0       0       0       0
  4155 ;;      Totals:         0       0       0       0       0       0       0
  4156 ;;Total ram usage:        0 bytes
  4157 ;; Hardware stack levels used: 1
  4158 ;; Hardware stack levels required when called: 2
  4159 ;; This function calls:
  4160 ;;		_ReadRegister_4bytesCS5532
  4161 ;;		_WriteRegister_4bytesCS5532
  4162 ;; This function is called by:
  4163 ;;		_Interrups
  4164 ;; This function uses a non-reentrant model
  4165 ;;
  4166                           
  4167                           	psect	text17
  4168   001564                     __ptext17:
  4169                           	callstack 0
  4170   001564                     _InitCS5532:
  4171                           	callstack 0
  4172   001564  FFFF               	dw	65535	; assembler added errata NOP
  4173   001566                     
  4174                           ;Lib258_spi.c: 67:     ReadRegister_4bytesCS5532(0x0B);
  4175   001566  0E0B               	movlw	11
  4176   001568  EC9B  F00A         	call	_ReadRegister_4bytesCS5532
  4177   00156C                     
  4178                           ;Lib258_spi.c: 68:     BufferSPI[0] |= 0x02;
  4179   00156C  8239               	bsf	_BufferSPI^0,1,c
  4180   00156E                     
  4181                           ;Lib258_spi.c: 69:     WriteRegister_4bytesCS5532(0x03);
  4182   00156E  0E03               	movlw	3
  4183   001570  ECDA  F00A         	call	_WriteRegister_4bytesCS5532
  4184   001574                     
  4185                           ;Lib258_spi.c: 71:     BufferSPI[0] = 0x05;
  4186   001574  0E05               	movlw	5
  4187   001576  6E39               	movwf	_BufferSPI^0,c
  4188   001578                     
  4189                           ;Lib258_spi.c: 72:     BufferSPI[1] = 0x00;
  4190   001578  0E00               	movlw	0
  4191   00157A  6E3A               	movwf	(_BufferSPI+1)^0,c
  4192   00157C                     
  4193                           ;Lib258_spi.c: 73:     BufferSPI[2] = 0x05;
  4194   00157C  0E05               	movlw	5
  4195   00157E  6E3B               	movwf	(_BufferSPI+2)^0,c
  4196   001580                     
  4197                           ;Lib258_spi.c: 74:     BufferSPI[3] = 0x00;
  4198   001580  0E00               	movlw	0
  4199   001582  6E3C               	movwf	(_BufferSPI+3)^0,c
  4200   001584                     
  4201                           ;Lib258_spi.c: 75:     WriteRegister_4bytesCS5532(0x05);
  4202   001584  0E05               	movlw	5
  4203   001586  ECDA  F00A         	call	_WriteRegister_4bytesCS5532
  4204   00158A  0012               	return		;funcret
  4205   00158C  FFFF               	dw	65535	; errata NOP
  4206   00158E                     __end_of_InitCS5532:
  4207                           	callstack 0
  4208                           
  4209 ;; *************** function _WriteRegister_4bytesCS5532 *****************
  4210 ;; Defined at:
  4211 ;;		line 89 in file "Lib258_spi.c"
  4212 ;; Parameters:    Size  Location     Type
  4213 ;;  command         1    wreg     unsigned char 
  4214 ;; Auto vars:     Size  Location     Type
  4215 ;;  command         1    1[COMRAM] unsigned char 
  4216 ;; Return value:  Size  Location     Type
  4217 ;;                  1    wreg      void 
  4218 ;; Registers used:
  4219 ;;		wreg, status,2, cstack
  4220 ;; Tracked objects:
  4221 ;;		On entry : 0/0
  4222 ;;		On exit  : 0/0
  4223 ;;		Unchanged: 0/0
  4224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4225 ;;      Params:         0       0       0       0       0       0       0
  4226 ;;      Locals:         1       0       0       0       0       0       0
  4227 ;;      Temps:          0       0       0       0       0       0       0
  4228 ;;      Totals:         1       0       0       0       0       0       0
  4229 ;;Total ram usage:        1 bytes
  4230 ;; Hardware stack levels used: 1
  4231 ;; Hardware stack levels required when called: 1
  4232 ;; This function calls:
  4233 ;;		_TransferByte_SPI
  4234 ;; This function is called by:
  4235 ;;		_ResetCS5532
  4236 ;;		_InitCS5532
  4237 ;; This function uses a non-reentrant model
  4238 ;;
  4239                           
  4240                           	psect	text18
  4241   0015B4                     __ptext18:
  4242                           	callstack 0
  4243   0015B4                     _WriteRegister_4bytesCS5532:
  4244                           	callstack 0
  4245   0015B4  FFFF               	dw	65535	; assembler added errata NOP
  4246                           
  4247                           ;incstack = 0
  4248                           ;WriteRegister_4bytesCS5532@command stored from wreg
  4249   0015B6  6E41               	movwf	WriteRegister_4bytesCS5532@command^0,c
  4250   0015B8                     
  4251                           ;Lib258_spi.c: 91:     TransferByte_SPI(command);
  4252   0015B8  5041               	movf	WriteRegister_4bytesCS5532@command^0,w,c
  4253   0015BA  ECFF  F00A         	call	_TransferByte_SPI
  4254                           
  4255                           ;Lib258_spi.c: 92:     TransferByte_SPI(BufferSPI[0]);
  4256   0015BE  5039               	movf	_BufferSPI^0,w,c
  4257   0015C0  ECFF  F00A         	call	_TransferByte_SPI
  4258                           
  4259                           ;Lib258_spi.c: 93:     TransferByte_SPI(BufferSPI[1]);
  4260   0015C4  503A               	movf	(_BufferSPI+1)^0,w,c
  4261   0015C6  ECFF  F00A         	call	_TransferByte_SPI
  4262                           
  4263                           ;Lib258_spi.c: 94:     TransferByte_SPI(BufferSPI[2]);
  4264   0015CA  503B               	movf	(_BufferSPI+2)^0,w,c
  4265   0015CC  ECFF  F00A         	call	_TransferByte_SPI
  4266                           
  4267                           ;Lib258_spi.c: 95:     TransferByte_SPI(BufferSPI[3]);
  4268   0015D0  503C               	movf	(_BufferSPI+3)^0,w,c
  4269   0015D2  ECFF  F00A         	call	_TransferByte_SPI
  4270   0015D6  0012               	return		;funcret
  4271   0015D8  FFFF               	dw	65535	; errata NOP
  4272   0015DA                     __end_of_WriteRegister_4bytesCS5532:
  4273                           	callstack 0
  4274                           
  4275 ;; *************** function _CleanHolding *****************
  4276 ;; Defined at:
  4277 ;;		line 123 in file "Lib258_spi.c"
  4278 ;; Parameters:    Size  Location     Type
  4279 ;;		None
  4280 ;; Auto vars:     Size  Location     Type
  4281 ;;		None
  4282 ;; Return value:  Size  Location     Type
  4283 ;;                  1    wreg      void 
  4284 ;; Registers used:
  4285 ;;		wreg, status,2, status,0, cstack
  4286 ;; Tracked objects:
  4287 ;;		On entry : 0/0
  4288 ;;		On exit  : 0/0
  4289 ;;		Unchanged: 0/0
  4290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4291 ;;      Params:         0       0       0       0       0       0       0
  4292 ;;      Locals:         0       0       0       0       0       0       0
  4293 ;;      Temps:          0       0       0       0       0       0       0
  4294 ;;      Totals:         0       0       0       0       0       0       0
  4295 ;;Total ram usage:        0 bytes
  4296 ;; Hardware stack levels used: 1
  4297 ;; Hardware stack levels required when called: 3
  4298 ;; This function calls:
  4299 ;;		_ReadAD24
  4300 ;; This function is called by:
  4301 ;;		_Interrups
  4302 ;; This function uses a non-reentrant model
  4303 ;;
  4304                           
  4305                           	psect	text19
  4306   001644                     __ptext19:
  4307                           	callstack 0
  4308   001644                     _CleanHolding:
  4309                           	callstack 0
  4310   001644  FFFF               	dw	65535	; assembler added errata NOP
  4311   001646                     
  4312                           ;Lib258_spi.c: 125:     PORTB = 0X0C;
  4313   001646  0E0C               	movlw	12
  4314   001648  6E81               	movwf	129,c	;volatile
  4315   00164A                     
  4316                           ;Lib258_spi.c: 126:     _delay((unsigned long)((100)*(39321600UL/4000000.0)));
  4317   00164A  0EC4               	movlw	196
  4318   00164C                     i2u113_47:
  4319   00164C  FFFF               	dw	65535	; errata NOP
  4320   00164E  F000               	nop	
  4321   001650  2EE8               	decfsz	wreg,f,c
  4322   001652  D7FC               	bra	i2u113_47
  4323   001654  D000               	nop2	
  4324   001656  F000               	nop	
  4325   001658                     
  4326                           ;Lib258_spi.c: 127:     ReadAD24(0, 0x00);
  4327   001658  0E00               	movlw	0
  4328   00165A  6E42               	movwf	ReadAD24@cmd_convert^0,c
  4329   00165C  0E00               	movlw	0
  4330   00165E  ECB1  F008         	call	_ReadAD24
  4331   001662  0012               	return		;funcret
  4332   001664  FFFF               	dw	65535	; errata NOP
  4333   001666                     __end_of_CleanHolding:
  4334                           	callstack 0
  4335                           
  4336 ;; *************** function _ReadAD24 *****************
  4337 ;; Defined at:
  4338 ;;		line 102 in file "Lib258_spi.c"
  4339 ;; Parameters:    Size  Location     Type
  4340 ;;  flag_convert    1    wreg     unsigned char 
  4341 ;;  cmd_convert     1    2[COMRAM] unsigned char 
  4342 ;; Auto vars:     Size  Location     Type
  4343 ;;  flag_convert    1   10[COMRAM] unsigned char 
  4344 ;;  DataADC         4   14[COMRAM] unsigned long 
  4345 ;;  ByteLow         1   13[COMRAM] unsigned char 
  4346 ;;  ByteHigh        1   12[COMRAM] unsigned char 
  4347 ;;  ByteUpper       1   11[COMRAM] unsigned char 
  4348 ;; Return value:  Size  Location     Type
  4349 ;;                  4    2[COMRAM] unsigned long 
  4350 ;; Registers used:
  4351 ;;		wreg, status,2, status,0, cstack
  4352 ;; Tracked objects:
  4353 ;;		On entry : 0/0
  4354 ;;		On exit  : 0/0
  4355 ;;		Unchanged: 0/0
  4356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4357 ;;      Params:         4       0       0       0       0       0       0
  4358 ;;      Locals:         8       0       0       0       0       0       0
  4359 ;;      Temps:          4       0       0       0       0       0       0
  4360 ;;      Totals:        16       0       0       0       0       0       0
  4361 ;;Total ram usage:       16 bytes
  4362 ;; Hardware stack levels used: 1
  4363 ;; Hardware stack levels required when called: 2
  4364 ;; This function calls:
  4365 ;;		_ReadRegister_4bytesCS5532
  4366 ;; This function is called by:
  4367 ;;		_Interrups
  4368 ;;		_CleanHolding
  4369 ;; This function uses a non-reentrant model
  4370 ;;
  4371                           
  4372                           	psect	text20
  4373   001162                     __ptext20:
  4374                           	callstack 0
  4375   001162                     _ReadAD24:
  4376                           	callstack 0
  4377   001162  FFFF               	dw	65535	; assembler added errata NOP
  4378                           
  4379                           ;incstack = 0
  4380                           ;ReadAD24@flag_convert stored from wreg
  4381   001164  6E4A               	movwf	ReadAD24@flag_convert^0,c
  4382   001166                     i2l336:
  4383   001166  FFFF               	dw	65535	; assembler added errata NOP
  4384   001168  B882               	btfsc	130,4,c	;volatile
  4385   00116A  EFB9  F008         	goto	i2u48_41
  4386   00116E  EFBC  F008         	goto	i2u48_40
  4387   001172                     i2u48_41:
  4388   001172  FFFF               	dw	65535	; assembler added errata NOP
  4389   001174  EFB3  F008         	goto	i2l336
  4390   001178                     i2u48_40:
  4391   001178  FFFF               	dw	65535	; assembler added errata NOP
  4392   00117A                     
  4393                           ;Lib258_spi.c: 107:     ReadRegister_4bytesCS5532(cmd_convert);
  4394   00117A  5042               	movf	ReadAD24@cmd_convert^0,w,c
  4395   00117C  EC9B  F00A         	call	_ReadRegister_4bytesCS5532
  4396   001180                     
  4397                           ;Lib258_spi.c: 108:     ByteUpper = BufferSPI[0];
  4398   001180  C039  F04B         	movff	_BufferSPI,ReadAD24@ByteUpper
  4399   001184                     
  4400                           ;Lib258_spi.c: 109:     ByteHigh = BufferSPI[1];
  4401   001184  C03A  F04C         	movff	_BufferSPI+1,ReadAD24@ByteHigh
  4402   001188                     
  4403                           ;Lib258_spi.c: 110:     ByteLow = BufferSPI[2];
  4404   001188  C03B  F04D         	movff	_BufferSPI+2,ReadAD24@ByteLow
  4405   00118C                     
  4406                           ;Lib258_spi.c: 112:     DataADC = 0;
  4407   00118C  0E00               	movlw	0
  4408   00118E  6E4E               	movwf	ReadAD24@DataADC^0,c
  4409   001190  0E00               	movlw	0
  4410   001192  6E4F               	movwf	(ReadAD24@DataADC+1)^0,c
  4411   001194  0E00               	movlw	0
  4412   001196  6E50               	movwf	(ReadAD24@DataADC+2)^0,c
  4413   001198  0E00               	movlw	0
  4414   00119A  6E51               	movwf	(ReadAD24@DataADC+3)^0,c
  4415   00119C                     
  4416                           ;Lib258_spi.c: 113:     if(flag_convert){
  4417   00119C  504A               	movf	ReadAD24@flag_convert^0,w,c
  4418   00119E  B4D8               	btfsc	status,2,c
  4419   0011A0  EFD4  F008         	goto	i2u49_41
  4420   0011A4  EFD7  F008         	goto	i2u49_40
  4421   0011A8                     i2u49_41:
  4422   0011A8  FFFF               	dw	65535	; assembler added errata NOP
  4423   0011AA  EF10  F009         	goto	i2l1901
  4424   0011AE                     i2u49_40:
  4425   0011AE  FFFF               	dw	65535	; assembler added errata NOP
  4426   0011B0                     
  4427                           ;Lib258_spi.c: 114:         DataADC = DataADC | (unsigned long)ByteUpper<<16;
  4428   0011B0  C04B  F046         	movff	ReadAD24@ByteUpper,??_ReadAD24
  4429   0011B4  6A47               	clrf	(??_ReadAD24+1)^0,c
  4430   0011B6  6A48               	clrf	(??_ReadAD24+2)^0,c
  4431   0011B8  6A49               	clrf	(??_ReadAD24+3)^0,c
  4432   0011BA  C047  F049         	movff	??_ReadAD24+1,??_ReadAD24+3
  4433   0011BE  C046  F048         	movff	??_ReadAD24,??_ReadAD24+2
  4434   0011C2  6A47               	clrf	(??_ReadAD24+1)^0,c
  4435   0011C4  6A46               	clrf	??_ReadAD24^0,c
  4436   0011C6  504E               	movf	ReadAD24@DataADC^0,w,c
  4437   0011C8  1046               	iorwf	??_ReadAD24^0,w,c
  4438   0011CA  6E4E               	movwf	ReadAD24@DataADC^0,c
  4439   0011CC  504F               	movf	(ReadAD24@DataADC+1)^0,w,c
  4440   0011CE  1047               	iorwf	(??_ReadAD24+1)^0,w,c
  4441   0011D0  6E4F               	movwf	(ReadAD24@DataADC+1)^0,c
  4442   0011D2  5050               	movf	(ReadAD24@DataADC+2)^0,w,c
  4443   0011D4  1048               	iorwf	(??_ReadAD24+2)^0,w,c
  4444   0011D6  6E50               	movwf	(ReadAD24@DataADC+2)^0,c
  4445   0011D8  5051               	movf	(ReadAD24@DataADC+3)^0,w,c
  4446   0011DA  1049               	iorwf	(??_ReadAD24+3)^0,w,c
  4447   0011DC  6E51               	movwf	(ReadAD24@DataADC+3)^0,c
  4448                           
  4449                           ;Lib258_spi.c: 115:         DataADC = DataADC | (unsigned long)ByteHigh<<8;
  4450   0011DE  C04C  F046         	movff	ReadAD24@ByteHigh,??_ReadAD24
  4451   0011E2  6A47               	clrf	(??_ReadAD24+1)^0,c
  4452   0011E4  6A48               	clrf	(??_ReadAD24+2)^0,c
  4453   0011E6  6A49               	clrf	(??_ReadAD24+3)^0,c
  4454   0011E8  C048  F049         	movff	??_ReadAD24+2,??_ReadAD24+3
  4455   0011EC  C047  F048         	movff	??_ReadAD24+1,??_ReadAD24+2
  4456   0011F0  C046  F047         	movff	??_ReadAD24,??_ReadAD24+1
  4457   0011F4  6A46               	clrf	??_ReadAD24^0,c
  4458   0011F6  504E               	movf	ReadAD24@DataADC^0,w,c
  4459   0011F8  1046               	iorwf	??_ReadAD24^0,w,c
  4460   0011FA  6E4E               	movwf	ReadAD24@DataADC^0,c
  4461   0011FC  504F               	movf	(ReadAD24@DataADC+1)^0,w,c
  4462   0011FE  1047               	iorwf	(??_ReadAD24+1)^0,w,c
  4463   001200  6E4F               	movwf	(ReadAD24@DataADC+1)^0,c
  4464   001202  5050               	movf	(ReadAD24@DataADC+2)^0,w,c
  4465   001204  1048               	iorwf	(??_ReadAD24+2)^0,w,c
  4466   001206  6E50               	movwf	(ReadAD24@DataADC+2)^0,c
  4467   001208  5051               	movf	(ReadAD24@DataADC+3)^0,w,c
  4468   00120A  1049               	iorwf	(??_ReadAD24+3)^0,w,c
  4469   00120C  6E51               	movwf	(ReadAD24@DataADC+3)^0,c
  4470                           
  4471                           ;Lib258_spi.c: 116:         DataADC = DataADC | (unsigned long)ByteLow;
  4472   00120E  504E               	movf	ReadAD24@DataADC^0,w,c
  4473   001210  104D               	iorwf	ReadAD24@ByteLow^0,w,c
  4474   001212  6E4E               	movwf	ReadAD24@DataADC^0,c
  4475   001214  504F               	movf	(ReadAD24@DataADC+1)^0,w,c
  4476   001216  6E4F               	movwf	(ReadAD24@DataADC+1)^0,c
  4477   001218  5050               	movf	(ReadAD24@DataADC+2)^0,w,c
  4478   00121A  6E50               	movwf	(ReadAD24@DataADC+2)^0,c
  4479   00121C  5051               	movf	(ReadAD24@DataADC+3)^0,w,c
  4480   00121E  6E51               	movwf	(ReadAD24@DataADC+3)^0,c
  4481   001220                     i2l1901:
  4482   001220  FFFF               	dw	65535	; assembler added errata NOP
  4483                           
  4484                           ;Lib258_spi.c: 119:     return DataADC;
  4485   001222  C04E  F042         	movff	ReadAD24@DataADC,?_ReadAD24
  4486   001226  C04F  F043         	movff	ReadAD24@DataADC+1,?_ReadAD24+1
  4487   00122A  C050  F044         	movff	ReadAD24@DataADC+2,?_ReadAD24+2
  4488   00122E  C051  F045         	movff	ReadAD24@DataADC+3,?_ReadAD24+3
  4489   001232  0012               	return		;funcret
  4490   001234  FFFF               	dw	65535	; errata NOP
  4491   001236                     __end_of_ReadAD24:
  4492                           	callstack 0
  4493                           
  4494 ;; *************** function _ReadRegister_4bytesCS5532 *****************
  4495 ;; Defined at:
  4496 ;;		line 79 in file "Lib258_spi.c"
  4497 ;; Parameters:    Size  Location     Type
  4498 ;;  command         1    wreg     unsigned char 
  4499 ;; Auto vars:     Size  Location     Type
  4500 ;;  command         1    1[COMRAM] unsigned char 
  4501 ;; Return value:  Size  Location     Type
  4502 ;;                  1    wreg      void 
  4503 ;; Registers used:
  4504 ;;		wreg, status,2, cstack
  4505 ;; Tracked objects:
  4506 ;;		On entry : 0/0
  4507 ;;		On exit  : 0/0
  4508 ;;		Unchanged: 0/0
  4509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4510 ;;      Params:         0       0       0       0       0       0       0
  4511 ;;      Locals:         1       0       0       0       0       0       0
  4512 ;;      Temps:          0       0       0       0       0       0       0
  4513 ;;      Totals:         1       0       0       0       0       0       0
  4514 ;;Total ram usage:        1 bytes
  4515 ;; Hardware stack levels used: 1
  4516 ;; Hardware stack levels required when called: 1
  4517 ;; This function calls:
  4518 ;;		_TransferByte_SPI
  4519 ;; This function is called by:
  4520 ;;		_Interrups
  4521 ;;		_ResetCS5532
  4522 ;;		_InitCS5532
  4523 ;;		_ReadAD24
  4524 ;; This function uses a non-reentrant model
  4525 ;;
  4526                           
  4527                           	psect	text21
  4528   001536                     __ptext21:
  4529                           	callstack 0
  4530   001536                     _ReadRegister_4bytesCS5532:
  4531                           	callstack 0
  4532   001536  FFFF               	dw	65535	; assembler added errata NOP
  4533                           
  4534                           ;incstack = 0
  4535                           ;ReadRegister_4bytesCS5532@command stored from wreg
  4536   001538  6E41               	movwf	ReadRegister_4bytesCS5532@command^0,c
  4537   00153A                     
  4538                           ;Lib258_spi.c: 81:     TransferByte_SPI(command);
  4539   00153A  5041               	movf	ReadRegister_4bytesCS5532@command^0,w,c
  4540   00153C  ECFF  F00A         	call	_TransferByte_SPI
  4541                           
  4542                           ;Lib258_spi.c: 82:     BufferSPI[0] = TransferByte_SPI(0x00);
  4543   001540  0E00               	movlw	0
  4544   001542  ECFF  F00A         	call	_TransferByte_SPI
  4545   001546  6E39               	movwf	_BufferSPI^0,c
  4546                           
  4547                           ;Lib258_spi.c: 83:     BufferSPI[1] = TransferByte_SPI(0x00);
  4548   001548  0E00               	movlw	0
  4549   00154A  ECFF  F00A         	call	_TransferByte_SPI
  4550   00154E  6E3A               	movwf	(_BufferSPI+1)^0,c
  4551                           
  4552                           ;Lib258_spi.c: 84:     BufferSPI[2] = TransferByte_SPI(0x00);
  4553   001550  0E00               	movlw	0
  4554   001552  ECFF  F00A         	call	_TransferByte_SPI
  4555   001556  6E3B               	movwf	(_BufferSPI+2)^0,c
  4556                           
  4557                           ;Lib258_spi.c: 85:     BufferSPI[3] = TransferByte_SPI(0x00);
  4558   001558  0E00               	movlw	0
  4559   00155A  ECFF  F00A         	call	_TransferByte_SPI
  4560   00155E  6E3C               	movwf	(_BufferSPI+3)^0,c
  4561   001560  0012               	return		;funcret
  4562   001562  FFFF               	dw	65535	; errata NOP
  4563   001564                     __end_of_ReadRegister_4bytesCS5532:
  4564                           	callstack 0
  4565                           
  4566 ;; *************** function _TransferByte_SPI *****************
  4567 ;; Defined at:
  4568 ;;		line 33 in file "Lib258_spi.c"
  4569 ;; Parameters:    Size  Location     Type
  4570 ;;  data            1    wreg     unsigned char 
  4571 ;; Auto vars:     Size  Location     Type
  4572 ;;  data            1    0[COMRAM] unsigned char 
  4573 ;;  valor           1    0        unsigned char 
  4574 ;; Return value:  Size  Location     Type
  4575 ;;                  1    wreg      unsigned char 
  4576 ;; Registers used:
  4577 ;;		wreg, status,2
  4578 ;; Tracked objects:
  4579 ;;		On entry : 0/0
  4580 ;;		On exit  : 0/0
  4581 ;;		Unchanged: 0/0
  4582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4583 ;;      Params:         0       0       0       0       0       0       0
  4584 ;;      Locals:         1       0       0       0       0       0       0
  4585 ;;      Temps:          0       0       0       0       0       0       0
  4586 ;;      Totals:         1       0       0       0       0       0       0
  4587 ;;Total ram usage:        1 bytes
  4588 ;; Hardware stack levels used: 1
  4589 ;; This function calls:
  4590 ;;		Nothing
  4591 ;; This function is called by:
  4592 ;;		_Interrups
  4593 ;;		_ResetCS5532
  4594 ;;		_ReadRegister_4bytesCS5532
  4595 ;;		_WriteRegister_4bytesCS5532
  4596 ;; This function uses a non-reentrant model
  4597 ;;
  4598                           
  4599                           	psect	text22
  4600   0015FE                     __ptext22:
  4601                           	callstack 0
  4602   0015FE                     _TransferByte_SPI:
  4603                           	callstack 0
  4604   0015FE  FFFF               	dw	65535	; assembler added errata NOP
  4605                           
  4606                           ;incstack = 0
  4607                           ;TransferByte_SPI@data stored from wreg
  4608   001600  6E40               	movwf	TransferByte_SPI@data^0,c
  4609   001602  50C9               	movf	201,w,c	;volatile
  4610   001604                     
  4611                           ;Lib258_spi.c: 37:     SSPBUF = data;
  4612   001604  C040  FFC9         	movff	TransferByte_SPI@data,4041	;volatile
  4613   001608                     i2l316:
  4614   001608  FFFF               	dw	65535	; assembler added errata NOP
  4615   00160A  A0C7               	btfss	199,0,c	;volatile
  4616   00160C  EF0A  F00B         	goto	i2u46_41
  4617   001610  EF0D  F00B         	goto	i2u46_40
  4618   001614                     i2u46_41:
  4619   001614  FFFF               	dw	65535	; assembler added errata NOP
  4620   001616  EF04  F00B         	goto	i2l316
  4621   00161A                     i2u46_40:
  4622   00161A  FFFF               	dw	65535	; assembler added errata NOP
  4623   00161C                     
  4624                           ;Lib258_spi.c: 39:     return SSPBUF;
  4625   00161C  50C9               	movf	201,w,c	;volatile
  4626   00161E  0012               	return		;funcret
  4627   001620  FFFF               	dw	65535	; errata NOP
  4628   001622                     __end_of_TransferByte_SPI:
  4629                           	callstack 0
  4630                           
  4631                           	psect	rparam
  4632   000000                     
  4633                           	psect	temp
  4634   00005C                     btemp:
  4635                           	callstack 0
  4636   00005C                     	ds	1
  4637   000000                     int$flags	set	btemp
  4638   000000                     wtemp8	set	btemp+1
  4639   000000                     ttemp5	set	btemp+1
  4640   000000                     ttemp6	set	btemp+4
  4641   000000                     ttemp7	set	btemp+8
  4642                           
  4643                           	psect	idloc
  4644                           
  4645                           ;Config register IDLOC0 @ 0x200000
  4646                           ;	unspecified, using default values
  4647   200000                     	org	2097152
  4648   200000  FF                 	db	255
  4649                           
  4650                           ;Config register IDLOC1 @ 0x200001
  4651                           ;	unspecified, using default values
  4652   200001                     	org	2097153
  4653   200001  FF                 	db	255
  4654                           
  4655                           ;Config register IDLOC2 @ 0x200002
  4656                           ;	unspecified, using default values
  4657   200002                     	org	2097154
  4658   200002  FF                 	db	255
  4659                           
  4660                           ;Config register IDLOC3 @ 0x200003
  4661                           ;	unspecified, using default values
  4662   200003                     	org	2097155
  4663   200003  FF                 	db	255
  4664                           
  4665                           ;Config register IDLOC4 @ 0x200004
  4666                           ;	unspecified, using default values
  4667   200004                     	org	2097156
  4668   200004  FF                 	db	255
  4669                           
  4670                           ;Config register IDLOC5 @ 0x200005
  4671                           ;	unspecified, using default values
  4672   200005                     	org	2097157
  4673   200005  FF                 	db	255
  4674                           
  4675                           ;Config register IDLOC6 @ 0x200006
  4676                           ;	unspecified, using default values
  4677   200006                     	org	2097158
  4678   200006  FF                 	db	255
  4679                           
  4680                           ;Config register IDLOC7 @ 0x200007
  4681                           ;	unspecified, using default values
  4682   200007                     	org	2097159
  4683   200007  FF                 	db	255
  4684                           
  4685                           	psect	config
  4686                           
  4687                           ; Padding undefined space
  4688   300000                     	org	3145728
  4689   300000  FF                 	db	255
  4690                           
  4691                           ;Config register CONFIG1H @ 0x300001
  4692                           ;	Oscillator Selection bits
  4693                           ;	OSC = HSPLL, HS oscillator with PLL enabled/Clock frequency = (4 x FOSC)
  4694                           ;	Oscillator System Clock Switch Enable bit
  4695                           ;	OSCS = OFF, Oscillator system clock switch option is disabled (main oscillator is sour
      +                          ce)
  4696   300001                     	org	3145729
  4697   300001  26                 	db	38
  4698                           
  4699                           ;Config register CONFIG2L @ 0x300002
  4700                           ;	Power-up Timer Enable bit
  4701                           ;	PWRT = ON, PWRT enabled
  4702                           ;	Brown-out Reset Enable bit
  4703                           ;	BOR = ON, Brown-out Reset enabled
  4704                           ;	Brown-out Reset Voltage bits
  4705                           ;	BORV = 25, VBOR set to 2.5V
  4706   300002                     	org	3145730
  4707   300002  0E                 	db	14
  4708                           
  4709                           ;Config register CONFIG2H @ 0x300003
  4710                           ;	Watchdog Timer Enable bit
  4711                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  4712                           ;	Watchdog Timer Postscale Select bits
  4713                           ;	WDTPS = 128, 1:128
  4714   300003                     	org	3145731
  4715   300003  0E                 	db	14
  4716                           
  4717                           ;Config register CONFIG4L @ 0x300006
  4718                           ;	Stack Full/Underflow Reset Enable bit
  4719                           ;	STVR = OFF, Stack Full/Underflow will not cause Reset
  4720                           ;	Low-Voltage ICSP Enable bit
  4721                           ;	LVP = OFF, Low-Voltage ICSP disabled
  4722                           ;	Background Debugger Enable bit
  4723                           ;	DEBUG = 0x1, unprogrammed default
  4724   300006                     	org	3145734
  4725   300006  80                 	db	128
  4726                           
  4727                           ; Padding undefined space
  4728   300007                     	org	3145735
  4729   300007  FF                 	db	255
  4730                           
  4731                           ;Config register CONFIG5L @ 0x300008
  4732                           ;	Code Protection bit
  4733                           ;	CP0 = OFF, Block 0 (000200-001FFFh) not code protected
  4734                           ;	Code Protection bit
  4735                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code protected
  4736                           ;	Code Protection bit
  4737                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code protected
  4738                           ;	Code Protection bit
  4739                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code protected
  4740   300008                     	org	3145736
  4741   300008  0F                 	db	15
  4742                           
  4743                           ;Config register CONFIG5H @ 0x300009
  4744                           ;	Boot Block Code Protection bit
  4745                           ;	CPB = OFF, Boot Block (000000-0001FFh) not code protected
  4746                           ;	Data EEPROM Code Protection bit
  4747                           ;	CPD = OFF, Data EEPROM not code protected
  4748   300009                     	org	3145737
  4749   300009  C0                 	db	192
  4750                           
  4751                           ;Config register CONFIG6L @ 0x30000A
  4752                           ;	Write Protection bit
  4753                           ;	WRT0 = OFF, Block 0 (000200-001FFFh) not write protected
  4754                           ;	Write Protection bit
  4755                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write protected
  4756                           ;	Write Protection bit
  4757                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write protected
  4758                           ;	Write Protection bit
  4759                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write protected
  4760   30000A                     	org	3145738
  4761   30000A  0F                 	db	15
  4762                           
  4763                           ;Config register CONFIG6H @ 0x30000B
  4764                           ;	Configuration Register Write Protection bit
  4765                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write protected
  4766                           ;	Boot Block Write Protection bit
  4767                           ;	WRTB = OFF, Boot Block (000000-0001FFh) not write protected
  4768                           ;	Data EEPROM Write Protection bit
  4769                           ;	WRTD = OFF, Data EEPROM not write protected
  4770   30000B                     	org	3145739
  4771   30000B  E0                 	db	224
  4772                           
  4773                           ;Config register CONFIG7L @ 0x30000C
  4774                           ;	Table Read Protection bit
  4775                           ;	EBTR0 = OFF, Block 0 (000200-001FFFh) not protected from Table Reads executed in other
      +                           blocks
  4776                           ;	Table Read Protection bit
  4777                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from Table Reads executed in other
      +                           blocks
  4778                           ;	Table Read Protection bit
  4779                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from Table Reads executed in other
      +                           blocks
  4780                           ;	Table Read Protection bit
  4781                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from Table Reads executed in other
      +                           blocks
  4782   30000C                     	org	3145740
  4783   30000C  0F                 	db	15
  4784                           
  4785                           ;Config register CONFIG7H @ 0x30000D
  4786                           ;	Boot Block Table Read Protection bit
  4787                           ;	EBTRB = OFF, Boot Block (000000-0001FFh) not protected from Table Reads executed in ot
      +                          her blocks
  4788   30000D                     	org	3145741
  4789   30000D  40                 	db	64
  4790                           tosu	equ	0xFFF
  4791                           tosh	equ	0xFFE
  4792                           tosl	equ	0xFFD
  4793                           stkptr	equ	0xFFC
  4794                           pclatu	equ	0xFFB
  4795                           pclath	equ	0xFFA
  4796                           pcl	equ	0xFF9
  4797                           tblptru	equ	0xFF8
  4798                           tblptrh	equ	0xFF7
  4799                           tblptrl	equ	0xFF6
  4800                           tablat	equ	0xFF5
  4801                           prodh	equ	0xFF4
  4802                           prodl	equ	0xFF3
  4803                           indf0	equ	0xFEF
  4804                           postinc0	equ	0xFEE
  4805                           postdec0	equ	0xFED
  4806                           preinc0	equ	0xFEC
  4807                           plusw0	equ	0xFEB
  4808                           fsr0h	equ	0xFEA
  4809                           fsr0l	equ	0xFE9
  4810                           wreg	equ	0xFE8
  4811                           indf1	equ	0xFE7
  4812                           postinc1	equ	0xFE6
  4813                           postdec1	equ	0xFE5
  4814                           preinc1	equ	0xFE4
  4815                           plusw1	equ	0xFE3
  4816                           fsr1h	equ	0xFE2
  4817                           fsr1l	equ	0xFE1
  4818                           bsr	equ	0xFE0
  4819                           indf2	equ	0xFDF
  4820                           postinc2	equ	0xFDE
  4821                           postdec2	equ	0xFDD
  4822                           preinc2	equ	0xFDC
  4823                           plusw2	equ	0xFDB
  4824                           fsr2h	equ	0xFDA
  4825                           fsr2l	equ	0xFD9
  4826                           status	equ	0xFD8

Data Sizes:
    Strings     53
    Constant    0
    Data        13
    BSS         83
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     28      91
    BANK0           160      2      35
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    print_string@str	PTR unsigned char  size(2) Largest target is 24
		 -> STR_9(CODE[3]), STR_8(CODE[11]), STR_7(CODE[3]), STR_6(CODE[11]), 
		 -> STR_5(CODE[3]), STR_4(CODE[7]), STR_3(CODE[3]), STR_2(CODE[7]), 
		 -> STR_1(CODE[24]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _Interrups in COMRAM

    _Interrups->_ReadAD24
    _print_value->_WriteByte_USART
    _TransmitDAT_USART->_print_string
    _TransmitCMD_USART->_print_string
    _print_string->_WriteByte_USART
    _ResetCS5532->_ReadRegister_4bytesCS5532
    _ResetCS5532->_WriteRegister_4bytesCS5532
    _ReceiveCMD_USART->_ReadByte_USART
    _InitCS5532->_ReadRegister_4bytesCS5532
    _InitCS5532->_WriteRegister_4bytesCS5532
    _WriteRegister_4bytesCS5532->_TransferByte_SPI
    _CleanHolding->_ReadAD24
    _ReadAD24->_ReadRegister_4bytesCS5532
    _ReadRegister_4bytesCS5532->_TransferByte_SPI

Critical Paths under _main in BANK0

    None.

Critical Paths under _Interrups in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Interrups in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Interrups in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Interrups in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Interrups in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Interrups in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0       0
                                              0 BANK0      2     2      0
                      _ClosePort_SPI
                    _CloseSerialPort
                     _ConfigPort_SPI
                   _ConfigSerialPort
                       _OpenPort_SPI
                     _OpenSerialPort
 ---------------------------------------------------------------------------------
 (1) _OpenSerialPort                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _OpenPort_SPI                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigSerialPort                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigPort_SPI                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CloseSerialPort                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ClosePort_SPI                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _Interrups                                           10    10      0   14003
                                             18 COMRAM    10    10      0
                       _CleanHolding
                         _InitCS5532
                           _ReadAD24
          _ReadRegister_4bytesCS5532
                   _ReceiveCMD_USART
                        _ResetCS5532
                   _TransferByte_SPI
                  _TransmitCMD_USART
                  _TransmitDAT_USART
                    _WriteByte_USART
                            ___lldiv
                       _print_string
                        _print_value
 ---------------------------------------------------------------------------------
 (3) _print_value                                          7     3      4    1497
                                              1 COMRAM     7     3      4
                    _WriteByte_USART
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8    2746
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) _TransmitDAT_USART                                    2     2      0     863
                                              3 COMRAM     2     2      0
                    _WriteByte_USART
                       _print_string
 ---------------------------------------------------------------------------------
 (3) _TransmitCMD_USART                                    1     1      0     795
                                              3 COMRAM     1     1      0
                    _WriteByte_USART
                       _print_string
 ---------------------------------------------------------------------------------
 (3) _print_string                                         2     0      2     751
                                              1 COMRAM     2     0      2
                    _WriteByte_USART
 ---------------------------------------------------------------------------------
 (4) _WriteByte_USART                                      1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _ResetCS5532                                          2     2      0     159
                                              2 COMRAM     2     2      0
          _ReadRegister_4bytesCS5532
                   _TransferByte_SPI
         _WriteRegister_4bytesCS5532
 ---------------------------------------------------------------------------------
 (3) _ReceiveCMD_USART                                     2     2      0     235
                                              3 COMRAM     2     2      0
                     _ReadByte_USART
 ---------------------------------------------------------------------------------
 (4) _ReadByte_USART                                       3     3      0      71
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _InitCS5532                                           0     0      0      90
          _ReadRegister_4bytesCS5532
         _WriteRegister_4bytesCS5532
 ---------------------------------------------------------------------------------
 (4) _WriteRegister_4bytesCS5532                           1     1      0      45
                                              1 COMRAM     1     1      0
                   _TransferByte_SPI
 ---------------------------------------------------------------------------------
 (3) _CleanHolding                                         0     0      0    2986
                           _ReadAD24
 ---------------------------------------------------------------------------------
 (3) _ReadAD24                                            16    12      4    2986
                                              2 COMRAM    16    12      4
          _ReadRegister_4bytesCS5532
 ---------------------------------------------------------------------------------
 (4) _ReadRegister_4bytesCS5532                            1     1      0      45
                                              1 COMRAM     1     1      0
                   _TransferByte_SPI
 ---------------------------------------------------------------------------------
 (3) _TransferByte_SPI                                     2     2      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ClosePort_SPI
   _CloseSerialPort
   _ConfigPort_SPI
   _ConfigSerialPort
   _OpenPort_SPI
   _OpenSerialPort

 _Interrups (ROOT)
   _CleanHolding
     _ReadAD24
       _ReadRegister_4bytesCS5532
         _TransferByte_SPI
   _InitCS5532
     _ReadRegister_4bytesCS5532
     _WriteRegister_4bytesCS5532
       _TransferByte_SPI
   _ReadAD24
   _ReadRegister_4bytesCS5532
   _ReceiveCMD_USART
     _ReadByte_USART
   _ResetCS5532
     _ReadRegister_4bytesCS5532
     _TransferByte_SPI
     _WriteRegister_4bytesCS5532
   _TransferByte_SPI
   _TransmitCMD_USART
     _WriteByte_USART
     _print_string
       _WriteByte_USART
   _TransmitDAT_USART
     _WriteByte_USART
     _print_string
   _WriteByte_USART
   ___lldiv
   _print_string
   _print_value
     _WriteByte_USART

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      29        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      2      23       5       21.9%
BITBIGSFRll         81      0       0      27        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     1C      5B       1       96.8%
BITBIGSFRhhl        1A      0       0      17        0.0%
BITBIGSFRhlhlh      11      0       0      22        0.0%
BITBIGSFRhhh         D      0       0      16        0.0%
BITBIGSFRhll         C      0       0      23        0.0%
BITBIGSFRlhhh        8      0       0      24        0.0%
BITBIGSFRlhhl        6      0       0      25        0.0%
BITBIGSFRlhl         6      0       0      26        0.0%
BITBIGSFRhlhhh       4      0       0      18        0.0%
BITBIGSFRhlhhll      4      0       0      21        0.0%
BITBIGSFRhlhhlh      3      0       0      19        0.0%
BITBIGSFRhlhhll      1      0       0      20        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      7E      28        0.0%
DATA                 0      0      7E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Fri Jul 21 15:40:44 2023

                                                ReadAD24@ByteUpper 004B  
                                                  ?_OpenSerialPort 0040  
                                                      _SSPSTATbits 0FC7  
                                                              l310 16B8  
                                                              l231 16C0  
                                                              l313 16C8  
                                                              l225 1680  
                                                              l307 169A  
                                                              l228 16B0  
                                                              l187 144C  
                                                              l188 144E  
                                                              _PR2 0FCB  
                                                              u907 141E  
                                          TransmitDAT_USART@DAT_ID 0043  
                                                              wreg 0FE8  
                                           TransmitDAT_USART@conta 0044  
                                                             l2701 1686  
                                                             l2711 16C4  
                                                             l2703 1692  
                                                             l2721 1436  
                                                             l2713 13F0  
                                                             l2707 16B6  
                                                             l2731 1446  
                                                             l2723 143A  
                                                             l2715 1412  
                                                             l2709 16BC  
                                                             l2733 1448  
                                                             l2725 143E  
                                                             l2717 142E  
                                                             l2735 144A  
                                                             l2727 1440  
                                                             l2719 1432  
                                                             l2729 1444  
                                                             l2691 166C  
                                                             l2693 1678  
                                                             l2695 167E  
                                                             l2689 1668  
                                                             l2699 16AE  
                                                             STR_1 104F  
                                                             STR_2 107D  
                                                             STR_3 1064  
                                                             STR_4 107D  
                                                             STR_5 1064  
                                                             STR_6 1067  
                                                             STR_7 1064  
                                                             STR_8 1072  
                                                             STR_9 1064  
                                                             _LATA 0F89  
                                                             _LATB 0F8A  
                                                             _LATC 0F8B  
                                                             _TMR2 0FCC  
                                                             _main 13F0  
                                                             fsr2h 0FDA  
                                                             indf2 0FDF  
                                                             fsr1l 0FE1  
                                                             fsr2l 0FD9  
                                          __end_of_CloseSerialPort 16C4  
                                                             btemp 005C  
                                                             start 104A  
                                                     ___param_bank 0000  
                                        _ReadRegister_4bytesCS5532 1536  
                                                            ?_main 0040  
                                                  __end_of___lldiv 12F4  
                                                            _T0CON 0FD5  
                                                            _T2CON 0FCA  
                                                            i2l143 0214  
                                                            i2l240 132A  
                                                            i2l129 0940  
                                                            i2l330 1560  
                                                            i2l234 135A  
                                                            i2l316 1608  
                                                            i2l340 1232  
                                                            i2l244 1370  
                                                            i2l236 1306  
                                                            i2l324 13EC  
                                                            i2l333 15D6  
                                                            i2l245 137A  
                                                            i2l318 161C  
                                                            i2l254 162C  
                                                            i2l182 102A  
                                                            i2l319 161E  
                                                            i2l343 1662  
                                                            i2l327 158A  
                                                            i2l263 1532  
                                                            i2l336 1166  
                                                            i2l273 115C  
                                                            i2l257 1640  
                                                            i2l281 14A6  
                                                            i2l276 15B0  
                                                            i2l380 12F0  
                                                            i2l284 15FA  
                                                            i2l269 1156  
                                                            i2l373 12DE  
                                                            _RCREG 0FAE  
                                                            _RCSTA 0FAB  
                                                            _TMR0H 0FD7  
                                                            _TMR0L 0FD6  
                                                            _SPBRG 0FAF  
                                                            _PORTB 0F81  
                                                            _TRISA 0F92  
                                                            _TRISB 0F93  
                                                            _TRISC 0F94  
                                                            _TXREG 0FAD  
                                                            _TXSTA 0FAC  
                                                       _InitCS5532 1564  
                                                            tablat 0FF5  
                                                            ttemp5 005D  
                                                            ttemp6 0060  
                                                            ttemp7 0064  
                                                            status 0FD8  
                                                            wtemp8 005D  
                                                  __initialization 14AA  
                                                 __end_of_ReadAD24 1236  
                                                     __end_of_main 1456  
                                                    ??_ResetCS5532 0042  
                                                           ??_main 0081  
                                                    __activetblptr 0002  
                                                   _ReadByte_USART 12F4  
                                                           i2l2001 149A  
                                                           i2l2011 1384  
                                                           i2l2021 13BA  
                                                           i2l2013 138C  
                                                           i2l2005 1380  
                                                           i2l2101 005A  
                                                           i2l2031 13DA  
                                                           i2l2023 13C0  
                                                           i2l2015 138E  
                                                           i2l2111 0078  
                                                           i2l2103 0062  
                                                           i2l2041 156C  
                                                           i2l2033 13E4  
                                                           i2l2025 13C2  
                                                           i2l2017 13A2  
                                                           i2l2201 023A  
                                                           i2l2121 00A6  
                                                           i2l2113 007C  
                                                           i2l2105 006A  
                                                           i2l2051 1580  
                                                           i2l2043 156E  
                                                           i2l2035 13EA  
                                                           i2l2027 13C8  
                                                           i2l2019 13A8  
                                                           i2l2211 0266  
                                                           i2l2203 0246  
                                                           i2l2131 00CC  
                                                           i2l2123 00AE  
                                                           i2l2115 0086  
                                                           i2l2107 0070  
                                                           i2l2053 1584  
                                                           i2l2045 1574  
                                                           i2l2029 13D2  
                                                           i2l2301 0454  
                                                           i2l2221 0284  
                                                           i2l2213 0276  
                                                           i2l2205 024C  
                                                           i2l2141 00EE  
                                                           i2l2133 00D0  
                                                           i2l2125 00B2  
                                                           i2l2117 0092  
                                                           i2l2109 0074  
                                                           i2l2063 1646  
                                                           i2l2047 1578  
                                                           i2l2039 1566  
                                                           i2l2071 1238  
                                                           i2l2311 0488  
                                                           i2l2303 0458  
                                                           i2l2231 02D2  
                                                           i2l2223 02A0  
                                                           i2l2215 0280  
                                                           i2l2207 0250  
                                                           i2l2151 0104  
                                                           i2l2143 00F2  
                                                           i2l2135 00D4  
                                                           i2l2127 00C2  
                                                           i2l2119 009E  
                                                           i2l2065 164A  
                                                           i2l2049 157C  
                                                           i2l2081 128C  
                                                           i2l2073 1248  
                                                           i2l2057 15DC  
                                                           i2l2401 080C  
                                                           i2l2321 04C0  
                                                           i2l2305 045C  
                                                           i2l2233 02D6  
                                                           i2l2225 02B8  
                                                           i2l2209 0254  
                                                           i2l2161 0138  
                                                           i2l2153 010E  
                                                           i2l2145 00F6  
                                                           i2l2137 00D8  
                                                           i2l2129 00C8  
                                                           i2l2067 1658  
                                                           i2l2091 12D8  
                                                           i2l2083 1298  
                                                           i2l2075 1262  
                                                           i2l2059 15E8  
                                                           i2l2411 0862  
                                                           i2l2403 0812  
                                                           i2l2331 04F0  
                                                           i2l2323 04C2  
                                                           i2l2307 046E  
                                                           i2l2251 033C  
                                                           i2l2235 02E8  
                                                           i2l2227 02BA  
                                                           i2l2163 014A  
                                                           i2l2155 011A  
                                                           i2l2147 00FA  
                                                           i2l2139 00E8  
                                                           i2l2085 12BA  
                                                           i2l2077 126A  
                                                           i2l2501 0ACC  
                                                           i2l2421 08BE  
                                                           i2l2413 0876  
                                                           i2l2405 0826  
                                                           i2l2341 050E  
                                                           i2l2333 0500  
                                                           i2l2325 04D6  
                                                           i2l2317 048C  
                                                           i2l2309 047E  
                                                           i2l2261 037A  
                                                           i2l2253 0350  
                                                           i2l2245 0306  
                                                           i2l2237 02F8  
                                                           i2l2229 02CE  
                                                           i2l2181 019C  
                                                           i2l2173 015E  
                                                           i2l2165 0150  
                                                           i2l2157 0122  
                                                           i2l2149 00FE  
                                                           i2l2093 0024  
                                                           i2l2087 12CA  
                                                           i2l2079 1278  
                                                           i2l2511 0B02  
                                                           i2l2503 0AE4  
                                                           i2l2431 0966  
                                                           i2l2423 08C4  
                                                           i2l2415 088A  
                                                           i2l2407 083A  
                                                           i2l2351 055C  
                                                           i2l2343 052A  
                                                           i2l2335 050A  
                                                           i2l2327 04DA  
                                                           i2l2319 04A8  
                                                           i2l2271 03A4  
                                                           i2l2263 0384  
                                                           i2l2255 0354  
                                                           i2l2247 0322  
                                                           i2l2239 0302  
                                                           i2l2191 021A  
                                                           i2l2183 01B0  
                                                           i2l2175 0166  
                                                           i2l2167 015A  
                                                           i2l2159 0126  
                                                           i2l2095 0036  
                                                           i2l2089 12CC  
                                                           i2l2601 0CF0  
                                                           i2l2513 0B14  
                                                           i2l2505 0AE6  
                                                           i2l2441 097C  
                                                           i2l2433 096A  
                                                           i2l2425 08CC  
                                                           i2l2417 089E  
                                                           i2l2409 084E  
                                                           i2l2353 0560  
                                                           i2l2345 0542  
                                                           i2l2329 04DE  
                                                           i2l2281 03DA  
                                                           i2l2273 03BC  
                                                           i2l2257 0358  
                                                           i2l2249 033A  
                                                           i2l2193 0226  
                                                           i2l2185 01E4  
                                                           i2l2177 0180  
                                                           i2l2097 0048  
                                                           i2l2611 0D2E  
                                                           i2l2603 0D04  
                                                           i2l2531 0B7C  
                                                           i2l2523 0B32  
                                                           i2l2515 0B24  
                                                           i2l2507 0AFA  
                                                           i2l2451 09AC  
                                                           i2l2443 098E  
                                                           i2l2435 0972  
                                                           i2l2419 08B2  
                                                           i2l2371 05C8  
                                                           i2l2355 0572  
                                                           i2l2347 0544  
                                                           i2l2283 03EC  
                                                           i2l2275 03BE  
                                                           i2l2259 036A  
                                                           i2l2195 0228  
                                                           i2l2187 01FC  
                                                           i2l2179 019A  
                                                           i2l2099 0052  
                                                           i2l2427 08D2  
                                                           i2l1901 1220  
                                                           i2l2621 0D58  
                                                           i2l2613 0D38  
                                                           i2l2605 0D08  
                                                           i2l2541 0BB0  
                                                           i2l2533 0B80  
                                                           i2l2525 0B4E  
                                                           i2l2517 0B2E  
                                                           i2l2509 0AFE  
                                                           i2l2461 09FA  
                                                           i2l2453 09C8  
                                                           i2l2445 099E  
                                                           i2l2437 0974  
                                                           i2l2429 0954  
                                                           i2l2381 0606  
                                                           i2l2373 05DC  
                                                           i2l2365 0590  
                                                           i2l2357 0582  
                                                           i2l2349 0558  
                                                           i2l2293 040A  
                                                           i2l2285 03FC  
                                                           i2l2277 03D2  
                                                           i2l2269 0388  
                                                           i2l2197 022A  
                                                           i2l2189 0208  
                                                           i2l1911 150E  
                                                           i2l2631 0F34  
                                                           i2l2623 0D72  
                                                           i2l2607 0D0C  
                                                           i2l2551 0BE8  
                                                           i2l2535 0B84  
                                                           i2l2527 0B66  
                                                           i2l2463 09FE  
                                                           i2l2455 09E0  
                                                           i2l2447 09A8  
                                                           i2l2439 0978  
                                                           i2l2391 0630  
                                                           i2l2383 0610  
                                                           i2l2375 05E0  
                                                           i2l2367 05AC  
                                                           i2l2359 058C  
                                                           i2l2295 0426  
                                                           i2l2287 0406  
                                                           i2l2279 03D6  
                                                           i2l2199 0234  
                                                           i2l1921 132E  
                                                           i2l1913 12F6  
                                                           i2l1905 14F2  
                                                           i2l2641 0F8A  
                                                           i2l2633 0F3A  
                                                           i2l2625 0D74  
                                                           i2l2609 0D1E  
                                                           i2l2561 0C18  
                                                           i2l2553 0BEA  
                                                           i2l2537 0B96  
                                                           i2l2529 0B68  
                                                           i2l2481 0A64  
                                                           i2l2465 0A10  
                                                           i2l2457 09E2  
                                                           i2l2393 064A  
                                                           i2l2377 05E4  
                                                           i2l2369 05C6  
                                                           i2l2297 043E  
                                                           i2l1923 1330  
                                                           i2l1915 12FA  
                                                           i2l1907 14F6  
                                                           i2l2651 0FE6  
                                                           i2l2643 0F9E  
                                                           i2l2635 0F4E  
                                                           i2l2627 0D88  
                                                           i2l2619 0D3C  
                                                           i2l2571 0C36  
                                                           i2l2563 0C28  
                                                           i2l2555 0BFE  
                                                           i2l2547 0BB4  
                                                           i2l2539 0BA6  
                                                           i2l2491 0AA2  
                                                           i2l2483 0A78  
                                                           i2l2475 0A2E  
                                                           i2l2467 0A20  
                                                           i2l2459 09F6  
                                                           i2l2395 064C  
                                                           i2l2379 05F6  
                                                           i2l2299 0440  
                                                           i2l1933 15B8  
                                                           i2l1925 1342  
                                                           i2l1917 1300  
                                                           i2l1909 150A  
                                                           i2l2661 101E  
                                                           i2l2653 0FE8  
                                                           i2l2645 0FB2  
                                                           i2l2637 0F62  
                                                           i2l2629 0F28  
                                                           i2l2581 0C84  
                                                           i2l2573 0C52  
                                                           i2l2565 0C32  
                                                           i2l2557 0C02  
                                                           i2l2549 0BD0  
                                                           i2l2493 0AAC  
                                                           i2l2485 0A7C  
                                                           i2l2477 0A4A  
                                                           i2l2469 0A2A  
                                                           i2l2397 0660  
                                                           i2l2389 0614  
                                                           i2l1927 1354  
                                                           i2l1919 131A  
                                                           i2l1951 10B2  
                                                           i2l1943 108C  
                                                           i2l2655 0FFE  
                                                           i2l2647 0FC6  
                                                           i2l2639 0F76  
                                                           i2l2583 0C88  
                                                           i2l2575 0C6A  
                                                           i2l2559 0C06  
                                                           i2l2487 0A80  
                                                           i2l2479 0A62  
                                                           i2l2399 0800  
                                                           i2l1873 1602  
                                                           i2l1929 1378  
                                                           i2l1961 10FC  
                                                           i2l1953 10C4  
                                                           i2l1945 1094  
                                                           i2l1937 1088  
                                                           i2l1881 1626  
                                                           i2l2657 1002  
                                                           i2l2649 0FDA  
                                                           i2l2585 0C9A  
                                                           i2l2577 0C6C  
                                                           i2l2489 0A92  
                                                           i2l2761 08E8  
                                                           i2l1875 1604  
                                                           i2l1891 1184  
                                                           i2l1963 1112  
                                                           i2l1955 10DA  
                                                           i2l1883 162A  
                                                           i2l2659 1016  
                                                           i2l2595 0CB8  
                                                           i2l2587 0CAA  
                                                           i2l2579 0C80  
                                                           i2l2499 0AB0  
                                                           i2l1877 153A  
                                                           i2l1893 1188  
                                                           i2l1885 1166  
                                                           i2l1973 115A  
                                                           i2l1965 1118  
                                                           i2l1957 10E0  
                                                           i2l1949 10AE  
                                                           i2l1981 15A4  
                                                           i2l2597 0CD4  
                                                           i2l2589 0CB4  
                                                           i2l1895 118C  
                                                           i2l1887 117A  
                                                           i2l1967 112E  
                                                           i2l1959 10F6  
                                                           i2l2599 0CEE  
                                                           i2l1897 119C  
                                                           i2l1889 1180  
                                                           i2l1969 114E  
                                                           i2l1977 1592  
                                                           i2l1985 145A  
                                                           i2l1899 11B0  
                                                           i2l1979 159E  
                                                           i2l1995 1470  
                                                           i2l1987 1466  
                                                           i2l1997 1484  
                                                           i2l1989 146C  
                                                           i2l1999 1486  
                                                           _INTCON 0FF2  
                                                           _SSPBUF 0FC9  
                                                           _CmdGPS 003F  
                                                 ?_CloseSerialPort 0040  
                                                           _Data_G 006C  
                                                           _Data_X 0015  
                                                           _Data_Y 0011  
                                                           _Data_Z 000D  
                                         __end_of_ReceiveCMD_USART 1162  
                               __end_of_WriteRegister_4bytesCS5532 15DA  
                                       _WriteRegister_4bytesCS5532 15B4  
                                         __end_of_ConfigSerialPort 1684  
                                                      _ContaSample 003D  
                                                 print_value@Bytes 0045  
                                                        ??___lldiv 0048  
                                                           clear_0 14D0  
                                                           clear_1 14DC  
                                                       _SumData_TC 0029  
                                                       _SumData_TS 0025  
                                                 print_value@value 0041  
                                                           isa$std 0001  
                                                 _TransferByte_SPI 15FE  
                                                     _CleanHolding 1644  
                                                      Interrups@ID 005A  
                                           __end_of_ReadByte_USART 137E  
                                                     __mediumconst 0000  
                                                           tblptrh 0FF7  
                                                           tblptrl 0FF6  
                                                           tblptru 0FF8  
                                              __end_of_ResetCS5532 13F0  
                                                      ?_InitCS5532 0040  
                                                       __accesstop 0060  
                                          __end_of__initialization 14E2  
                                                     ?_print_value 0041  
                                                    ?_OpenPort_SPI 0040  
                                                    ___rparam_used 0001  
                                                 ??_OpenSerialPort 0081  
                                            __end_of_ClosePort_SPI 16CC  
                                                   __pcstackCOMRAM 0040  
                                                     __pidataBANK0 169E  
                                                  ?_ReadByte_USART 0040  
                                                __end_of_Interrups 104A  
                                                        ?_ReadAD24 0042  
                                                       __pbssBANK0 0060  
                                                   ??_OpenPort_SPI 0081  
                                                      _ResetCS5532 137E  
                                                          i2u50_40 1530  
                                                          i2u50_41 152A  
                                                          i2u51_40 1318  
                                                          i2u51_41 1312  
                                                          i2u52_40 132A  
                                                          i2u60_40 1110  
                                                          i2u52_41 1324  
                                                          i2u60_41 110A  
                                                          i2u53_40 1340  
                                                          i2u61_40 112C  
                                                          i2u53_41 133A  
                                                          i2u61_41 1126  
                                                          i2u46_40 161A  
                                                          i2u54_40 1354  
                                                          i2u62_40 1498  
                                                          i2u70_40 02CC  
                                                          i2u46_41 1614  
                                                          i2u54_41 134E  
                                                          i2u62_41 1492  
                                                          i2u70_41 02C6  
                                                          i2u55_40 136E  
                                                          i2u63_40 13A0  
                                                          i2u47_40 163E  
                                                          i2u71_40 034E  
                                                          i2u55_41 1368  
                                                          i2u63_41 139A  
                                                          i2u47_41 1638  
                                                          i2u71_41 0348  
                                                          i2u48_40 1178  
                                                          i2u56_40 10A8  
                                                          i2u64_40 1260  
                                                          i2u80_40 09F4  
                                                          i2u72_40 03D0  
                                                          i2u48_41 1172  
                                                          i2u56_41 10A2  
                                                          i2u64_41 125A  
                                                          i2u80_41 09EE  
                                                          i2u72_41 03CA  
                                                          i2u49_40 11AE  
                                                          i2u57_40 10C4  
                                                          i2u65_40 128A  
                                                          i2u81_40 0A76  
                                                          i2u73_40 0452  
                                                          i2u49_41 11A8  
                                                          i2u57_41 10BE  
                                                          i2u65_41 1284  
                                                          i2u81_41 0A70  
                                                          i2u73_41 044C  
                                                          i2u58_40 10D8  
                                                          i2u66_40 12B8  
                                                          i2u82_40 0AF8  
                                                          i2u74_40 04D4  
                                                          i2u58_41 10D2  
                                                          i2u66_41 12B2  
                                                          i2u82_41 0AF2  
                                                          i2u74_41 04CE  
                                                          i2u59_40 10F4  
                                                          i2u83_40 0B7A  
                                                          i2u75_40 0556  
                                                          i2u67_40 0034  
                                                          i2u59_41 10EE  
                                                          i2u83_41 0B74  
                                                          i2u75_41 0550  
                                                          i2u67_41 002E  
                                                          i2u91_47 00B8  
                                                          i2u84_40 0BFC  
                                                          i2u76_40 05DA  
                                                          i2u68_40 0046  
                                                          i2u84_41 0BF6  
                                                          i2u76_41 05D4  
                                                          i2u68_41 0040  
                                                          i2u92_47 00DE  
                                                          i2u85_40 0C7E  
                                                          i2u77_40 065E  
                                                          i2u69_40 01AE  
                                                          i2u85_41 0C78  
                                                          i2u77_41 0658  
                                                          i2u69_41 01A8  
                                                          i2u93_47 012C  
                                                          i2u86_40 0D02  
                                                          i2u78_40 0952  
                                                          i2u86_41 0CFC  
                                                          i2u78_41 094C  
                                                          i2u94_47 025A  
                                                          i2u87_40 0D86  
                                                          i2u79_40 0964  
                                                          i2u87_41 0D80  
                                                          i2u79_41 095E  
                                                          i2u95_47 02DC  
                                                          i2u88_40 0FFC  
                                                          i2u88_41 0FF6  
                                                          i2u96_47 035E  
                                                          i2u89_40 1014  
                                                          i2u89_41 100E  
                                                          i2u97_47 03E0  
                                                          i2u98_47 0462  
                                                          i2u99_47 04E4  
                                                       ??_ReadAD24 0046  
                                                          _Data_TC 0009  
                                                          _Data_TS 0005  
                                                          __Hparam 0000  
                                                          __Lparam 0000  
                                              ReadAD24@cmd_convert 0042  
                                                          ___lldiv 1236  
                                     ??_WriteRegister_4bytesCS5532 0041  
                                                     __psmallconst 104E  
                                                          __pcinit 14AA  
                                                          __ramtop 0600  
                                                          __ptext0 13F0  
                                                          __ptext1 16AC  
                                                          __ptext2 16B4  
                                                          __ptext3 1666  
                                                          __ptext4 1684  
                                                          __ptext5 16BC  
                                                          __ptext6 16C4  
                                                          __ptext8 15DA  
                                                          __ptext9 1236  
                                                        _T2CONbits 0FCA  
                                                      _SumData_GND 0070  
                                             end_of_initialization 14E2  
                                              WriteByte_USART@byte 0040  
                                         __end_of_TransferByte_SPI 1622  
                                                    __Lmediumconst 0000  
                                                ?_ReceiveCMD_USART 0040  
                                                  ___lldiv@divisor 0044  
                                                  ___lldiv@counter 004C  
                                                ?_ConfigSerialPort 0040  
                                               ??_ReceiveCMD_USART 0043  
                                                        _RCSTAbits 0FAB  
                                                          postdec1 0FE5  
                                                          postinc0 0FEE  
                                               ??_ConfigSerialPort 0081  
                                                ??_WriteByte_USART 0040  
                                                        _PORTCbits 0F82  
                                             __end_of_OpenPort_SPI 16BC  
                                                   _ConfigPort_SPI 1684  
                                                        _TRISCbits 0F94  
                                                    ?_print_string 0041  
                                                     ??_InitCS5532 0042  
                                                        _Data_AUX0 0001  
                                                        _Data_AUX1 0068  
                                                        _Data_AUX2 0064  
                                             TransferByte_SPI@data 0040  
                                                        _TXSTAbits 0FAC  
                                                        _BufferDAT 0074  
                                                 ??_ReadByte_USART 0040  
                                                        _BufferSPI 0039  
                                               __end_of_InitCS5532 158E  
                                           __end_of_ConfigPort_SPI 169E  
                                              start_initialization 14AA  
                                                   ??_print_string 0043  
                                          TransmitCMD_USART@CMD_ID 0043  
                                                        _Interrups 0008  
                                       ReceiveCMD_USART@conta_byte 0043  
                                                _TransmitDAT_USART 1456  
                                                        _SumData_X 0035  
                                                        _SumData_Y 0031  
                                                        _SumData_Z 002D  
                                                _TransmitCMD_USART 158E  
                                                      __pdataBANK0 0074  
                                               ?_TransmitDAT_USART 0040  
                                               ?_TransmitCMD_USART 0040  
                                                     ?_ResetCS5532 0040  
                                                  ?_ConfigPort_SPI 0040  
                                                      __pbssCOMRAM 0001  
                                              ??_TransmitDAT_USART 0043  
                                                    __pcstackBANK0 0081  
                                              ??_TransmitCMD_USART 0043  
                                                       ?_Interrups 0040  
                                        __end_of_TransmitDAT_USART 14AA  
                                        __end_of_TransmitCMD_USART 15B4  
                                                        __pintcode 0008  
                                                  print_string@str 0041  
                                                         ?___lldiv 0040  
                                                      __smallconst 104E  
                                                ??_CloseSerialPort 0081  
                                       ?_ReadRegister_4bytesCS5532 0040  
                                                         _LATAbits 0F89  
                                                         _LATBbits 0F8A  
                                                ?_TransferByte_SPI 0040  
                                                  _WriteByte_USART 1622  
                                                     _OpenPort_SPI 16B4  
                                                         _PIE1bits 0F9D  
                                               ??_TransferByte_SPI 0040  
                                                         i2u100_47 0566  
                                                         i2u101_47 05EA  
                                                         i2u110_47 13AE  
                                                         i2u102_47 0982  
                                                         i2u111_47 13CA  
                                                         i2u103_47 0A04  
                                                         i2u112_47 13DC  
                                                         i2u104_47 0A86  
                                                         i2u113_47 164C  
                                                         i2u105_47 0B08  
                                                         i2u106_47 0B8A  
                                                         i2u107_47 0C0C  
                                                         i2u108_47 0C8E  
                                                         i2u109_47 0D12  
                                                         _PIR1bits 0F9E  
                                                         _RCONbits 0FD0  
                                                    _ClosePort_SPI 16C4  
                                             __end_of_print_string 1536  
                                                    ?_CleanHolding 0040  
                                                       _ADCON1bits 0FC1  
                                                         _Data_GND 0060  
                                        ReceiveCMD_USART@data_byte 0044  
                                                        copy_data0 14BE  
                                                         _ReadAD24 1162  
                                                   Interrups@conta 005B  
                                                      ??_Interrups 0052  
                                                    ??_print_value 0045  
                                __end_of_ReadRegister_4bytesCS5532 1564  
                                                         __Hrparam 0000  
                                                         __Lrparam 0000  
                                 ReadRegister_4bytesCS5532@command 0041  
                                                   ?_ClosePort_SPI 0040  
                                                   ??_CleanHolding 0052  
                                                 ResetCS5532@conta 0043  
                                                         __ptext10 1456  
                                                         __ptext11 158E  
                                                         __ptext20 1162  
                                                         __ptext12 14F0  
                                                         __ptext21 1536  
                                                         __ptext13 1622  
                                                         __ptext22 15FE  
                                                         __ptext14 137E  
                                                         __ptext15 1086  
                                                         __ptext16 12F4  
                                                         __ptext17 1564  
                                                         __ptext18 15B4  
                                                         __ptext19 1644  
                                          __end_of_WriteByte_USART 1644  
                                                     _SumData_AUX0 0021  
                                                     _SumData_AUX1 001D  
                                                     _SumData_AUX2 0019  
                                              __end_of_print_value 15FE  
                                                         isa$xinst 0000  
                                                 ??_ConfigPort_SPI 0081  
                                      ?_WriteRegister_4bytesCS5532 0040  
                                                         int$flags 005C  
                                WriteRegister_4bytesCS5532@command 0041  
                                                   _OpenSerialPort 16AC  
                                             ReadAD24@flag_convert 004A  
                                                       _INTCONbits 0FF2  
                                                         intlevel2 16CC  
                                                 ___lldiv@dividend 0040  
                                              ReadByte_USART@Ready 0042  
                                                  ??_ClosePort_SPI 0081  
                                              ReadByte_USART@conta 0041  
                                                    _ControlSample 003E  
                                                  _CloseSerialPort 16BC  
                                           __end_of_OpenSerialPort 16B4  
                                                 _ReceiveCMD_USART 1086  
                                                 ___lldiv@quotient 0048  
                                                 _ConfigSerialPort 1666  
                                               ReadByte_USART@data 0040  
                                                      _SSPCON1bits 0FC6  
                                                     _print_string 14F0  
                                                 ?_WriteByte_USART 0040  
                                             __end_of_CleanHolding 1666  
                                      ??_ReadRegister_4bytesCS5532 0041  
                                                      _print_value 15DA  
                                                  ReadAD24@DataADC 004E  
                                                 ReadAD24@ByteHigh 004C  
                                                  ReadAD24@ByteLow 004D  
