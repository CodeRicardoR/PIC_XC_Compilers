

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Fri Jul 21 16:12:24 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og1 
     1                           	processor	18F258
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    35                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    36                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    37                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    38                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    39   000000                     
    40                           ; Version 2.40
    41                           ; Generated 17/11/2021 GMT
    42                           ; 
    43                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    44                           ; All rights reserved.
    45                           ; 
    46                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    47                           ; 
    48                           ; Redistribution and use in source and binary forms, with or without modification, are
    49                           ; permitted provided that the following conditions are met:
    50                           ; 
    51                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    52                           ;        conditions and the following disclaimer.
    53                           ; 
    54                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    55                           ;        of conditions and the following disclaimer in the documentation and/or other
    56                           ;        materials provided with the distribution. Publication is not required when
    57                           ;        this file is used in an embedded application.
    58                           ; 
    59                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    60                           ;        software without specific prior written permission.
    61                           ; 
    62                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    63                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    64                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    65                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    66                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    67                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    68                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    69                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    70                           ; 
    71                           ; 
    72                           ; Code-generator required, PIC18F258 Definitions
    73                           ; 
    74                           ; SFR Addresses
    75   000000                     _TRISB	set	3987
    76   000000                     _TXREG	set	4013
    77   000000                     _RCREG	set	4014
    78   000000                     _SPBRG	set	4015
    79   000000                     _INTCON	set	4082
    80   000000                     _TRISC	set	3988
    81   000000                     _LATB	set	3978
    82   000000                     _LATA	set	3977
    83   000000                     _TXSTAbits	set	4012
    84   000000                     _T2CONbits	set	4042
    85   000000                     _RCSTAbits	set	4011
    86   000000                     _PORTB	set	3969
    87   000000                     _PORTCbits	set	3970
    88   000000                     _TRISCbits	set	3988
    89   000000                     _PIE1bits	set	3997
    90   000000                     _RCSTA	set	4011
    91   000000                     _TXSTA	set	4012
    92   000000                     _SSPCON1bits	set	4038
    93   000000                     _SSPSTATbits	set	4039
    94   000000                     _SSPBUF	set	4041
    95   000000                     _RCONbits	set	4048
    96   000000                     _T0CON	set	4053
    97   000000                     _TMR0L	set	4054
    98   000000                     _TMR0H	set	4055
    99   000000                     _TMR2	set	4044
   100   000000                     _PR2	set	4043
   101   000000                     _T2CON	set	4042
   102   000000                     _LATAbits	set	3977
   103   000000                     _LATBbits	set	3978
   104   000000                     _ADCON1bits	set	4033
   105   000000                     _PIR1bits	set	3998
   106   000000                     _TRISA	set	3986
   107   000000                     _LATC	set	3979
   108   000000                     _INTCON2bits	set	4081
   109   000000                     _INTCONbits	set	4082
   110                           
   111                           	psect	smallconst
   112   00107C                     __psmallconst:
   113                           	callstack 0
   114   00107C  00                 	db	0
   115   00107D                     STR_5:
   116   00107D  47                 	db	71	;'G'
   117   00107E  2D                 	db	45
   118   00107F  4A                 	db	74	;'J'
   119   001080  52                 	db	82	;'R'
   120   001081  4F                 	db	79	;'O'
   121   001082  44                 	db	68	;'D'
   122   001083  41                 	db	65	;'A'
   123   001084  54                 	db	84	;'T'
   124   001085  45                 	db	69	;'E'
   125   001086  58                 	db	88	;'X'
   126   001087  58                 	db	88	;'X'
   127   001088  58                 	db	88	;'X'
   128   001089  58                 	db	88	;'X'
   129   00108A  58                 	db	88	;'X'
   130   00108B  58                 	db	88	;'X'
   131   00108C  58                 	db	88	;'X'
   132   00108D  58                 	db	88	;'X'
   133   00108E  58                 	db	88	;'X'
   134   00108F  58                 	db	88	;'X'
   135   001090  58                 	db	88	;'X'
   136   001091  58                 	db	88	;'X'
   137   001092  0A                 	db	10
   138   001093  0D                 	db	13
   139   001094  00                 	db	0
   140   001095                     STR_1:
   141   001095  4E                 	db	78	;'N'
   142   001096  4E                 	db	78	;'N'
   143   001097  4E                 	db	78	;'N'
   144   001098  4E                 	db	78	;'N'
   145   001099  4A                 	db	74	;'J'
   146   00109A  52                 	db	82	;'R'
   147   00109B  4F                 	db	79	;'O'
   148   00109C  43                 	db	67	;'C'
   149   00109D  4D                 	db	77	;'M'
   150   00109E  44                 	db	68	;'D'
   151   00109F  00                 	db	0
   152   0010A0                     STR_3:
   153   0010A0  4E                 	db	78	;'N'
   154   0010A1  4E                 	db	78	;'N'
   155   0010A2  4E                 	db	78	;'N'
   156   0010A3  4E                 	db	78	;'N'
   157   0010A4  4A                 	db	74	;'J'
   158   0010A5  52                 	db	82	;'R'
   159   0010A6  4F                 	db	79	;'O'
   160   0010A7  44                 	db	68	;'D'
   161   0010A8  41                 	db	65	;'A'
   162   0010A9  54                 	db	84	;'T'
   163   0010AA  00                 	db	0
   164   0010AB                     STR_6:
   165   0010AB  4A                 	db	74	;'J'
   166   0010AC  52                 	db	82	;'R'
   167   0010AD  4F                 	db	79	;'O'
   168   0010AE  41                 	db	65	;'A'
   169   0010AF  44                 	db	68	;'D'
   170   0010B0  51                 	db	81	;'Q'
   171   0010B1  00                 	db	0
   172   0010B2  00                 	db	0	; dummy byte at the end
   173   000000                     
   174                           ; #config settings
   175                           
   176                           	psect	cinit
   177   001638                     __pcinit:
   178                           	callstack 0
   179   001638                     start_initialization:
   180                           	callstack 0
   181   001638                     __initialization:
   182                           	callstack 0
   183                           
   184                           ; Clear objects allocated to BANK0 (41 bytes)
   185   001638  EE00  F060         	lfsr	0,__pbssBANK0
   186   00163C  0E29               	movlw	41
   187   00163E                     clear_0:
   188   00163E  6AEE               	clrf	postinc0,c
   189   001640  06E8               	decf	wreg,f,c
   190   001642  E1FD               	bnz	clear_0
   191                           
   192                           ; Clear objects allocated to COMRAM (55 bytes)
   193   001644  EE00  F001         	lfsr	0,__pbssCOMRAM
   194   001648  0E37               	movlw	55
   195   00164A                     clear_1:
   196   00164A  6AEE               	clrf	postinc0,c
   197   00164C  06E8               	decf	wreg,f,c
   198   00164E  E1FD               	bnz	clear_1
   199   001650                     end_of_initialization:
   200                           	callstack 0
   201   001650                     __end_of__initialization:
   202                           	callstack 0
   203   001650  905D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   204   001652  925D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   205   001654  0E00               	movlw	low (__Lmediumconst shr (0+16))
   206   001656  6EF8               	movwf	tblptru,c
   207   001658  0100               	movlb	0
   208   00165A  EF6E  F00A         	goto	_main	;jump to C main() function
   209                           
   210                           	psect	bssCOMRAM
   211   000001                     __pbssCOMRAM:
   212                           	callstack 0
   213   000001                     _Data_TC:
   214                           	callstack 0
   215   000001                     	ds	4
   216   000005                     _Data_Z:
   217                           	callstack 0
   218   000005                     	ds	4
   219   000009                     _Data_Y:
   220                           	callstack 0
   221   000009                     	ds	4
   222   00000D                     _Data_X:
   223                           	callstack 0
   224   00000D                     	ds	4
   225   000011                     _SumData_AUX2:
   226                           	callstack 0
   227   000011                     	ds	4
   228   000015                     _SumData_AUX1:
   229                           	callstack 0
   230   000015                     	ds	4
   231   000019                     _SumData_AUX0:
   232                           	callstack 0
   233   000019                     	ds	4
   234   00001D                     _SumData_TS:
   235                           	callstack 0
   236   00001D                     	ds	4
   237   000021                     _SumData_TC:
   238                           	callstack 0
   239   000021                     	ds	4
   240   000025                     _SumData_Z:
   241                           	callstack 0
   242   000025                     	ds	4
   243   000029                     _SumData_Y:
   244                           	callstack 0
   245   000029                     	ds	4
   246   00002D                     _SumData_X:
   247                           	callstack 0
   248   00002D                     	ds	4
   249   000031                     _BufferSPI:
   250                           	callstack 0
   251   000031                     	ds	4
   252   000035                     _ContaSample:
   253                           	callstack 0
   254   000035                     	ds	1
   255   000036                     _ControlSample:
   256                           	callstack 0
   257   000036                     	ds	1
   258   000037                     _CmdGPS:
   259                           	callstack 0
   260   000037                     	ds	1
   261                           
   262                           	psect	bssBANK0
   263   000060                     __pbssBANK0:
   264                           	callstack 0
   265   000060                     _BufferDAT:
   266                           	callstack 0
   267   000060                     	ds	13
   268   00006D                     _Data_GND:
   269                           	callstack 0
   270   00006D                     	ds	4
   271   000071                     _Data_AUX2:
   272                           	callstack 0
   273   000071                     	ds	4
   274   000075                     _Data_AUX1:
   275                           	callstack 0
   276   000075                     	ds	4
   277   000079                     _Data_AUX0:
   278                           	callstack 0
   279   000079                     	ds	4
   280   00007D                     _Data_G:
   281                           	callstack 0
   282   00007D                     	ds	4
   283   000081                     _Data_TS:
   284                           	callstack 0
   285   000081                     	ds	4
   286   000085                     _SumData_GND:
   287                           	callstack 0
   288   000085                     	ds	4
   289                           
   290                           	psect	cstackBANK0
   291   000089                     __pcstackBANK0:
   292                           	callstack 0
   293   000089                     ??_main:
   294                           
   295                           ; 1 bytes @ 0x0
   296   000089                     	ds	2
   297                           
   298                           	psect	cstackCOMRAM
   299   000038                     __pcstackCOMRAM:
   300                           	callstack 0
   301   000038                     ?___aldiv:
   302                           	callstack 0
   303   000038                     TransferByte_SPI@data:
   304                           	callstack 0
   305   000038                     ReadByte_USART@data:
   306                           	callstack 0
   307   000038                     WriteByte_USART@byte:
   308                           	callstack 0
   309   000038                     ___aldiv@dividend:
   310                           	callstack 0
   311                           
   312                           ; 4 bytes @ 0x0
   313   000038                     	ds	1
   314   000039                     ReadRegister_4bytesCS5532@command:
   315                           	callstack 0
   316   000039                     WriteRegister_4bytesCS5532@command:
   317                           	callstack 0
   318   000039                     ReadByte_USART@conta:
   319                           	callstack 0
   320   000039                     print_string@str:
   321                           	callstack 0
   322   000039                     print_value@value:
   323                           	callstack 0
   324                           
   325                           ; 4 bytes @ 0x1
   326   000039                     	ds	1
   327   00003A                     ??_ResetCS5532:
   328   00003A                     ReadByte_USART@Ready:
   329                           	callstack 0
   330                           
   331                           ; 1 bytes @ 0x2
   332   00003A                     	ds	1
   333   00003B                     ResetCS5532@conta:
   334                           	callstack 0
   335   00003B                     ReceiveCMD_USART@conta_byte:
   336                           	callstack 0
   337   00003B                     TransmitCMD_USART@CMD_ID:
   338                           	callstack 0
   339   00003B                     TransmitDAT_USART@DAT_ID:
   340                           	callstack 0
   341                           
   342                           ; 1 bytes @ 0x3
   343   00003B                     	ds	1
   344   00003C                     ReceiveCMD_USART@data_byte:
   345                           	callstack 0
   346   00003C                     TransmitDAT_USART@conta:
   347                           	callstack 0
   348   00003C                     ___aldiv@divisor:
   349                           	callstack 0
   350                           
   351                           ; 4 bytes @ 0x4
   352   00003C                     	ds	1
   353   00003D                     print_value@Bytes:
   354                           	callstack 0
   355                           
   356                           ; 3 bytes @ 0x5
   357   00003D                     	ds	3
   358   000040                     ___aldiv@counter:
   359                           	callstack 0
   360                           
   361                           ; 1 bytes @ 0x8
   362   000040                     	ds	1
   363   000041                     ___aldiv@sign:
   364                           	callstack 0
   365                           
   366                           ; 1 bytes @ 0x9
   367   000041                     	ds	1
   368   000042                     ___aldiv@quotient:
   369                           	callstack 0
   370                           
   371                           ; 4 bytes @ 0xA
   372   000042                     	ds	4
   373   000046                     ?_ReadAD24:
   374                           	callstack 0
   375   000046                     ReadAD24@cmd_convert:
   376                           	callstack 0
   377                           
   378                           ; 1 bytes @ 0xE
   379   000046                     	ds	4
   380   00004A                     ??_ReadAD24:
   381                           
   382                           ; 1 bytes @ 0x12
   383   00004A                     	ds	4
   384   00004E                     ReadAD24@flag_convert:
   385                           	callstack 0
   386                           
   387                           ; 1 bytes @ 0x16
   388   00004E                     	ds	1
   389   00004F                     ReadAD24@DataADC:
   390                           	callstack 0
   391                           
   392                           ; 4 bytes @ 0x17
   393   00004F                     	ds	4
   394   000053                     ??_Interrups:
   395                           
   396                           ; 1 bytes @ 0x1B
   397   000053                     	ds	8
   398   00005B                     Interrups@ID:
   399                           	callstack 0
   400                           
   401                           ; 1 bytes @ 0x23
   402   00005B                     	ds	1
   403   00005C                     Interrups@conta:
   404                           	callstack 0
   405                           
   406                           ; 1 bytes @ 0x24
   407   00005C                     	ds	1
   408                           
   409 ;;
   410 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   411 ;;
   412 ;; *************** function _main *****************
   413 ;; Defined at:
   414 ;;		line 391 in file "MagnetDigi24V1.c"
   415 ;; Parameters:    Size  Location     Type
   416 ;;		None
   417 ;; Auto vars:     Size  Location     Type
   418 ;;		None
   419 ;; Return value:  Size  Location     Type
   420 ;;                  1    wreg      void 
   421 ;; Registers used:
   422 ;;		wreg, status,2, cstack
   423 ;; Tracked objects:
   424 ;;		On entry : 0/0
   425 ;;		On exit  : 0/0
   426 ;;		Unchanged: 0/0
   427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   428 ;;      Params:         0       0       0       0       0       0       0
   429 ;;      Locals:         0       0       0       0       0       0       0
   430 ;;      Temps:          0       2       0       0       0       0       0
   431 ;;      Totals:         0       2       0       0       0       0       0
   432 ;;Total ram usage:        2 bytes
   433 ;; Hardware stack levels required when called: 6
   434 ;; This function calls:
   435 ;;		_ClosePort_SPI
   436 ;;		_CloseSerialPort
   437 ;;		_ConfigPort_SPI
   438 ;;		_ConfigSerialPort
   439 ;;		_OpenPort_SPI
   440 ;;		_OpenSerialPort
   441 ;; This function is called by:
   442 ;;		Startup code after reset
   443 ;; This function uses a non-reentrant model
   444 ;;
   445                           
   446                           	psect	text0
   447   0014DC                     __ptext0:
   448                           	callstack 0
   449   0014DC                     _main:
   450                           	callstack 25
   451   0014DC  FFFF               	dw	65535	; assembler added errata NOP
   452                           
   453                           ;MagnetDigi24V1.c: 395:     ADCON1bits.PCFG = 0x07;
   454   0014DE  50C1               	movf	193,w,c	;volatile
   455   0014E0  0BF0               	andlw	-16
   456   0014E2  0907               	iorlw	7
   457   0014E4  6EC1               	movwf	193,c	;volatile
   458                           
   459                           ;MagnetDigi24V1.c: 396:     LATA = 0;
   460   0014E6  0E00               	movlw	0
   461   0014E8  6E89               	movwf	137,c	;volatile
   462   0014EA                     
   463                           ;MagnetDigi24V1.c: 397:     LATAbits.LA0 = 1;
   464   0014EA  8089               	bsf	137,0,c	;volatile
   465                           
   466                           ;MagnetDigi24V1.c: 398:     LATB = 0;
   467   0014EC  0E00               	movlw	0
   468   0014EE  6E8A               	movwf	138,c	;volatile
   469                           
   470                           ;MagnetDigi24V1.c: 399:     LATC = 0;
   471   0014F0  0E00               	movlw	0
   472   0014F2  6E8B               	movwf	139,c	;volatile
   473                           
   474                           ;MagnetDigi24V1.c: 400:     TRISA = 0x01;
   475   0014F4  0E01               	movlw	1
   476   0014F6  6E92               	movwf	146,c	;volatile
   477                           
   478                           ;MagnetDigi24V1.c: 401:     TRISB = 0x01;
   479   0014F8  0E01               	movlw	1
   480   0014FA  6E93               	movwf	147,c	;volatile
   481   0014FC                     
   482                           ;MagnetDigi24V1.c: 402:     INTCON2bits.NOT_RBPU = 0;
   483   0014FC  9EF1               	bcf	241,7,c	;volatile
   484                           
   485                           ;MagnetDigi24V1.c: 403:     TRISC = 0x00;
   486   0014FE  0E00               	movlw	0
   487   001500  6E94               	movwf	148,c	;volatile
   488   001502                     
   489                           ;MagnetDigi24V1.c: 406:     ConfigSerialPort();
   490   001502  EC8A  F00B         	call	_ConfigSerialPort	;wreg free
   491                           
   492                           ;MagnetDigi24V1.c: 407:     OpenSerialPort();
   493   001506  ECB5  F00B         	call	_OpenSerialPort	;wreg free
   494   00150A                     
   495                           ;MagnetDigi24V1.c: 410:     ConfigPort_SPI();
   496   00150A  ECA8  F00B         	call	_ConfigPort_SPI	;wreg free
   497   00150E                     
   498                           ;MagnetDigi24V1.c: 411:     OpenPort_SPI();
   499   00150E  ECB9  F00B         	call	_OpenPort_SPI	;wreg free
   500   001512                     
   501                           ;MagnetDigi24V1.c: 413:     _delay((unsigned long)((100)*(9830400UL/4000.0)));
   502   001512  0E01               	movlw	1
   503   001514  0100               	movlb	0	; () banked
   504   001516  6F8A               	movwf	(??_main+1)& (0+255),b
   505   001518  0EF0               	movlw	240
   506   00151A  6F89               	movwf	??_main& (0+255),b
   507   00151C  0E86               	movlw	134
   508   00151E                     u967:
   509   00151E  FFFF               	dw	65535	; errata NOP
   510   001520  2EE8               	decfsz	wreg,f,c
   511   001522  D7FD               	bra	u967
   512   001524  2F89               	decfsz	??_main& (0+255),f,b
   513   001526  D7FB               	bra	u967
   514   001528  2F8A               	decfsz	(??_main+1)& (0+255),f,b
   515   00152A  D7F9               	bra	u967
   516   00152C  F000               	nop	
   517   00152E                     
   518                           ;MagnetDigi24V1.c: 416:     RCONbits.IPEN = 0;
   519   00152E  9ED0               	bcf	208,7,c	;volatile
   520   001530                     
   521                           ;MagnetDigi24V1.c: 417:     INTCON = 0x00;
   522   001530  0E00               	movlw	0
   523   001532  6EF2               	movwf	242,c	;volatile
   524   001534                     
   525                           ;MagnetDigi24V1.c: 420:     INTCONbits.PEIE = 1;
   526   001534  8CF2               	bsf	242,6,c	;volatile
   527   001536                     
   528                           ;MagnetDigi24V1.c: 421:     INTCONbits.GIE = 1;
   529   001536  8EF2               	bsf	242,7,c	;volatile
   530   001538                     
   531                           ;MagnetDigi24V1.c: 424:     LATAbits.LA2 = 0;
   532   001538  9489               	bcf	137,2,c	;volatile
   533   00153A                     
   534                           ;MagnetDigi24V1.c: 425:     LATBbits.LB7 = 0;
   535   00153A  9E8A               	bcf	138,7,c	;volatile
   536   00153C                     l434:
   537   00153C  FFFF               	dw	65535	; assembler added errata NOP
   538   00153E  EF9E  F00A         	goto	l434
   539   001542  EF3C  F008         	goto	start
   540   001546                     __end_of_main:
   541                           	callstack 0
   542                           
   543 ;; *************** function _OpenSerialPort *****************
   544 ;; Defined at:
   545 ;;		line 22 in file "LIB258_USART.c"
   546 ;; Parameters:    Size  Location     Type
   547 ;;		None
   548 ;; Auto vars:     Size  Location     Type
   549 ;;		None
   550 ;; Return value:  Size  Location     Type
   551 ;;                  1    wreg      void 
   552 ;; Registers used:
   553 ;;		None
   554 ;; Tracked objects:
   555 ;;		On entry : 0/0
   556 ;;		On exit  : 0/0
   557 ;;		Unchanged: 0/0
   558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   559 ;;      Params:         0       0       0       0       0       0       0
   560 ;;      Locals:         0       0       0       0       0       0       0
   561 ;;      Temps:          0       0       0       0       0       0       0
   562 ;;      Totals:         0       0       0       0       0       0       0
   563 ;;Total ram usage:        0 bytes
   564 ;; Hardware stack levels used: 1
   565 ;; Hardware stack levels required when called: 5
   566 ;; This function calls:
   567 ;;		Nothing
   568 ;; This function is called by:
   569 ;;		_main
   570 ;; This function uses a non-reentrant model
   571 ;;
   572                           
   573                           	psect	text1
   574   00176A                     __ptext1:
   575                           	callstack 0
   576   00176A                     _OpenSerialPort:
   577                           	callstack 0
   578   00176A  FFFF               	dw	65535	; assembler added errata NOP
   579   00176C                     
   580                           ;LIB258_USART.c: 24:     RCSTAbits.SPEN = 1;
   581   00176C  8EAB               	bsf	171,7,c	;volatile
   582   00176E  0012               	return		;funcret
   583   001770  FFFF               	dw	65535	; errata NOP
   584   001772                     __end_of_OpenSerialPort:
   585                           	callstack 0
   586                           
   587 ;; *************** function _OpenPort_SPI *****************
   588 ;; Defined at:
   589 ;;		line 19 in file "LIB258_SPI.c"
   590 ;; Parameters:    Size  Location     Type
   591 ;;		None
   592 ;; Auto vars:     Size  Location     Type
   593 ;;		None
   594 ;; Return value:  Size  Location     Type
   595 ;;                  1    wreg      void 
   596 ;; Registers used:
   597 ;;		None
   598 ;; Tracked objects:
   599 ;;		On entry : 0/0
   600 ;;		On exit  : 0/0
   601 ;;		Unchanged: 0/0
   602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   603 ;;      Params:         0       0       0       0       0       0       0
   604 ;;      Locals:         0       0       0       0       0       0       0
   605 ;;      Temps:          0       0       0       0       0       0       0
   606 ;;      Totals:         0       0       0       0       0       0       0
   607 ;;Total ram usage:        0 bytes
   608 ;; Hardware stack levels used: 1
   609 ;; Hardware stack levels required when called: 5
   610 ;; This function calls:
   611 ;;		Nothing
   612 ;; This function is called by:
   613 ;;		_main
   614 ;; This function uses a non-reentrant model
   615 ;;
   616                           
   617                           	psect	text2
   618   001772                     __ptext2:
   619                           	callstack 0
   620   001772                     _OpenPort_SPI:
   621                           	callstack 0
   622   001772  FFFF               	dw	65535	; assembler added errata NOP
   623   001774                     
   624                           ;LIB258_SPI.c: 21:     SSPCON1bits.SSPEN = 1;
   625   001774  8AC6               	bsf	198,5,c	;volatile
   626   001776  0012               	return		;funcret
   627   001778  FFFF               	dw	65535	; errata NOP
   628   00177A                     __end_of_OpenPort_SPI:
   629                           	callstack 0
   630                           
   631 ;; *************** function _ConfigSerialPort *****************
   632 ;; Defined at:
   633 ;;		line 4 in file "LIB258_USART.c"
   634 ;; Parameters:    Size  Location     Type
   635 ;;		None
   636 ;; Auto vars:     Size  Location     Type
   637 ;;		None
   638 ;; Return value:  Size  Location     Type
   639 ;;                  1    wreg      void 
   640 ;; Registers used:
   641 ;;		wreg, status,2
   642 ;; Tracked objects:
   643 ;;		On entry : 0/0
   644 ;;		On exit  : 0/0
   645 ;;		Unchanged: 0/0
   646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   647 ;;      Params:         0       0       0       0       0       0       0
   648 ;;      Locals:         0       0       0       0       0       0       0
   649 ;;      Temps:          0       0       0       0       0       0       0
   650 ;;      Totals:         0       0       0       0       0       0       0
   651 ;;Total ram usage:        0 bytes
   652 ;; Hardware stack levels used: 1
   653 ;; Hardware stack levels required when called: 5
   654 ;; This function calls:
   655 ;;		Nothing
   656 ;; This function is called by:
   657 ;;		_main
   658 ;; This function uses a non-reentrant model
   659 ;;
   660                           
   661                           	psect	text3
   662   001714                     __ptext3:
   663                           	callstack 0
   664   001714                     _ConfigSerialPort:
   665                           	callstack 0
   666   001714  FFFF               	dw	65535	; assembler added errata NOP
   667   001716                     
   668                           ;LIB258_USART.c: 6:     TRISCbits.TRISC6 = 0;
   669   001716  9C94               	bcf	148,6,c	;volatile
   670                           
   671                           ;LIB258_USART.c: 7:     TRISCbits.TRISC7 = 1;
   672   001718  8E94               	bsf	148,7,c	;volatile
   673   00171A                     
   674                           ;LIB258_USART.c: 9:     TXSTA = 0b00100100;
   675   00171A  0E24               	movlw	36
   676   00171C  6EAC               	movwf	172,c	;volatile
   677                           
   678                           ;LIB258_USART.c: 10:     RCSTA = 0b00010000;
   679   00171E  0E10               	movlw	16
   680   001720  6EAB               	movwf	171,c	;volatile
   681                           
   682                           ;LIB258_USART.c: 12:     SPBRG = 63;
   683   001722  0E3F               	movlw	63
   684   001724  6EAF               	movwf	175,c	;volatile
   685   001726                     
   686                           ;LIB258_USART.c: 14:     PIE1bits.RCIE = 1;
   687   001726  8A9D               	bsf	157,5,c	;volatile
   688                           
   689                           ;LIB258_USART.c: 16:     T2CON = 0b01111011;
   690   001728  0E7B               	movlw	123
   691   00172A  6ECA               	movwf	202,c	;volatile
   692   00172C                     
   693                           ;LIB258_USART.c: 17:     PR2 = 0xFF;
   694   00172C  68CB               	setf	203,c	;volatile
   695   00172E  0012               	return		;funcret
   696   001730  FFFF               	dw	65535	; errata NOP
   697   001732                     __end_of_ConfigSerialPort:
   698                           	callstack 0
   699                           
   700 ;; *************** function _ConfigPort_SPI *****************
   701 ;; Defined at:
   702 ;;		line 5 in file "LIB258_SPI.c"
   703 ;; Parameters:    Size  Location     Type
   704 ;;		None
   705 ;; Auto vars:     Size  Location     Type
   706 ;;		None
   707 ;; Return value:  Size  Location     Type
   708 ;;                  1    wreg      void 
   709 ;; Registers used:
   710 ;;		wreg, status,2
   711 ;; Tracked objects:
   712 ;;		On entry : 0/0
   713 ;;		On exit  : 0/0
   714 ;;		Unchanged: 0/0
   715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   716 ;;      Params:         0       0       0       0       0       0       0
   717 ;;      Locals:         0       0       0       0       0       0       0
   718 ;;      Temps:          0       0       0       0       0       0       0
   719 ;;      Totals:         0       0       0       0       0       0       0
   720 ;;Total ram usage:        0 bytes
   721 ;; Hardware stack levels used: 1
   722 ;; Hardware stack levels required when called: 5
   723 ;; This function calls:
   724 ;;		Nothing
   725 ;; This function is called by:
   726 ;;		_main
   727 ;; This function uses a non-reentrant model
   728 ;;
   729                           
   730                           	psect	text4
   731   001750                     __ptext4:
   732                           	callstack 0
   733   001750                     _ConfigPort_SPI:
   734                           	callstack 0
   735   001750  FFFF               	dw	65535	; assembler added errata NOP
   736   001752                     
   737                           ;LIB258_SPI.c: 7:     TRISCbits.TRISC3 = 0;
   738   001752  9694               	bcf	148,3,c	;volatile
   739                           
   740                           ;LIB258_SPI.c: 8:     TRISCbits.TRISC4 = 1;
   741   001754  8894               	bsf	148,4,c	;volatile
   742                           
   743                           ;LIB258_SPI.c: 9:     TRISCbits.TRISC5 = 0;
   744   001756  9A94               	bcf	148,5,c	;volatile
   745                           
   746                           ;LIB258_SPI.c: 11:     SSPSTATbits.SMP = 0;
   747   001758  9EC7               	bcf	199,7,c	;volatile
   748                           
   749                           ;LIB258_SPI.c: 12:     SSPSTATbits.CKE = 1;
   750   00175A  8CC7               	bsf	199,6,c	;volatile
   751                           
   752                           ;LIB258_SPI.c: 13:     SSPCON1bits.CKP = 0;
   753   00175C  98C6               	bcf	198,4,c	;volatile
   754   00175E                     
   755                           ;LIB258_SPI.c: 14:     SSPCON1bits.SSPM = 2;
   756   00175E  50C6               	movf	198,w,c	;volatile
   757   001760  0BF0               	andlw	-16
   758   001762  0902               	iorlw	2
   759   001764  6EC6               	movwf	198,c	;volatile
   760   001766  0012               	return		;funcret
   761   001768  FFFF               	dw	65535	; errata NOP
   762   00176A                     __end_of_ConfigPort_SPI:
   763                           	callstack 0
   764                           
   765 ;; *************** function _CloseSerialPort *****************
   766 ;; Defined at:
   767 ;;		line 29 in file "LIB258_USART.c"
   768 ;; Parameters:    Size  Location     Type
   769 ;;		None
   770 ;; Auto vars:     Size  Location     Type
   771 ;;		None
   772 ;; Return value:  Size  Location     Type
   773 ;;                  1    wreg      void 
   774 ;; Registers used:
   775 ;;		None
   776 ;; Tracked objects:
   777 ;;		On entry : 0/0
   778 ;;		On exit  : 0/0
   779 ;;		Unchanged: 0/0
   780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   781 ;;      Params:         0       0       0       0       0       0       0
   782 ;;      Locals:         0       0       0       0       0       0       0
   783 ;;      Temps:          0       0       0       0       0       0       0
   784 ;;      Totals:         0       0       0       0       0       0       0
   785 ;;Total ram usage:        0 bytes
   786 ;; Hardware stack levels used: 1
   787 ;; Hardware stack levels required when called: 5
   788 ;; This function calls:
   789 ;;		Nothing
   790 ;; This function is called by:
   791 ;;		_main
   792 ;; This function uses a non-reentrant model
   793 ;;
   794                           
   795                           	psect	text5
   796   00177A                     __ptext5:
   797                           	callstack 0
   798   00177A                     _CloseSerialPort:
   799                           	callstack 25
   800   00177A  FFFF               	dw	65535	; assembler added errata NOP
   801                           
   802                           ;LIB258_USART.c: 31:     RCSTAbits.SPEN = 0;
   803   00177C  9EAB               	bcf	171,7,c	;volatile
   804   00177E  0012               	return		;funcret
   805   001780  FFFF               	dw	65535	; errata NOP
   806   001782                     __end_of_CloseSerialPort:
   807                           	callstack 0
   808                           
   809 ;; *************** function _ClosePort_SPI *****************
   810 ;; Defined at:
   811 ;;		line 26 in file "LIB258_SPI.c"
   812 ;; Parameters:    Size  Location     Type
   813 ;;		None
   814 ;; Auto vars:     Size  Location     Type
   815 ;;		None
   816 ;; Return value:  Size  Location     Type
   817 ;;                  1    wreg      void 
   818 ;; Registers used:
   819 ;;		None
   820 ;; Tracked objects:
   821 ;;		On entry : 0/0
   822 ;;		On exit  : 0/0
   823 ;;		Unchanged: 0/0
   824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   825 ;;      Params:         0       0       0       0       0       0       0
   826 ;;      Locals:         0       0       0       0       0       0       0
   827 ;;      Temps:          0       0       0       0       0       0       0
   828 ;;      Totals:         0       0       0       0       0       0       0
   829 ;;Total ram usage:        0 bytes
   830 ;; Hardware stack levels used: 1
   831 ;; Hardware stack levels required when called: 5
   832 ;; This function calls:
   833 ;;		Nothing
   834 ;; This function is called by:
   835 ;;		_main
   836 ;; This function uses a non-reentrant model
   837 ;;
   838                           
   839                           	psect	text6
   840   001782                     __ptext6:
   841                           	callstack 0
   842   001782                     _ClosePort_SPI:
   843                           	callstack 25
   844   001782  FFFF               	dw	65535	; assembler added errata NOP
   845                           
   846                           ;LIB258_SPI.c: 28:     SSPCON1bits.SSPEN = 0;
   847   001784  9AC6               	bcf	198,5,c	;volatile
   848   001786  0012               	return		;funcret
   849   001788  FFFF               	dw	65535	; errata NOP
   850   00178A                     __end_of_ClosePort_SPI:
   851                           	callstack 0
   852                           
   853 ;; *************** function _Interrups *****************
   854 ;; Defined at:
   855 ;;		line 12 in file "MagnetDigi24V1.c"
   856 ;; Parameters:    Size  Location     Type
   857 ;;		None
   858 ;; Auto vars:     Size  Location     Type
   859 ;;  conta           1   36[COMRAM] unsigned char 
   860 ;;  ID              1   35[COMRAM] unsigned char 
   861 ;; Return value:  Size  Location     Type
   862 ;;                  1    wreg      void 
   863 ;; Registers used:
   864 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   865 ;; Tracked objects:
   866 ;;		On entry : 0/0
   867 ;;		On exit  : 0/0
   868 ;;		Unchanged: 0/0
   869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   870 ;;      Params:         0       0       0       0       0       0       0
   871 ;;      Locals:         2       0       0       0       0       0       0
   872 ;;      Temps:          8       0       0       0       0       0       0
   873 ;;      Totals:        10       0       0       0       0       0       0
   874 ;;Total ram usage:       10 bytes
   875 ;; Hardware stack levels used: 1
   876 ;; Hardware stack levels required when called: 4
   877 ;; This function calls:
   878 ;;		_CleanHolding
   879 ;;		_InitCS5532
   880 ;;		_ReadAD24
   881 ;;		_ReadRegister_4bytesCS5532
   882 ;;		_ReceiveCMD_USART
   883 ;;		_ResetCS5532
   884 ;;		_TransferByte_SPI
   885 ;;		_TransmitCMD_USART
   886 ;;		_TransmitDAT_USART
   887 ;;		_WriteByte_USART
   888 ;;		___aldiv
   889 ;;		_print_string
   890 ;;		_print_value
   891 ;; This function is called by:
   892 ;;		Interrupt level 2
   893 ;; This function uses a non-reentrant model
   894 ;;
   895                           
   896                           	psect	intcode
   897   000008                     __pintcode:
   898                           	callstack 0
   899   000008                     _Interrups:
   900                           	callstack 0
   901   000008  FFFF               	dw	65535	; assembler added errata NOP
   902                           
   903                           ;incstack = 0
   904   00000A  825D               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
   905   00000C  CFD9 F055          	movff	fsr2l,??_Interrups+2
   906   000010  CFDA F056          	movff	fsr2h,??_Interrups+3
   907   000014  CFF6 F057          	movff	tblptrl,??_Interrups+4
   908   000018  CFF7 F058          	movff	tblptrh,??_Interrups+5
   909   00001C  CFF8 F059          	movff	tblptru,??_Interrups+6
   910   000020  CFF5 F05A          	movff	tablat,??_Interrups+7
   911   000024                     
   912                           ;MagnetDigi24V1.c: 13:     unsigned char ID, conta;;MagnetDigi24V1.c: 15:     if((PIE1bi
      +                          ts.RC1IE == 1) && (PIR1bits.RC1IF == 1)){
   913   000024  AA9D               	btfss	157,5,c	;volatile
   914   000026  EF17  F000         	goto	i2u73_41
   915   00002A  EF1A  F000         	goto	i2u73_40
   916   00002E                     i2u73_41:
   917   00002E  FFFF               	dw	65535	; assembler added errata NOP
   918   000030  EFAD  F004         	goto	i2l376
   919   000034                     i2u73_40:
   920   000034  FFFF               	dw	65535	; assembler added errata NOP
   921   000036  AA9E               	btfss	158,5,c	;volatile
   922   000038  EF20  F000         	goto	i2u74_41
   923   00003C  EF23  F000         	goto	i2u74_40
   924   000040                     i2u74_41:
   925   000040  FFFF               	dw	65535	; assembler added errata NOP
   926   000042  EFAD  F004         	goto	i2l376
   927   000046                     i2u74_40:
   928   000046  FFFF               	dw	65535	; assembler added errata NOP
   929   000048                     
   930                           ;MagnetDigi24V1.c: 16:         ID = ReceiveCMD_USART();
   931   000048  EC81  F009         	call	_ReceiveCMD_USART	;wreg free
   932   00004C  6E5B               	movwf	Interrups@ID^0,c
   933                           
   934                           ;MagnetDigi24V1.c: 17:         switch(ID){
   935   00004E  EF76  F004         	goto	i2l2559
   936   000052                     i2l2231:
   937   000052  FFFF               	dw	65535	; assembler added errata NOP
   938                           
   939                           ;MagnetDigi24V1.c: 19:                 TransmitCMD_USART('5');
   940   000054  0E35               	movlw	53
   941   000056  EC2F  F00B         	call	_TransmitCMD_USART
   942   00005A                     
   943                           ;MagnetDigi24V1.c: 20:                 ControlSample = 0;
   944   00005A  0E00               	movlw	0
   945   00005C  6E36               	movwf	_ControlSample^0,c
   946                           
   947                           ;MagnetDigi24V1.c: 21:                 break;
   948   00005E  EF2C  F008         	goto	i2l429
   949   000062                     i2l2235:
   950   000062  FFFF               	dw	65535	; assembler added errata NOP
   951                           
   952                           ;MagnetDigi24V1.c: 24:                 TransmitCMD_USART('0');
   953   000064  0E30               	movlw	48
   954   000066  EC2F  F00B         	call	_TransmitCMD_USART
   955   00006A                     
   956                           ;MagnetDigi24V1.c: 25:                 BufferDAT[0] = 'V';
   957   00006A  0E56               	movlw	86
   958   00006C  0100               	movlb	0	; () banked
   959   00006E  6F60               	movwf	_BufferDAT& (0+255),b
   960   000070                     
   961                           ; BSR set to: 0
   962                           ;MagnetDigi24V1.c: 26:                 BufferDAT[1] = '2';
   963   000070  0E32               	movlw	50
   964   000072  6F61               	movwf	(_BufferDAT+1)& (0+255),b
   965   000074                     
   966                           ; BSR set to: 0
   967                           ;MagnetDigi24V1.c: 27:                 BufferDAT[2] = '0';
   968   000074  0E30               	movlw	48
   969   000076  6F62               	movwf	(_BufferDAT+2)& (0+255),b
   970   000078                     
   971                           ; BSR set to: 0
   972                           ;MagnetDigi24V1.c: 28:                 BufferDAT[12] = '\0';
   973   000078  0E00               	movlw	0
   974   00007A  6F6C               	movwf	(_BufferDAT+12)& (0+255),b
   975   00007C                     
   976                           ; BSR set to: 0
   977                           ;MagnetDigi24V1.c: 29:                 TransmitDAT_USART('0');
   978   00007C  0E30               	movlw	48
   979   00007E  ECA3  F00A         	call	_TransmitDAT_USART
   980                           
   981                           ;MagnetDigi24V1.c: 30:                 break;
   982   000082  EF2C  F008         	goto	i2l429
   983   000086                     i2l2247:
   984   000086  FFFF               	dw	65535	; assembler added errata NOP
   985                           
   986                           ;MagnetDigi24V1.c: 33:                 TransmitCMD_USART('1');
   987   000088  0E31               	movlw	49
   988   00008A  EC2F  F00B         	call	_TransmitCMD_USART
   989                           
   990                           ;MagnetDigi24V1.c: 37:                 break;
   991   00008E  EF2C  F008         	goto	i2l429
   992   000092                     i2l2249:
   993   000092  FFFF               	dw	65535	; assembler added errata NOP
   994                           
   995                           ;MagnetDigi24V1.c: 40:                 TransmitCMD_USART('2');
   996   000094  0E32               	movlw	50
   997   000096  EC2F  F00B         	call	_TransmitCMD_USART
   998                           
   999                           ;MagnetDigi24V1.c: 44:                 break;
  1000   00009A  EF2C  F008         	goto	i2l429
  1001   00009E                     i2l2251:
  1002   00009E  FFFF               	dw	65535	; assembler added errata NOP
  1003                           
  1004                           ;MagnetDigi24V1.c: 47:                 TransmitCMD_USART('3');
  1005   0000A0  0E33               	movlw	51
  1006   0000A2  EC2F  F00B         	call	_TransmitCMD_USART
  1007   0000A6                     
  1008                           ;MagnetDigi24V1.c: 50:                 BufferDAT[0] = ResetCS5532();
  1009   0000A6  EC34  F00A         	call	_ResetCS5532	;wreg free
  1010   0000AA  0100               	movlb	0	; () banked
  1011   0000AC  6F60               	movwf	_BufferDAT& (0+255),b
  1012   0000AE                     
  1013                           ; BSR set to: 0
  1014                           ;MagnetDigi24V1.c: 51:                 InitCS5532();
  1015   0000AE  EC07  F00B         	call	_InitCS5532	;wreg free
  1016   0000B2                     
  1017                           ;MagnetDigi24V1.c: 53:                 _delay((unsigned long)((1)*(9830400UL/4000.0)));
  1018   0000B2  0E03               	movlw	3
  1019   0000B4  6E53               	movwf	??_Interrups^0,c
  1020   0000B6  0E64               	movlw	100
  1021   0000B8                     i2u97_47:
  1022   0000B8  FFFF               	dw	65535	; errata NOP
  1023   0000BA  2EE8               	decfsz	wreg,f,c
  1024   0000BC  D7FD               	bra	i2u97_47
  1025   0000BE  2E53               	decfsz	??_Interrups^0,f,c
  1026   0000C0  D7FB               	bra	i2u97_47
  1027   0000C2  F000               	nop	
  1028   0000C4                     
  1029                           ;MagnetDigi24V1.c: 55:                 ReadRegister_4bytesCS5532(0x09);
  1030   0000C4  0E09               	movlw	9
  1031   0000C6  ECF0  F00A         	call	_ReadRegister_4bytesCS5532
  1032   0000CA                     
  1033                           ;MagnetDigi24V1.c: 56:                 BufferDAT[1] = BufferSPI[0];
  1034   0000CA  C031  F061         	movff	_BufferSPI,_BufferDAT+1
  1035   0000CE                     
  1036                           ;MagnetDigi24V1.c: 57:                 BufferDAT[2] = BufferSPI[1];
  1037   0000CE  C032  F062         	movff	_BufferSPI+1,_BufferDAT+2
  1038   0000D2                     
  1039                           ;MagnetDigi24V1.c: 58:                 BufferDAT[3] = BufferSPI[2];
  1040   0000D2  C033  F063         	movff	_BufferSPI+2,_BufferDAT+3
  1041   0000D6                     
  1042                           ;MagnetDigi24V1.c: 59:                 BufferDAT[4] = BufferSPI[3];
  1043   0000D6  C034  F064         	movff	_BufferSPI+3,_BufferDAT+4
  1044   0000DA                     
  1045                           ;MagnetDigi24V1.c: 61:                 _delay((unsigned long)((1)*(9830400UL/4000.0)));
  1046   0000DA  0E03               	movlw	3
  1047   0000DC  6E53               	movwf	??_Interrups^0,c
  1048   0000DE  0E64               	movlw	100
  1049   0000E0                     i2u98_47:
  1050   0000E0  FFFF               	dw	65535	; errata NOP
  1051   0000E2  2EE8               	decfsz	wreg,f,c
  1052   0000E4  D7FD               	bra	i2u98_47
  1053   0000E6  2E53               	decfsz	??_Interrups^0,f,c
  1054   0000E8  D7FB               	bra	i2u98_47
  1055   0000EA  F000               	nop	
  1056   0000EC                     
  1057                           ;MagnetDigi24V1.c: 63:                 ReadRegister_4bytesCS5532(0x0A);
  1058   0000EC  0E0A               	movlw	10
  1059   0000EE  ECF0  F00A         	call	_ReadRegister_4bytesCS5532
  1060   0000F2                     
  1061                           ;MagnetDigi24V1.c: 64:                 BufferDAT[5] = BufferSPI[0];
  1062   0000F2  C031  F065         	movff	_BufferSPI,_BufferDAT+5
  1063   0000F6                     
  1064                           ;MagnetDigi24V1.c: 65:                 BufferDAT[6] = BufferSPI[1];
  1065   0000F6  C032  F066         	movff	_BufferSPI+1,_BufferDAT+6
  1066   0000FA                     
  1067                           ;MagnetDigi24V1.c: 66:                 BufferDAT[7] = BufferSPI[2];
  1068   0000FA  C033  F067         	movff	_BufferSPI+2,_BufferDAT+7
  1069   0000FE                     
  1070                           ;MagnetDigi24V1.c: 67:                 BufferDAT[8] = BufferSPI[3];
  1071   0000FE  C034  F068         	movff	_BufferSPI+3,_BufferDAT+8
  1072   000102                     
  1073                           ;MagnetDigi24V1.c: 68:                 BufferDAT[12] = '\0';
  1074   000102  0E00               	movlw	0
  1075   000104  0100               	movlb	0	; () banked
  1076   000106  6F6C               	movwf	(_BufferDAT+12)& (0+255),b
  1077   000108                     
  1078                           ; BSR set to: 0
  1079                           ;MagnetDigi24V1.c: 69:                 TransmitDAT_USART('3');
  1080   000108  0E33               	movlw	51
  1081   00010A  ECA3  F00A         	call	_TransmitDAT_USART
  1082                           
  1083                           ;MagnetDigi24V1.c: 71:                 break;
  1084   00010E  EF2C  F008         	goto	i2l429
  1085   000112                     i2l2285:
  1086   000112  FFFF               	dw	65535	; assembler added errata NOP
  1087                           
  1088                           ;MagnetDigi24V1.c: 74:                 TransmitCMD_USART('4');
  1089   000114  0E34               	movlw	52
  1090   000116  EC2F  F00B         	call	_TransmitCMD_USART
  1091                           
  1092                           ;MagnetDigi24V1.c: 78:                 break;
  1093   00011A  EF2C  F008         	goto	i2l429
  1094   00011E                     i2l2287:
  1095   00011E  FFFF               	dw	65535	; assembler added errata NOP
  1096                           
  1097                           ;MagnetDigi24V1.c: 81:                 TransmitCMD_USART('6');
  1098   000120  0E36               	movlw	54
  1099   000122  EC2F  F00B         	call	_TransmitCMD_USART
  1100   000126                     
  1101                           ;MagnetDigi24V1.c: 83:                 PORTB = 0x0C;
  1102   000126  0E0C               	movlw	12
  1103   000128  6E81               	movwf	129,c	;volatile
  1104   00012A                     
  1105                           ;MagnetDigi24V1.c: 84:                 _delay((unsigned long)((7)*(9830400UL/4000.0)));
  1106   00012A  0E11               	movlw	17
  1107   00012C  6E53               	movwf	??_Interrups^0,c
  1108   00012E  0EC3               	movlw	195
  1109   000130                     i2u99_47:
  1110   000130  FFFF               	dw	65535	; errata NOP
  1111   000132  2EE8               	decfsz	wreg,f,c
  1112   000134  D7FD               	bra	i2u99_47
  1113   000136  2E53               	decfsz	??_Interrups^0,f,c
  1114   000138  D7FB               	bra	i2u99_47
  1115   00013A  D000               	nop2	
  1116   00013C  F000               	nop	
  1117   00013E                     
  1118                           ;MagnetDigi24V1.c: 85:                 SumData_GND = 0;
  1119   00013E  0E00               	movlw	0
  1120   000140  0100               	movlb	0	; () banked
  1121   000142  6F85               	movwf	_SumData_GND& (0+255),b
  1122   000144  0E00               	movlw	0
  1123   000146  6F86               	movwf	(_SumData_GND+1)& (0+255),b
  1124   000148  0E00               	movlw	0
  1125   00014A  6F87               	movwf	(_SumData_GND+2)& (0+255),b
  1126   00014C  0E00               	movlw	0
  1127   00014E  6F88               	movwf	(_SumData_GND+3)& (0+255),b
  1128   000150                     
  1129                           ; BSR set to: 0
  1130                           ;MagnetDigi24V1.c: 86:                 TransferByte_SPI(0x80);
  1131   000150  0E80               	movlw	128
  1132   000152  EC67  F00B         	call	_TransferByte_SPI
  1133   000156                     
  1134                           ;MagnetDigi24V1.c: 87:                 ReadAD24(0,0x00);
  1135   000156  0E00               	movlw	0
  1136   000158  6E46               	movwf	ReadAD24@cmd_convert^0,c
  1137   00015A  0E00               	movlw	0
  1138   00015C  ECF6  F008         	call	_ReadAD24
  1139   000160                     
  1140                           ;MagnetDigi24V1.c: 88:                 for(conta=0; conta<5; conta++){
  1141   000160  0E00               	movlw	0
  1142   000162  6E5C               	movwf	Interrups@conta^0,c
  1143   000164                     i2l2305:
  1144   000164  FFFF               	dw	65535	; assembler added errata NOP
  1145                           
  1146                           ;MagnetDigi24V1.c: 89:                     TransferByte_SPI(0x80);
  1147   000166  0E80               	movlw	128
  1148   000168  EC67  F00B         	call	_TransferByte_SPI
  1149   00016C                     
  1150                           ;MagnetDigi24V1.c: 90:                     Data_GND = ReadAD24(1,0x00);
  1151   00016C  0E00               	movlw	0
  1152   00016E  6E46               	movwf	ReadAD24@cmd_convert^0,c
  1153   000170  0E01               	movlw	1
  1154   000172  ECF6  F008         	call	_ReadAD24
  1155   000176  C046  F06D         	movff	?_ReadAD24,_Data_GND
  1156   00017A  C047  F06E         	movff	?_ReadAD24+1,_Data_GND+1
  1157   00017E  C048  F06F         	movff	?_ReadAD24+2,_Data_GND+2
  1158   000182  C049  F070         	movff	?_ReadAD24+3,_Data_GND+3
  1159   000186                     
  1160                           ;MagnetDigi24V1.c: 91:                     SumData_GND = SumData_GND + Data_GND;
  1161   000186  0100               	movlb	0	; () banked
  1162   000188  516D               	movf	_Data_GND& (0+255),w,b
  1163   00018A  2585               	addwf	_SumData_GND& (0+255),w,b
  1164   00018C  6F85               	movwf	_SumData_GND& (0+255),b
  1165   00018E  516E               	movf	(_Data_GND+1)& (0+255),w,b
  1166   000190  2186               	addwfc	(_SumData_GND+1)& (0+255),w,b
  1167   000192  6F86               	movwf	(_SumData_GND+1)& (0+255),b
  1168   000194  516F               	movf	(_Data_GND+2)& (0+255),w,b
  1169   000196  2187               	addwfc	(_SumData_GND+2)& (0+255),w,b
  1170   000198  6F87               	movwf	(_SumData_GND+2)& (0+255),b
  1171   00019A  5170               	movf	(_Data_GND+3)& (0+255),w,b
  1172   00019C  2188               	addwfc	(_SumData_GND+3)& (0+255),w,b
  1173   00019E  6F88               	movwf	(_SumData_GND+3)& (0+255),b
  1174   0001A0                     
  1175                           ; BSR set to: 0
  1176                           ;MagnetDigi24V1.c: 92:                 }
  1177   0001A0  2A5C               	incf	Interrups@conta^0,f,c
  1178   0001A2                     
  1179                           ; BSR set to: 0
  1180   0001A2  0E04               	movlw	4
  1181   0001A4  645C               	cpfsgt	Interrups@conta^0,c
  1182   0001A6  EFD7  F000         	goto	i2u75_41
  1183   0001AA  EFDA  F000         	goto	i2u75_40
  1184   0001AE                     i2u75_41:
  1185   0001AE  FFFF               	dw	65535	; assembler added errata NOP
  1186   0001B0  EFB2  F000         	goto	i2l2305
  1187   0001B4                     i2u75_40:
  1188   0001B4  FFFF               	dw	65535	; assembler added errata NOP
  1189   0001B6                     
  1190                           ; BSR set to: 0
  1191                           ;MagnetDigi24V1.c: 93:                 Data_GND = SumData_GND/5;
  1192   0001B6  C085  F038         	movff	_SumData_GND,___aldiv@dividend
  1193   0001BA  C086  F039         	movff	_SumData_GND+1,___aldiv@dividend+1
  1194   0001BE  C087  F03A         	movff	_SumData_GND+2,___aldiv@dividend+2
  1195   0001C2  C088  F03B         	movff	_SumData_GND+3,___aldiv@dividend+3
  1196   0001C6  0E05               	movlw	5
  1197   0001C8  6E3C               	movwf	___aldiv@divisor^0,c
  1198   0001CA  0E00               	movlw	0
  1199   0001CC  6E3D               	movwf	(___aldiv@divisor+1)^0,c
  1200   0001CE  0E00               	movlw	0
  1201   0001D0  6E3E               	movwf	(___aldiv@divisor+2)^0,c
  1202   0001D2  0E00               	movlw	0
  1203   0001D4  6E3F               	movwf	(___aldiv@divisor+3)^0,c
  1204   0001D6  EC5A  F008         	call	___aldiv	;wreg free
  1205   0001DA  C038  F06D         	movff	?___aldiv,_Data_GND
  1206   0001DE  C039  F06E         	movff	?___aldiv+1,_Data_GND+1
  1207   0001E2  C03A  F06F         	movff	?___aldiv+2,_Data_GND+2
  1208   0001E6  C03B  F070         	movff	?___aldiv+3,_Data_GND+3
  1209   0001EA                     
  1210                           ;MagnetDigi24V1.c: 94:                 print_value(Data_GND);
  1211   0001EA  C06D  F039         	movff	_Data_GND,print_value@value
  1212   0001EE  C06E  F03A         	movff	_Data_GND+1,print_value@value+1
  1213   0001F2  C06F  F03B         	movff	_Data_GND+2,print_value@value+2
  1214   0001F6  C070  F03C         	movff	_Data_GND+3,print_value@value+3
  1215   0001FA  EC55  F00B         	call	_print_value	;wreg free
  1216                           
  1217                           ;MagnetDigi24V1.c: 96:                 break;
  1218   0001FE  EF2C  F008         	goto	i2l429
  1219   000202                     i2l2319:
  1220   000202  FFFF               	dw	65535	; assembler added errata NOP
  1221                           
  1222                           ;MagnetDigi24V1.c: 99:                 TransmitCMD_USART('7');
  1223   000204  0E37               	movlw	55
  1224   000206  EC2F  F00B         	call	_TransmitCMD_USART
  1225                           
  1226                           ;MagnetDigi24V1.c: 100:                 break;
  1227   00020A  EF2C  F008         	goto	i2l429
  1228   00020E                     i2l2321:
  1229   00020E  FFFF               	dw	65535	; assembler added errata NOP
  1230                           
  1231                           ;MagnetDigi24V1.c: 103:                 TransmitCMD_USART('8');
  1232   000210  0E38               	movlw	56
  1233   000212  EC2F  F00B         	call	_TransmitCMD_USART
  1234                           
  1235                           ;MagnetDigi24V1.c: 107:                 break;
  1236   000216  EF2C  F008         	goto	i2l429
  1237   00021A                     i2l390:
  1238   00021A  FFFF               	dw	65535	; assembler added errata NOP
  1239                           
  1240                           ;MagnetDigi24V1.c: 111:                 LATBbits.LB7 = 1;
  1241   00021C  8E8A               	bsf	138,7,c	;volatile
  1242                           
  1243                           ;MagnetDigi24V1.c: 113:                 LATAbits.LA2 = 1;
  1244   00021E  8489               	bsf	137,2,c	;volatile
  1245   000220                     
  1246                           ;MagnetDigi24V1.c: 116:                 TMR0H = 0x10;
  1247   000220  0E10               	movlw	16
  1248   000222  6ED7               	movwf	215,c	;volatile
  1249                           
  1250                           ;MagnetDigi24V1.c: 117:                 TMR0L = 0x00;
  1251   000224  0E00               	movlw	0
  1252   000226  6ED6               	movwf	214,c	;volatile
  1253                           
  1254                           ;MagnetDigi24V1.c: 118:                 T0CON = 0b10000100;
  1255   000228  0E84               	movlw	132
  1256   00022A  6ED5               	movwf	213,c	;volatile
  1257   00022C                     
  1258                           ;MagnetDigi24V1.c: 120:                 INTCONbits.TMR0IF = 0;
  1259   00022C  94F2               	bcf	242,2,c	;volatile
  1260   00022E                     
  1261                           ;MagnetDigi24V1.c: 121:                 INTCONbits.TMR0IE = 1;
  1262   00022E  8AF2               	bsf	242,5,c	;volatile
  1263   000230                     
  1264                           ;MagnetDigi24V1.c: 122:                 INTCONbits.INT0IE = 0;
  1265   000230  98F2               	bcf	242,4,c	;volatile
  1266                           
  1267                           ;MagnetDigi24V1.c: 124:                 ContaSample = 0;
  1268   000232  0E00               	movlw	0
  1269   000234  6E35               	movwf	_ContaSample^0,c
  1270                           
  1271                           ;MagnetDigi24V1.c: 125:                 ControlSample = 0;
  1272   000236  0E00               	movlw	0
  1273   000238  6E36               	movwf	_ControlSample^0,c
  1274   00023A                     
  1275                           ;MagnetDigi24V1.c: 126:                 TransmitCMD_USART('9');
  1276   00023A  0E39               	movlw	57
  1277   00023C  EC2F  F00B         	call	_TransmitCMD_USART
  1278   000240                     
  1279                           ;MagnetDigi24V1.c: 129:                 print_string("G-JRODATEXXXXXXXXXXXX\n\r");
  1280   000240  0E7D               	movlw	low STR_5
  1281   000242  6E39               	movwf	print_string@str^0,c
  1282   000244  0E10               	movlw	high STR_5
  1283   000246  6E3A               	movwf	(print_string@str+1)^0,c
  1284   000248  ECCD  F00A         	call	_print_string	;wreg free
  1285   00024C                     
  1286                           ;MagnetDigi24V1.c: 132:                 TransferByte_SPI(0xC0);
  1287   00024C  0EC0               	movlw	192
  1288   00024E  EC67  F00B         	call	_TransferByte_SPI
  1289   000252                     
  1290                           ;MagnetDigi24V1.c: 134:                 CleanHolding();
  1291   000252  EC99  F00B         	call	_CleanHolding	;wreg free
  1292   000256                     
  1293                           ;MagnetDigi24V1.c: 136:                 PORTB = 0x38;
  1294   000256  0E38               	movlw	56
  1295   000258  6E81               	movwf	129,c	;volatile
  1296   00025A                     
  1297                           ;MagnetDigi24V1.c: 137:                 _delay((unsigned long)((7)*(9830400UL/4000.0)));
  1298   00025A  0E11               	movlw	17
  1299   00025C  6E53               	movwf	??_Interrups^0,c
  1300   00025E  0EC3               	movlw	195
  1301   000260                     i2u100_47:
  1302   000260  FFFF               	dw	65535	; errata NOP
  1303   000262  2EE8               	decfsz	wreg,f,c
  1304   000264  D7FD               	bra	i2u100_47
  1305   000266  2E53               	decfsz	??_Interrups^0,f,c
  1306   000268  D7FB               	bra	i2u100_47
  1307   00026A  D000               	nop2	
  1308   00026C  F000               	nop	
  1309   00026E                     
  1310                           ;MagnetDigi24V1.c: 138:                 SumData_X = 0;
  1311   00026E  0E00               	movlw	0
  1312   000270  6E2D               	movwf	_SumData_X^0,c
  1313   000272  0E00               	movlw	0
  1314   000274  6E2E               	movwf	(_SumData_X+1)^0,c
  1315   000276  0E00               	movlw	0
  1316   000278  6E2F               	movwf	(_SumData_X+2)^0,c
  1317   00027A  0E00               	movlw	0
  1318   00027C  6E30               	movwf	(_SumData_X+3)^0,c
  1319   00027E                     
  1320                           ;MagnetDigi24V1.c: 139:                 ReadAD24(0,0x00);
  1321   00027E  0E00               	movlw	0
  1322   000280  6E46               	movwf	ReadAD24@cmd_convert^0,c
  1323   000282  0E00               	movlw	0
  1324   000284  ECF6  F008         	call	_ReadAD24
  1325   000288                     
  1326                           ;MagnetDigi24V1.c: 140:                 for(conta=0; conta<5; conta++){
  1327   000288  0E00               	movlw	0
  1328   00028A  6E5C               	movwf	Interrups@conta^0,c
  1329   00028C                     i2l2353:
  1330   00028C  FFFF               	dw	65535	; assembler added errata NOP
  1331                           
  1332                           ;MagnetDigi24V1.c: 141:                     Data_X = ReadAD24(1,0x00);
  1333   00028E  0E00               	movlw	0
  1334   000290  6E46               	movwf	ReadAD24@cmd_convert^0,c
  1335   000292  0E01               	movlw	1
  1336   000294  ECF6  F008         	call	_ReadAD24
  1337   000298  C046  F00D         	movff	?_ReadAD24,_Data_X
  1338   00029C  C047  F00E         	movff	?_ReadAD24+1,_Data_X+1
  1339   0002A0  C048  F00F         	movff	?_ReadAD24+2,_Data_X+2
  1340   0002A4  C049  F010         	movff	?_ReadAD24+3,_Data_X+3
  1341   0002A8                     
  1342                           ;MagnetDigi24V1.c: 142:                     SumData_X = SumData_X + Data_X;
  1343   0002A8  500D               	movf	_Data_X^0,w,c
  1344   0002AA  242D               	addwf	_SumData_X^0,w,c
  1345   0002AC  6E2D               	movwf	_SumData_X^0,c
  1346   0002AE  500E               	movf	(_Data_X+1)^0,w,c
  1347   0002B0  202E               	addwfc	(_SumData_X+1)^0,w,c
  1348   0002B2  6E2E               	movwf	(_SumData_X+1)^0,c
  1349   0002B4  500F               	movf	(_Data_X+2)^0,w,c
  1350   0002B6  202F               	addwfc	(_SumData_X+2)^0,w,c
  1351   0002B8  6E2F               	movwf	(_SumData_X+2)^0,c
  1352   0002BA  5010               	movf	(_Data_X+3)^0,w,c
  1353   0002BC  2030               	addwfc	(_SumData_X+3)^0,w,c
  1354   0002BE  6E30               	movwf	(_SumData_X+3)^0,c
  1355   0002C0                     
  1356                           ;MagnetDigi24V1.c: 143:                 }
  1357   0002C0  2A5C               	incf	Interrups@conta^0,f,c
  1358   0002C2  0E04               	movlw	4
  1359   0002C4  645C               	cpfsgt	Interrups@conta^0,c
  1360   0002C6  EF67  F001         	goto	i2u76_41
  1361   0002CA  EF6A  F001         	goto	i2u76_40
  1362   0002CE                     i2u76_41:
  1363   0002CE  FFFF               	dw	65535	; assembler added errata NOP
  1364   0002D0  EF46  F001         	goto	i2l2353
  1365   0002D4                     i2u76_40:
  1366   0002D4  FFFF               	dw	65535	; assembler added errata NOP
  1367   0002D6                     
  1368                           ;MagnetDigi24V1.c: 145:                 CleanHolding();
  1369   0002D6  EC99  F00B         	call	_CleanHolding	;wreg free
  1370   0002DA                     
  1371                           ;MagnetDigi24V1.c: 147:                 PORTB = 0x18;
  1372   0002DA  0E18               	movlw	24
  1373   0002DC  6E81               	movwf	129,c	;volatile
  1374   0002DE                     
  1375                           ;MagnetDigi24V1.c: 148:                 _delay((unsigned long)((7)*(9830400UL/4000.0)));
  1376   0002DE  0E11               	movlw	17
  1377   0002E0  6E53               	movwf	??_Interrups^0,c
  1378   0002E2  0EC3               	movlw	195
  1379   0002E4                     i2u101_47:
  1380   0002E4  FFFF               	dw	65535	; errata NOP
  1381   0002E6  2EE8               	decfsz	wreg,f,c
  1382   0002E8  D7FD               	bra	i2u101_47
  1383   0002EA  2E53               	decfsz	??_Interrups^0,f,c
  1384   0002EC  D7FB               	bra	i2u101_47
  1385   0002EE  D000               	nop2	
  1386   0002F0  F000               	nop	
  1387   0002F2                     
  1388                           ;MagnetDigi24V1.c: 149:                 SumData_Y = 0;
  1389   0002F2  0E00               	movlw	0
  1390   0002F4  6E29               	movwf	_SumData_Y^0,c
  1391   0002F6  0E00               	movlw	0
  1392   0002F8  6E2A               	movwf	(_SumData_Y+1)^0,c
  1393   0002FA  0E00               	movlw	0
  1394   0002FC  6E2B               	movwf	(_SumData_Y+2)^0,c
  1395   0002FE  0E00               	movlw	0
  1396   000300  6E2C               	movwf	(_SumData_Y+3)^0,c
  1397   000302                     
  1398                           ;MagnetDigi24V1.c: 150:                 ReadAD24(0,0x00);
  1399   000302  0E00               	movlw	0
  1400   000304  6E46               	movwf	ReadAD24@cmd_convert^0,c
  1401   000306  0E00               	movlw	0
  1402   000308  ECF6  F008         	call	_ReadAD24
  1403   00030C                     
  1404                           ;MagnetDigi24V1.c: 151:                 for(conta=0; conta<5; conta++){
  1405   00030C  0E00               	movlw	0
  1406   00030E  6E5C               	movwf	Interrups@conta^0,c
  1407   000310                     i2l2377:
  1408   000310  FFFF               	dw	65535	; assembler added errata NOP
  1409                           
  1410                           ;MagnetDigi24V1.c: 152:                     Data_Y = ReadAD24(1,0x00);
  1411   000312  0E00               	movlw	0
  1412   000314  6E46               	movwf	ReadAD24@cmd_convert^0,c
  1413   000316  0E01               	movlw	1
  1414   000318  ECF6  F008         	call	_ReadAD24
  1415   00031C  C046  F009         	movff	?_ReadAD24,_Data_Y
  1416   000320  C047  F00A         	movff	?_ReadAD24+1,_Data_Y+1
  1417   000324  C048  F00B         	movff	?_ReadAD24+2,_Data_Y+2
  1418   000328  C049  F00C         	movff	?_ReadAD24+3,_Data_Y+3
  1419   00032C                     
  1420                           ;MagnetDigi24V1.c: 153:                     SumData_Y = SumData_Y + Data_Y;
  1421   00032C  5009               	movf	_Data_Y^0,w,c
  1422   00032E  2429               	addwf	_SumData_Y^0,w,c
  1423   000330  6E29               	movwf	_SumData_Y^0,c
  1424   000332  500A               	movf	(_Data_Y+1)^0,w,c
  1425   000334  202A               	addwfc	(_SumData_Y+1)^0,w,c
  1426   000336  6E2A               	movwf	(_SumData_Y+1)^0,c
  1427   000338  500B               	movf	(_Data_Y+2)^0,w,c
  1428   00033A  202B               	addwfc	(_SumData_Y+2)^0,w,c
  1429   00033C  6E2B               	movwf	(_SumData_Y+2)^0,c
  1430   00033E  500C               	movf	(_Data_Y+3)^0,w,c
  1431   000340  202C               	addwfc	(_SumData_Y+3)^0,w,c
  1432   000342  6E2C               	movwf	(_SumData_Y+3)^0,c
  1433   000344                     
  1434                           ;MagnetDigi24V1.c: 154:                 }
  1435   000344  2A5C               	incf	Interrups@conta^0,f,c
  1436   000346  0E04               	movlw	4
  1437   000348  645C               	cpfsgt	Interrups@conta^0,c
  1438   00034A  EFA9  F001         	goto	i2u77_41
  1439   00034E  EFAC  F001         	goto	i2u77_40
  1440   000352                     i2u77_41:
  1441   000352  FFFF               	dw	65535	; assembler added errata NOP
  1442   000354  EF88  F001         	goto	i2l2377
  1443   000358                     i2u77_40:
  1444   000358  FFFF               	dw	65535	; assembler added errata NOP
  1445   00035A                     
  1446                           ;MagnetDigi24V1.c: 156:                 CleanHolding();
  1447   00035A  EC99  F00B         	call	_CleanHolding	;wreg free
  1448   00035E                     
  1449                           ;MagnetDigi24V1.c: 158:                 PORTB = 0x28;
  1450   00035E  0E28               	movlw	40
  1451   000360  6E81               	movwf	129,c	;volatile
  1452   000362                     
  1453                           ;MagnetDigi24V1.c: 159:                 _delay((unsigned long)((7)*(9830400UL/4000.0)));
  1454   000362  0E11               	movlw	17
  1455   000364  6E53               	movwf	??_Interrups^0,c
  1456   000366  0EC3               	movlw	195
  1457   000368                     i2u102_47:
  1458   000368  FFFF               	dw	65535	; errata NOP
  1459   00036A  2EE8               	decfsz	wreg,f,c
  1460   00036C  D7FD               	bra	i2u102_47
  1461   00036E  2E53               	decfsz	??_Interrups^0,f,c
  1462   000370  D7FB               	bra	i2u102_47
  1463   000372  D000               	nop2	
  1464   000374  F000               	nop	
  1465   000376                     
  1466                           ;MagnetDigi24V1.c: 160:                 SumData_Z = 0;
  1467   000376  0E00               	movlw	0
  1468   000378  6E25               	movwf	_SumData_Z^0,c
  1469   00037A  0E00               	movlw	0
  1470   00037C  6E26               	movwf	(_SumData_Z+1)^0,c
  1471   00037E  0E00               	movlw	0
  1472   000380  6E27               	movwf	(_SumData_Z+2)^0,c
  1473   000382  0E00               	movlw	0
  1474   000384  6E28               	movwf	(_SumData_Z+3)^0,c
  1475   000386                     
  1476                           ;MagnetDigi24V1.c: 161:                 ReadAD24(0,0x00);
  1477   000386  0E00               	movlw	0
  1478   000388  6E46               	movwf	ReadAD24@cmd_convert^0,c
  1479   00038A  0E00               	movlw	0
  1480   00038C  ECF6  F008         	call	_ReadAD24
  1481   000390                     
  1482                           ;MagnetDigi24V1.c: 162:                 for(conta=0; conta<5; conta++){
  1483   000390  0E00               	movlw	0
  1484   000392  6E5C               	movwf	Interrups@conta^0,c
  1485   000394                     i2l2401:
  1486   000394  FFFF               	dw	65535	; assembler added errata NOP
  1487                           
  1488                           ;MagnetDigi24V1.c: 163:                     Data_Z = ReadAD24(1,0x00);
  1489   000396  0E00               	movlw	0
  1490   000398  6E46               	movwf	ReadAD24@cmd_convert^0,c
  1491   00039A  0E01               	movlw	1
  1492   00039C  ECF6  F008         	call	_ReadAD24
  1493   0003A0  C046  F005         	movff	?_ReadAD24,_Data_Z
  1494   0003A4  C047  F006         	movff	?_ReadAD24+1,_Data_Z+1
  1495   0003A8  C048  F007         	movff	?_ReadAD24+2,_Data_Z+2
  1496   0003AC  C049  F008         	movff	?_ReadAD24+3,_Data_Z+3
  1497   0003B0                     
  1498                           ;MagnetDigi24V1.c: 164:                     SumData_Z = SumData_Z + Data_Z;
  1499   0003B0  5005               	movf	_Data_Z^0,w,c
  1500   0003B2  2425               	addwf	_SumData_Z^0,w,c
  1501   0003B4  6E25               	movwf	_SumData_Z^0,c
  1502   0003B6  5006               	movf	(_Data_Z+1)^0,w,c
  1503   0003B8  2026               	addwfc	(_SumData_Z+1)^0,w,c
  1504   0003BA  6E26               	movwf	(_SumData_Z+1)^0,c
  1505   0003BC  5007               	movf	(_Data_Z+2)^0,w,c
  1506   0003BE  2027               	addwfc	(_SumData_Z+2)^0,w,c
  1507   0003C0  6E27               	movwf	(_SumData_Z+2)^0,c
  1508   0003C2  5008               	movf	(_Data_Z+3)^0,w,c
  1509   0003C4  2028               	addwfc	(_SumData_Z+3)^0,w,c
  1510   0003C6  6E28               	movwf	(_SumData_Z+3)^0,c
  1511   0003C8                     
  1512                           ;MagnetDigi24V1.c: 165:                 }
  1513   0003C8  2A5C               	incf	Interrups@conta^0,f,c
  1514   0003CA  0E04               	movlw	4
  1515   0003CC  645C               	cpfsgt	Interrups@conta^0,c
  1516   0003CE  EFEB  F001         	goto	i2u78_41
  1517   0003D2  EFEE  F001         	goto	i2u78_40
  1518   0003D6                     i2u78_41:
  1519   0003D6  FFFF               	dw	65535	; assembler added errata NOP
  1520   0003D8  EFCA  F001         	goto	i2l2401
  1521   0003DC                     i2u78_40:
  1522   0003DC  FFFF               	dw	65535	; assembler added errata NOP
  1523   0003DE                     
  1524                           ;MagnetDigi24V1.c: 167:                 CleanHolding();
  1525   0003DE  EC99  F00B         	call	_CleanHolding	;wreg free
  1526   0003E2                     
  1527                           ;MagnetDigi24V1.c: 169:                 PORTB = 0x08;
  1528   0003E2  0E08               	movlw	8
  1529   0003E4  6E81               	movwf	129,c	;volatile
  1530   0003E6                     
  1531                           ;MagnetDigi24V1.c: 170:                 _delay((unsigned long)((7)*(9830400UL/4000.0)));
  1532   0003E6  0E11               	movlw	17
  1533   0003E8  6E53               	movwf	??_Interrups^0,c
  1534   0003EA  0EC3               	movlw	195
  1535   0003EC                     i2u103_47:
  1536   0003EC  FFFF               	dw	65535	; errata NOP
  1537   0003EE  2EE8               	decfsz	wreg,f,c
  1538   0003F0  D7FD               	bra	i2u103_47
  1539   0003F2  2E53               	decfsz	??_Interrups^0,f,c
  1540   0003F4  D7FB               	bra	i2u103_47
  1541   0003F6  D000               	nop2	
  1542   0003F8  F000               	nop	
  1543   0003FA                     
  1544                           ;MagnetDigi24V1.c: 171:                 SumData_TC = 0;
  1545   0003FA  0E00               	movlw	0
  1546   0003FC  6E21               	movwf	_SumData_TC^0,c
  1547   0003FE  0E00               	movlw	0
  1548   000400  6E22               	movwf	(_SumData_TC+1)^0,c
  1549   000402  0E00               	movlw	0
  1550   000404  6E23               	movwf	(_SumData_TC+2)^0,c
  1551   000406  0E00               	movlw	0
  1552   000408  6E24               	movwf	(_SumData_TC+3)^0,c
  1553   00040A                     
  1554                           ;MagnetDigi24V1.c: 172:                 ReadAD24(0,0x00);
  1555   00040A  0E00               	movlw	0
  1556   00040C  6E46               	movwf	ReadAD24@cmd_convert^0,c
  1557   00040E  0E00               	movlw	0
  1558   000410  ECF6  F008         	call	_ReadAD24
  1559   000414                     
  1560                           ;MagnetDigi24V1.c: 173:                 for(conta=0; conta<5; conta++){
  1561   000414  0E00               	movlw	0
  1562   000416  6E5C               	movwf	Interrups@conta^0,c
  1563   000418                     i2l2425:
  1564   000418  FFFF               	dw	65535	; assembler added errata NOP
  1565                           
  1566                           ;MagnetDigi24V1.c: 174:                     Data_TC = ReadAD24(1,0x00);
  1567   00041A  0E00               	movlw	0
  1568   00041C  6E46               	movwf	ReadAD24@cmd_convert^0,c
  1569   00041E  0E01               	movlw	1
  1570   000420  ECF6  F008         	call	_ReadAD24
  1571   000424  C046  F001         	movff	?_ReadAD24,_Data_TC
  1572   000428  C047  F002         	movff	?_ReadAD24+1,_Data_TC+1
  1573   00042C  C048  F003         	movff	?_ReadAD24+2,_Data_TC+2
  1574   000430  C049  F004         	movff	?_ReadAD24+3,_Data_TC+3
  1575   000434                     
  1576                           ;MagnetDigi24V1.c: 175:                     SumData_TC = SumData_TC + Data_TC;
  1577   000434  5001               	movf	_Data_TC^0,w,c
  1578   000436  2421               	addwf	_SumData_TC^0,w,c
  1579   000438  6E21               	movwf	_SumData_TC^0,c
  1580   00043A  5002               	movf	(_Data_TC+1)^0,w,c
  1581   00043C  2022               	addwfc	(_SumData_TC+1)^0,w,c
  1582   00043E  6E22               	movwf	(_SumData_TC+1)^0,c
  1583   000440  5003               	movf	(_Data_TC+2)^0,w,c
  1584   000442  2023               	addwfc	(_SumData_TC+2)^0,w,c
  1585   000444  6E23               	movwf	(_SumData_TC+2)^0,c
  1586   000446  5004               	movf	(_Data_TC+3)^0,w,c
  1587   000448  2024               	addwfc	(_SumData_TC+3)^0,w,c
  1588   00044A  6E24               	movwf	(_SumData_TC+3)^0,c
  1589   00044C                     
  1590                           ;MagnetDigi24V1.c: 176:                 }
  1591   00044C  2A5C               	incf	Interrups@conta^0,f,c
  1592   00044E  0E04               	movlw	4
  1593   000450  645C               	cpfsgt	Interrups@conta^0,c
  1594   000452  EF2D  F002         	goto	i2u79_41
  1595   000456  EF30  F002         	goto	i2u79_40
  1596   00045A                     i2u79_41:
  1597   00045A  FFFF               	dw	65535	; assembler added errata NOP
  1598   00045C  EF0C  F002         	goto	i2l2425
  1599   000460                     i2u79_40:
  1600   000460  FFFF               	dw	65535	; assembler added errata NOP
  1601   000462                     
  1602                           ;MagnetDigi24V1.c: 178:                 CleanHolding();
  1603   000462  EC99  F00B         	call	_CleanHolding	;wreg free
  1604   000466                     
  1605                           ;MagnetDigi24V1.c: 180:                 PORTB = 0x04;
  1606   000466  0E04               	movlw	4
  1607   000468  6E81               	movwf	129,c	;volatile
  1608   00046A                     
  1609                           ;MagnetDigi24V1.c: 181:                 _delay((unsigned long)((7)*(9830400UL/4000.0)));
  1610   00046A  0E11               	movlw	17
  1611   00046C  6E53               	movwf	??_Interrups^0,c
  1612   00046E  0EC3               	movlw	195
  1613   000470                     i2u104_47:
  1614   000470  FFFF               	dw	65535	; errata NOP
  1615   000472  2EE8               	decfsz	wreg,f,c
  1616   000474  D7FD               	bra	i2u104_47
  1617   000476  2E53               	decfsz	??_Interrups^0,f,c
  1618   000478  D7FB               	bra	i2u104_47
  1619   00047A  D000               	nop2	
  1620   00047C  F000               	nop	
  1621   00047E                     
  1622                           ;MagnetDigi24V1.c: 182:                 SumData_TS = 0;
  1623   00047E  0E00               	movlw	0
  1624   000480  6E1D               	movwf	_SumData_TS^0,c
  1625   000482  0E00               	movlw	0
  1626   000484  6E1E               	movwf	(_SumData_TS+1)^0,c
  1627   000486  0E00               	movlw	0
  1628   000488  6E1F               	movwf	(_SumData_TS+2)^0,c
  1629   00048A  0E00               	movlw	0
  1630   00048C  6E20               	movwf	(_SumData_TS+3)^0,c
  1631   00048E                     
  1632                           ;MagnetDigi24V1.c: 183:                 ReadAD24(0,0x00);
  1633   00048E  0E00               	movlw	0
  1634   000490  6E46               	movwf	ReadAD24@cmd_convert^0,c
  1635   000492  0E00               	movlw	0
  1636   000494  ECF6  F008         	call	_ReadAD24
  1637   000498                     
  1638                           ;MagnetDigi24V1.c: 184:                 for(conta=0; conta<5; conta++){
  1639   000498  0E00               	movlw	0
  1640   00049A  6E5C               	movwf	Interrups@conta^0,c
  1641   00049C                     i2l2449:
  1642   00049C  FFFF               	dw	65535	; assembler added errata NOP
  1643                           
  1644                           ;MagnetDigi24V1.c: 185:                     Data_TS = ReadAD24(1,0x00);
  1645   00049E  0E00               	movlw	0
  1646   0004A0  6E46               	movwf	ReadAD24@cmd_convert^0,c
  1647   0004A2  0E01               	movlw	1
  1648   0004A4  ECF6  F008         	call	_ReadAD24
  1649   0004A8  C046  F081         	movff	?_ReadAD24,_Data_TS
  1650   0004AC  C047  F082         	movff	?_ReadAD24+1,_Data_TS+1
  1651   0004B0  C048  F083         	movff	?_ReadAD24+2,_Data_TS+2
  1652   0004B4  C049  F084         	movff	?_ReadAD24+3,_Data_TS+3
  1653   0004B8                     
  1654                           ;MagnetDigi24V1.c: 186:                     SumData_TS = SumData_TS + Data_TS;
  1655   0004B8  0100               	movlb	0	; () banked
  1656   0004BA  5181               	movf	_Data_TS& (0+255),w,b
  1657   0004BC  241D               	addwf	_SumData_TS^0,w,c
  1658   0004BE  6E1D               	movwf	_SumData_TS^0,c
  1659   0004C0  5182               	movf	(_Data_TS+1)& (0+255),w,b
  1660   0004C2  201E               	addwfc	(_SumData_TS+1)^0,w,c
  1661   0004C4  6E1E               	movwf	(_SumData_TS+1)^0,c
  1662   0004C6  5183               	movf	(_Data_TS+2)& (0+255),w,b
  1663   0004C8  201F               	addwfc	(_SumData_TS+2)^0,w,c
  1664   0004CA  6E1F               	movwf	(_SumData_TS+2)^0,c
  1665   0004CC  5184               	movf	(_Data_TS+3)& (0+255),w,b
  1666   0004CE  2020               	addwfc	(_SumData_TS+3)^0,w,c
  1667   0004D0  6E20               	movwf	(_SumData_TS+3)^0,c
  1668   0004D2                     
  1669                           ; BSR set to: 0
  1670                           ;MagnetDigi24V1.c: 187:                 }
  1671   0004D2  2A5C               	incf	Interrups@conta^0,f,c
  1672   0004D4                     
  1673                           ; BSR set to: 0
  1674   0004D4  0E04               	movlw	4
  1675   0004D6  645C               	cpfsgt	Interrups@conta^0,c
  1676   0004D8  EF70  F002         	goto	i2u80_41
  1677   0004DC  EF73  F002         	goto	i2u80_40
  1678   0004E0                     i2u80_41:
  1679   0004E0  FFFF               	dw	65535	; assembler added errata NOP
  1680   0004E2  EF4E  F002         	goto	i2l2449
  1681   0004E6                     i2u80_40:
  1682   0004E6  FFFF               	dw	65535	; assembler added errata NOP
  1683   0004E8                     
  1684                           ; BSR set to: 0
  1685                           ;MagnetDigi24V1.c: 189:                 CleanHolding();
  1686   0004E8  EC99  F00B         	call	_CleanHolding	;wreg free
  1687   0004EC                     
  1688                           ;MagnetDigi24V1.c: 191:                 PORTB = 0x34;
  1689   0004EC  0E34               	movlw	52
  1690   0004EE  6E81               	movwf	129,c	;volatile
  1691   0004F0                     
  1692                           ;MagnetDigi24V1.c: 192:                 _delay((unsigned long)((7)*(9830400UL/4000.0)));
  1693   0004F0  0E11               	movlw	17
  1694   0004F2  6E53               	movwf	??_Interrups^0,c
  1695   0004F4  0EC3               	movlw	195
  1696   0004F6                     i2u105_47:
  1697   0004F6  FFFF               	dw	65535	; errata NOP
  1698   0004F8  2EE8               	decfsz	wreg,f,c
  1699   0004FA  D7FD               	bra	i2u105_47
  1700   0004FC  2E53               	decfsz	??_Interrups^0,f,c
  1701   0004FE  D7FB               	bra	i2u105_47
  1702   000500  D000               	nop2	
  1703   000502  F000               	nop	
  1704   000504                     
  1705                           ;MagnetDigi24V1.c: 193:                 SumData_AUX0 = 0;
  1706   000504  0E00               	movlw	0
  1707   000506  6E19               	movwf	_SumData_AUX0^0,c
  1708   000508  0E00               	movlw	0
  1709   00050A  6E1A               	movwf	(_SumData_AUX0+1)^0,c
  1710   00050C  0E00               	movlw	0
  1711   00050E  6E1B               	movwf	(_SumData_AUX0+2)^0,c
  1712   000510  0E00               	movlw	0
  1713   000512  6E1C               	movwf	(_SumData_AUX0+3)^0,c
  1714   000514                     
  1715                           ;MagnetDigi24V1.c: 194:                 ReadAD24(0,0x00);
  1716   000514  0E00               	movlw	0
  1717   000516  6E46               	movwf	ReadAD24@cmd_convert^0,c
  1718   000518  0E00               	movlw	0
  1719   00051A  ECF6  F008         	call	_ReadAD24
  1720   00051E                     
  1721                           ;MagnetDigi24V1.c: 195:                 for(conta=0; conta<5; conta++){
  1722   00051E  0E00               	movlw	0
  1723   000520  6E5C               	movwf	Interrups@conta^0,c
  1724   000522                     i2l2473:
  1725   000522  FFFF               	dw	65535	; assembler added errata NOP
  1726                           
  1727                           ;MagnetDigi24V1.c: 196:                     Data_AUX0 = ReadAD24(1,0x00);
  1728   000524  0E00               	movlw	0
  1729   000526  6E46               	movwf	ReadAD24@cmd_convert^0,c
  1730   000528  0E01               	movlw	1
  1731   00052A  ECF6  F008         	call	_ReadAD24
  1732   00052E  C046  F079         	movff	?_ReadAD24,_Data_AUX0
  1733   000532  C047  F07A         	movff	?_ReadAD24+1,_Data_AUX0+1
  1734   000536  C048  F07B         	movff	?_ReadAD24+2,_Data_AUX0+2
  1735   00053A  C049  F07C         	movff	?_ReadAD24+3,_Data_AUX0+3
  1736   00053E                     
  1737                           ;MagnetDigi24V1.c: 197:                     SumData_AUX0 = SumData_AUX0 + Data_AUX0;
  1738   00053E  0100               	movlb	0	; () banked
  1739   000540  5179               	movf	_Data_AUX0& (0+255),w,b
  1740   000542  2419               	addwf	_SumData_AUX0^0,w,c
  1741   000544  6E19               	movwf	_SumData_AUX0^0,c
  1742   000546  517A               	movf	(_Data_AUX0+1)& (0+255),w,b
  1743   000548  201A               	addwfc	(_SumData_AUX0+1)^0,w,c
  1744   00054A  6E1A               	movwf	(_SumData_AUX0+1)^0,c
  1745   00054C  517B               	movf	(_Data_AUX0+2)& (0+255),w,b
  1746   00054E  201B               	addwfc	(_SumData_AUX0+2)^0,w,c
  1747   000550  6E1B               	movwf	(_SumData_AUX0+2)^0,c
  1748   000552  517C               	movf	(_Data_AUX0+3)& (0+255),w,b
  1749   000554  201C               	addwfc	(_SumData_AUX0+3)^0,w,c
  1750   000556  6E1C               	movwf	(_SumData_AUX0+3)^0,c
  1751   000558                     
  1752                           ; BSR set to: 0
  1753                           ;MagnetDigi24V1.c: 198:                 }
  1754   000558  2A5C               	incf	Interrups@conta^0,f,c
  1755   00055A                     
  1756                           ; BSR set to: 0
  1757   00055A  0E04               	movlw	4
  1758   00055C  645C               	cpfsgt	Interrups@conta^0,c
  1759   00055E  EFB3  F002         	goto	i2u81_41
  1760   000562  EFB6  F002         	goto	i2u81_40
  1761   000566                     i2u81_41:
  1762   000566  FFFF               	dw	65535	; assembler added errata NOP
  1763   000568  EF91  F002         	goto	i2l2473
  1764   00056C                     i2u81_40:
  1765   00056C  FFFF               	dw	65535	; assembler added errata NOP
  1766   00056E                     
  1767                           ; BSR set to: 0
  1768                           ;MagnetDigi24V1.c: 200:                 CleanHolding();
  1769   00056E  EC99  F00B         	call	_CleanHolding	;wreg free
  1770   000572                     
  1771                           ;MagnetDigi24V1.c: 202:                 PORTB = 0x14;
  1772   000572  0E14               	movlw	20
  1773   000574  6E81               	movwf	129,c	;volatile
  1774   000576                     
  1775                           ;MagnetDigi24V1.c: 203:                 _delay((unsigned long)((7)*(9830400UL/4000.0)));
  1776   000576  0E11               	movlw	17
  1777   000578  6E53               	movwf	??_Interrups^0,c
  1778   00057A  0EC3               	movlw	195
  1779   00057C                     i2u106_47:
  1780   00057C  FFFF               	dw	65535	; errata NOP
  1781   00057E  2EE8               	decfsz	wreg,f,c
  1782   000580  D7FD               	bra	i2u106_47
  1783   000582  2E53               	decfsz	??_Interrups^0,f,c
  1784   000584  D7FB               	bra	i2u106_47
  1785   000586  D000               	nop2	
  1786   000588  F000               	nop	
  1787   00058A                     
  1788                           ;MagnetDigi24V1.c: 204:                 SumData_AUX1 = 0;
  1789   00058A  0E00               	movlw	0
  1790   00058C  6E15               	movwf	_SumData_AUX1^0,c
  1791   00058E  0E00               	movlw	0
  1792   000590  6E16               	movwf	(_SumData_AUX1+1)^0,c
  1793   000592  0E00               	movlw	0
  1794   000594  6E17               	movwf	(_SumData_AUX1+2)^0,c
  1795   000596  0E00               	movlw	0
  1796   000598  6E18               	movwf	(_SumData_AUX1+3)^0,c
  1797   00059A                     
  1798                           ;MagnetDigi24V1.c: 205:                 ReadAD24(0,0x00);
  1799   00059A  0E00               	movlw	0
  1800   00059C  6E46               	movwf	ReadAD24@cmd_convert^0,c
  1801   00059E  0E00               	movlw	0
  1802   0005A0  ECF6  F008         	call	_ReadAD24
  1803   0005A4                     
  1804                           ;MagnetDigi24V1.c: 206:                 for(conta=0; conta<5; conta++){
  1805   0005A4  0E00               	movlw	0
  1806   0005A6  6E5C               	movwf	Interrups@conta^0,c
  1807   0005A8                     i2l2497:
  1808   0005A8  FFFF               	dw	65535	; assembler added errata NOP
  1809                           
  1810                           ;MagnetDigi24V1.c: 207:                     Data_AUX1 = ReadAD24(1,0x00);
  1811   0005AA  0E00               	movlw	0
  1812   0005AC  6E46               	movwf	ReadAD24@cmd_convert^0,c
  1813   0005AE  0E01               	movlw	1
  1814   0005B0  ECF6  F008         	call	_ReadAD24
  1815   0005B4  C046  F075         	movff	?_ReadAD24,_Data_AUX1
  1816   0005B8  C047  F076         	movff	?_ReadAD24+1,_Data_AUX1+1
  1817   0005BC  C048  F077         	movff	?_ReadAD24+2,_Data_AUX1+2
  1818   0005C0  C049  F078         	movff	?_ReadAD24+3,_Data_AUX1+3
  1819   0005C4                     
  1820                           ;MagnetDigi24V1.c: 208:                     SumData_AUX1 = SumData_AUX1 + Data_AUX1;
  1821   0005C4  0100               	movlb	0	; () banked
  1822   0005C6  5175               	movf	_Data_AUX1& (0+255),w,b
  1823   0005C8  2415               	addwf	_SumData_AUX1^0,w,c
  1824   0005CA  6E15               	movwf	_SumData_AUX1^0,c
  1825   0005CC  5176               	movf	(_Data_AUX1+1)& (0+255),w,b
  1826   0005CE  2016               	addwfc	(_SumData_AUX1+1)^0,w,c
  1827   0005D0  6E16               	movwf	(_SumData_AUX1+1)^0,c
  1828   0005D2  5177               	movf	(_Data_AUX1+2)& (0+255),w,b
  1829   0005D4  2017               	addwfc	(_SumData_AUX1+2)^0,w,c
  1830   0005D6  6E17               	movwf	(_SumData_AUX1+2)^0,c
  1831   0005D8  5178               	movf	(_Data_AUX1+3)& (0+255),w,b
  1832   0005DA  2018               	addwfc	(_SumData_AUX1+3)^0,w,c
  1833   0005DC  6E18               	movwf	(_SumData_AUX1+3)^0,c
  1834   0005DE                     
  1835                           ; BSR set to: 0
  1836                           ;MagnetDigi24V1.c: 209:                 }
  1837   0005DE  2A5C               	incf	Interrups@conta^0,f,c
  1838   0005E0                     
  1839                           ; BSR set to: 0
  1840   0005E0  0E04               	movlw	4
  1841   0005E2  645C               	cpfsgt	Interrups@conta^0,c
  1842   0005E4  EFF6  F002         	goto	i2u82_41
  1843   0005E8  EFF9  F002         	goto	i2u82_40
  1844   0005EC                     i2u82_41:
  1845   0005EC  FFFF               	dw	65535	; assembler added errata NOP
  1846   0005EE  EFD4  F002         	goto	i2l2497
  1847   0005F2                     i2u82_40:
  1848   0005F2  FFFF               	dw	65535	; assembler added errata NOP
  1849   0005F4                     
  1850                           ; BSR set to: 0
  1851                           ;MagnetDigi24V1.c: 211:                 CleanHolding();
  1852   0005F4  EC99  F00B         	call	_CleanHolding	;wreg free
  1853   0005F8                     
  1854                           ;MagnetDigi24V1.c: 213:                 PORTB = 0x24;
  1855   0005F8  0E24               	movlw	36
  1856   0005FA  6E81               	movwf	129,c	;volatile
  1857   0005FC                     
  1858                           ;MagnetDigi24V1.c: 214:                 _delay((unsigned long)((7)*(9830400UL/4000.0)));
  1859   0005FC  0E11               	movlw	17
  1860   0005FE  6E53               	movwf	??_Interrups^0,c
  1861   000600  0EC3               	movlw	195
  1862   000602                     i2u107_47:
  1863   000602  FFFF               	dw	65535	; errata NOP
  1864   000604  2EE8               	decfsz	wreg,f,c
  1865   000606  D7FD               	bra	i2u107_47
  1866   000608  2E53               	decfsz	??_Interrups^0,f,c
  1867   00060A  D7FB               	bra	i2u107_47
  1868   00060C  D000               	nop2	
  1869   00060E  F000               	nop	
  1870   000610                     
  1871                           ;MagnetDigi24V1.c: 215:                 SumData_AUX2 = 0;
  1872   000610  0E00               	movlw	0
  1873   000612  6E11               	movwf	_SumData_AUX2^0,c
  1874   000614  0E00               	movlw	0
  1875   000616  6E12               	movwf	(_SumData_AUX2+1)^0,c
  1876   000618  0E00               	movlw	0
  1877   00061A  6E13               	movwf	(_SumData_AUX2+2)^0,c
  1878   00061C  0E00               	movlw	0
  1879   00061E  6E14               	movwf	(_SumData_AUX2+3)^0,c
  1880   000620                     
  1881                           ;MagnetDigi24V1.c: 216:                 ReadAD24(0,0x00);
  1882   000620  0E00               	movlw	0
  1883   000622  6E46               	movwf	ReadAD24@cmd_convert^0,c
  1884   000624  0E00               	movlw	0
  1885   000626  ECF6  F008         	call	_ReadAD24
  1886   00062A                     
  1887                           ;MagnetDigi24V1.c: 217:                 for(conta=0; conta<5; conta++){
  1888   00062A  0E00               	movlw	0
  1889   00062C  6E5C               	movwf	Interrups@conta^0,c
  1890   00062E                     i2l2521:
  1891   00062E  FFFF               	dw	65535	; assembler added errata NOP
  1892                           
  1893                           ;MagnetDigi24V1.c: 218:                     Data_AUX2 = ReadAD24(1,0x00);
  1894   000630  0E00               	movlw	0
  1895   000632  6E46               	movwf	ReadAD24@cmd_convert^0,c
  1896   000634  0E01               	movlw	1
  1897   000636  ECF6  F008         	call	_ReadAD24
  1898   00063A  C046  F071         	movff	?_ReadAD24,_Data_AUX2
  1899   00063E  C047  F072         	movff	?_ReadAD24+1,_Data_AUX2+1
  1900   000642  C048  F073         	movff	?_ReadAD24+2,_Data_AUX2+2
  1901   000646  C049  F074         	movff	?_ReadAD24+3,_Data_AUX2+3
  1902   00064A                     
  1903                           ;MagnetDigi24V1.c: 219:                     SumData_AUX2 = SumData_AUX2 + Data_AUX2;
  1904   00064A  0100               	movlb	0	; () banked
  1905   00064C  5171               	movf	_Data_AUX2& (0+255),w,b
  1906   00064E  2411               	addwf	_SumData_AUX2^0,w,c
  1907   000650  6E11               	movwf	_SumData_AUX2^0,c
  1908   000652  5172               	movf	(_Data_AUX2+1)& (0+255),w,b
  1909   000654  2012               	addwfc	(_SumData_AUX2+1)^0,w,c
  1910   000656  6E12               	movwf	(_SumData_AUX2+1)^0,c
  1911   000658  5173               	movf	(_Data_AUX2+2)& (0+255),w,b
  1912   00065A  2013               	addwfc	(_SumData_AUX2+2)^0,w,c
  1913   00065C  6E13               	movwf	(_SumData_AUX2+2)^0,c
  1914   00065E  5174               	movf	(_Data_AUX2+3)& (0+255),w,b
  1915   000660  2014               	addwfc	(_SumData_AUX2+3)^0,w,c
  1916   000662  6E14               	movwf	(_SumData_AUX2+3)^0,c
  1917   000664                     
  1918                           ; BSR set to: 0
  1919                           ;MagnetDigi24V1.c: 220:                 }
  1920   000664  2A5C               	incf	Interrups@conta^0,f,c
  1921   000666                     
  1922                           ; BSR set to: 0
  1923   000666  0E04               	movlw	4
  1924   000668  645C               	cpfsgt	Interrups@conta^0,c
  1925   00066A  EF39  F003         	goto	i2u83_41
  1926   00066E  EF3C  F003         	goto	i2u83_40
  1927   000672                     i2u83_41:
  1928   000672  FFFF               	dw	65535	; assembler added errata NOP
  1929   000674  EF17  F003         	goto	i2l2521
  1930   000678                     i2u83_40:
  1931   000678  FFFF               	dw	65535	; assembler added errata NOP
  1932   00067A                     
  1933                           ; BSR set to: 0
  1934                           ;MagnetDigi24V1.c: 223:                 Data_X = SumData_X/5;
  1935   00067A  C02D  F038         	movff	_SumData_X,___aldiv@dividend
  1936   00067E  C02E  F039         	movff	_SumData_X+1,___aldiv@dividend+1
  1937   000682  C02F  F03A         	movff	_SumData_X+2,___aldiv@dividend+2
  1938   000686  C030  F03B         	movff	_SumData_X+3,___aldiv@dividend+3
  1939   00068A  0E05               	movlw	5
  1940   00068C  6E3C               	movwf	___aldiv@divisor^0,c
  1941   00068E  0E00               	movlw	0
  1942   000690  6E3D               	movwf	(___aldiv@divisor+1)^0,c
  1943   000692  0E00               	movlw	0
  1944   000694  6E3E               	movwf	(___aldiv@divisor+2)^0,c
  1945   000696  0E00               	movlw	0
  1946   000698  6E3F               	movwf	(___aldiv@divisor+3)^0,c
  1947   00069A  EC5A  F008         	call	___aldiv	;wreg free
  1948   00069E  C038  F00D         	movff	?___aldiv,_Data_X
  1949   0006A2  C039  F00E         	movff	?___aldiv+1,_Data_X+1
  1950   0006A6  C03A  F00F         	movff	?___aldiv+2,_Data_X+2
  1951   0006AA  C03B  F010         	movff	?___aldiv+3,_Data_X+3
  1952                           
  1953                           ;MagnetDigi24V1.c: 224:                 Data_Y = SumData_Y/5;
  1954   0006AE  C029  F038         	movff	_SumData_Y,___aldiv@dividend
  1955   0006B2  C02A  F039         	movff	_SumData_Y+1,___aldiv@dividend+1
  1956   0006B6  C02B  F03A         	movff	_SumData_Y+2,___aldiv@dividend+2
  1957   0006BA  C02C  F03B         	movff	_SumData_Y+3,___aldiv@dividend+3
  1958   0006BE  0E05               	movlw	5
  1959   0006C0  6E3C               	movwf	___aldiv@divisor^0,c
  1960   0006C2  0E00               	movlw	0
  1961   0006C4  6E3D               	movwf	(___aldiv@divisor+1)^0,c
  1962   0006C6  0E00               	movlw	0
  1963   0006C8  6E3E               	movwf	(___aldiv@divisor+2)^0,c
  1964   0006CA  0E00               	movlw	0
  1965   0006CC  6E3F               	movwf	(___aldiv@divisor+3)^0,c
  1966   0006CE  EC5A  F008         	call	___aldiv	;wreg free
  1967   0006D2  C038  F009         	movff	?___aldiv,_Data_Y
  1968   0006D6  C039  F00A         	movff	?___aldiv+1,_Data_Y+1
  1969   0006DA  C03A  F00B         	movff	?___aldiv+2,_Data_Y+2
  1970   0006DE  C03B  F00C         	movff	?___aldiv+3,_Data_Y+3
  1971                           
  1972                           ;MagnetDigi24V1.c: 225:                 Data_Z = SumData_Z/5;
  1973   0006E2  C025  F038         	movff	_SumData_Z,___aldiv@dividend
  1974   0006E6  C026  F039         	movff	_SumData_Z+1,___aldiv@dividend+1
  1975   0006EA  C027  F03A         	movff	_SumData_Z+2,___aldiv@dividend+2
  1976   0006EE  C028  F03B         	movff	_SumData_Z+3,___aldiv@dividend+3
  1977   0006F2  0E05               	movlw	5
  1978   0006F4  6E3C               	movwf	___aldiv@divisor^0,c
  1979   0006F6  0E00               	movlw	0
  1980   0006F8  6E3D               	movwf	(___aldiv@divisor+1)^0,c
  1981   0006FA  0E00               	movlw	0
  1982   0006FC  6E3E               	movwf	(___aldiv@divisor+2)^0,c
  1983   0006FE  0E00               	movlw	0
  1984   000700  6E3F               	movwf	(___aldiv@divisor+3)^0,c
  1985   000702  EC5A  F008         	call	___aldiv	;wreg free
  1986   000706  C038  F005         	movff	?___aldiv,_Data_Z
  1987   00070A  C039  F006         	movff	?___aldiv+1,_Data_Z+1
  1988   00070E  C03A  F007         	movff	?___aldiv+2,_Data_Z+2
  1989   000712  C03B  F008         	movff	?___aldiv+3,_Data_Z+3
  1990                           
  1991                           ;MagnetDigi24V1.c: 226:                 Data_TC = SumData_TC/5;
  1992   000716  C021  F038         	movff	_SumData_TC,___aldiv@dividend
  1993   00071A  C022  F039         	movff	_SumData_TC+1,___aldiv@dividend+1
  1994   00071E  C023  F03A         	movff	_SumData_TC+2,___aldiv@dividend+2
  1995   000722  C024  F03B         	movff	_SumData_TC+3,___aldiv@dividend+3
  1996   000726  0E05               	movlw	5
  1997   000728  6E3C               	movwf	___aldiv@divisor^0,c
  1998   00072A  0E00               	movlw	0
  1999   00072C  6E3D               	movwf	(___aldiv@divisor+1)^0,c
  2000   00072E  0E00               	movlw	0
  2001   000730  6E3E               	movwf	(___aldiv@divisor+2)^0,c
  2002   000732  0E00               	movlw	0
  2003   000734  6E3F               	movwf	(___aldiv@divisor+3)^0,c
  2004   000736  EC5A  F008         	call	___aldiv	;wreg free
  2005   00073A  C038  F001         	movff	?___aldiv,_Data_TC
  2006   00073E  C039  F002         	movff	?___aldiv+1,_Data_TC+1
  2007   000742  C03A  F003         	movff	?___aldiv+2,_Data_TC+2
  2008   000746  C03B  F004         	movff	?___aldiv+3,_Data_TC+3
  2009                           
  2010                           ;MagnetDigi24V1.c: 227:                 Data_TS = SumData_TS/5;
  2011   00074A  C01D  F038         	movff	_SumData_TS,___aldiv@dividend
  2012   00074E  C01E  F039         	movff	_SumData_TS+1,___aldiv@dividend+1
  2013   000752  C01F  F03A         	movff	_SumData_TS+2,___aldiv@dividend+2
  2014   000756  C020  F03B         	movff	_SumData_TS+3,___aldiv@dividend+3
  2015   00075A  0E05               	movlw	5
  2016   00075C  6E3C               	movwf	___aldiv@divisor^0,c
  2017   00075E  0E00               	movlw	0
  2018   000760  6E3D               	movwf	(___aldiv@divisor+1)^0,c
  2019   000762  0E00               	movlw	0
  2020   000764  6E3E               	movwf	(___aldiv@divisor+2)^0,c
  2021   000766  0E00               	movlw	0
  2022   000768  6E3F               	movwf	(___aldiv@divisor+3)^0,c
  2023   00076A  EC5A  F008         	call	___aldiv	;wreg free
  2024   00076E  C038  F081         	movff	?___aldiv,_Data_TS
  2025   000772  C039  F082         	movff	?___aldiv+1,_Data_TS+1
  2026   000776  C03A  F083         	movff	?___aldiv+2,_Data_TS+2
  2027   00077A  C03B  F084         	movff	?___aldiv+3,_Data_TS+3
  2028                           
  2029                           ;MagnetDigi24V1.c: 228:                 Data_AUX0 = SumData_AUX0/5;
  2030   00077E  C019  F038         	movff	_SumData_AUX0,___aldiv@dividend
  2031   000782  C01A  F039         	movff	_SumData_AUX0+1,___aldiv@dividend+1
  2032   000786  C01B  F03A         	movff	_SumData_AUX0+2,___aldiv@dividend+2
  2033   00078A  C01C  F03B         	movff	_SumData_AUX0+3,___aldiv@dividend+3
  2034   00078E  0E05               	movlw	5
  2035   000790  6E3C               	movwf	___aldiv@divisor^0,c
  2036   000792  0E00               	movlw	0
  2037   000794  6E3D               	movwf	(___aldiv@divisor+1)^0,c
  2038   000796  0E00               	movlw	0
  2039   000798  6E3E               	movwf	(___aldiv@divisor+2)^0,c
  2040   00079A  0E00               	movlw	0
  2041   00079C  6E3F               	movwf	(___aldiv@divisor+3)^0,c
  2042   00079E  EC5A  F008         	call	___aldiv	;wreg free
  2043   0007A2  C038  F079         	movff	?___aldiv,_Data_AUX0
  2044   0007A6  C039  F07A         	movff	?___aldiv+1,_Data_AUX0+1
  2045   0007AA  C03A  F07B         	movff	?___aldiv+2,_Data_AUX0+2
  2046   0007AE  C03B  F07C         	movff	?___aldiv+3,_Data_AUX0+3
  2047                           
  2048                           ;MagnetDigi24V1.c: 229:                 Data_AUX1 = SumData_AUX1/5;
  2049   0007B2  C015  F038         	movff	_SumData_AUX1,___aldiv@dividend
  2050   0007B6  C016  F039         	movff	_SumData_AUX1+1,___aldiv@dividend+1
  2051   0007BA  C017  F03A         	movff	_SumData_AUX1+2,___aldiv@dividend+2
  2052   0007BE  C018  F03B         	movff	_SumData_AUX1+3,___aldiv@dividend+3
  2053   0007C2  0E05               	movlw	5
  2054   0007C4  6E3C               	movwf	___aldiv@divisor^0,c
  2055   0007C6  0E00               	movlw	0
  2056   0007C8  6E3D               	movwf	(___aldiv@divisor+1)^0,c
  2057   0007CA  0E00               	movlw	0
  2058   0007CC  6E3E               	movwf	(___aldiv@divisor+2)^0,c
  2059   0007CE  0E00               	movlw	0
  2060   0007D0  6E3F               	movwf	(___aldiv@divisor+3)^0,c
  2061   0007D2  EC5A  F008         	call	___aldiv	;wreg free
  2062   0007D6  C038  F075         	movff	?___aldiv,_Data_AUX1
  2063   0007DA  C039  F076         	movff	?___aldiv+1,_Data_AUX1+1
  2064   0007DE  C03A  F077         	movff	?___aldiv+2,_Data_AUX1+2
  2065   0007E2  C03B  F078         	movff	?___aldiv+3,_Data_AUX1+3
  2066                           
  2067                           ;MagnetDigi24V1.c: 230:                 Data_AUX2 = SumData_AUX2/5;
  2068   0007E6  C011  F038         	movff	_SumData_AUX2,___aldiv@dividend
  2069   0007EA  C012  F039         	movff	_SumData_AUX2+1,___aldiv@dividend+1
  2070   0007EE  C013  F03A         	movff	_SumData_AUX2+2,___aldiv@dividend+2
  2071   0007F2  C014  F03B         	movff	_SumData_AUX2+3,___aldiv@dividend+3
  2072   0007F6  0E05               	movlw	5
  2073   0007F8  6E3C               	movwf	___aldiv@divisor^0,c
  2074   0007FA  0E00               	movlw	0
  2075   0007FC  6E3D               	movwf	(___aldiv@divisor+1)^0,c
  2076   0007FE  0E00               	movlw	0
  2077   000800  6E3E               	movwf	(___aldiv@divisor+2)^0,c
  2078   000802  0E00               	movlw	0
  2079   000804  6E3F               	movwf	(___aldiv@divisor+3)^0,c
  2080   000806  EC5A  F008         	call	___aldiv	;wreg free
  2081   00080A  C038  F071         	movff	?___aldiv,_Data_AUX2
  2082   00080E  C039  F072         	movff	?___aldiv+1,_Data_AUX2+1
  2083   000812  C03A  F073         	movff	?___aldiv+2,_Data_AUX2+2
  2084   000816  C03B  F074         	movff	?___aldiv+3,_Data_AUX2+3
  2085   00081A                     
  2086                           ;MagnetDigi24V1.c: 233:                 print_string("JROADQ");
  2087   00081A  0EAB               	movlw	low STR_6
  2088   00081C  6E39               	movwf	print_string@str^0,c
  2089   00081E  0E10               	movlw	high STR_6
  2090   000820  6E3A               	movwf	(print_string@str+1)^0,c
  2091   000822  ECCD  F00A         	call	_print_string	;wreg free
  2092   000826                     
  2093                           ;MagnetDigi24V1.c: 234:                 WriteByte_USART(ContaSample);
  2094   000826  5035               	movf	_ContaSample^0,w,c
  2095   000828  EC79  F00B         	call	_WriteByte_USART
  2096   00082C                     
  2097                           ;MagnetDigi24V1.c: 235:                 print_value(Data_X);
  2098   00082C  C00D  F039         	movff	_Data_X,print_value@value
  2099   000830  C00E  F03A         	movff	_Data_X+1,print_value@value+1
  2100   000834  C00F  F03B         	movff	_Data_X+2,print_value@value+2
  2101   000838  C010  F03C         	movff	_Data_X+3,print_value@value+3
  2102   00083C  EC55  F00B         	call	_print_value	;wreg free
  2103   000840                     
  2104                           ;MagnetDigi24V1.c: 236:                 print_value(Data_Y);
  2105   000840  C009  F039         	movff	_Data_Y,print_value@value
  2106   000844  C00A  F03A         	movff	_Data_Y+1,print_value@value+1
  2107   000848  C00B  F03B         	movff	_Data_Y+2,print_value@value+2
  2108   00084C  C00C  F03C         	movff	_Data_Y+3,print_value@value+3
  2109   000850  EC55  F00B         	call	_print_value	;wreg free
  2110   000854                     
  2111                           ;MagnetDigi24V1.c: 237:                 print_value(Data_Z);
  2112   000854  C005  F039         	movff	_Data_Z,print_value@value
  2113   000858  C006  F03A         	movff	_Data_Z+1,print_value@value+1
  2114   00085C  C007  F03B         	movff	_Data_Z+2,print_value@value+2
  2115   000860  C008  F03C         	movff	_Data_Z+3,print_value@value+3
  2116   000864  EC55  F00B         	call	_print_value	;wreg free
  2117   000868                     
  2118                           ;MagnetDigi24V1.c: 238:                 print_value(Data_TC);
  2119   000868  C001  F039         	movff	_Data_TC,print_value@value
  2120   00086C  C002  F03A         	movff	_Data_TC+1,print_value@value+1
  2121   000870  C003  F03B         	movff	_Data_TC+2,print_value@value+2
  2122   000874  C004  F03C         	movff	_Data_TC+3,print_value@value+3
  2123   000878  EC55  F00B         	call	_print_value	;wreg free
  2124   00087C                     
  2125                           ;MagnetDigi24V1.c: 239:                 print_value(Data_TS);
  2126   00087C  C081  F039         	movff	_Data_TS,print_value@value
  2127   000880  C082  F03A         	movff	_Data_TS+1,print_value@value+1
  2128   000884  C083  F03B         	movff	_Data_TS+2,print_value@value+2
  2129   000888  C084  F03C         	movff	_Data_TS+3,print_value@value+3
  2130   00088C  EC55  F00B         	call	_print_value	;wreg free
  2131   000890                     
  2132                           ;MagnetDigi24V1.c: 240:                 print_value(Data_AUX0);
  2133   000890  C079  F039         	movff	_Data_AUX0,print_value@value
  2134   000894  C07A  F03A         	movff	_Data_AUX0+1,print_value@value+1
  2135   000898  C07B  F03B         	movff	_Data_AUX0+2,print_value@value+2
  2136   00089C  C07C  F03C         	movff	_Data_AUX0+3,print_value@value+3
  2137   0008A0  EC55  F00B         	call	_print_value	;wreg free
  2138   0008A4                     
  2139                           ;MagnetDigi24V1.c: 241:                 print_value(Data_AUX1);
  2140   0008A4  C075  F039         	movff	_Data_AUX1,print_value@value
  2141   0008A8  C076  F03A         	movff	_Data_AUX1+1,print_value@value+1
  2142   0008AC  C077  F03B         	movff	_Data_AUX1+2,print_value@value+2
  2143   0008B0  C078  F03C         	movff	_Data_AUX1+3,print_value@value+3
  2144   0008B4  EC55  F00B         	call	_print_value	;wreg free
  2145   0008B8                     
  2146                           ;MagnetDigi24V1.c: 242:                 print_value(Data_AUX2);
  2147   0008B8  C071  F039         	movff	_Data_AUX2,print_value@value
  2148   0008BC  C072  F03A         	movff	_Data_AUX2+1,print_value@value+1
  2149   0008C0  C073  F03B         	movff	_Data_AUX2+2,print_value@value+2
  2150   0008C4  C074  F03C         	movff	_Data_AUX2+3,print_value@value+3
  2151   0008C8  EC55  F00B         	call	_print_value	;wreg free
  2152   0008CC                     
  2153                           ;MagnetDigi24V1.c: 243:                 print_string("\n\r");
  2154   0008CC  0E92               	movlw	low (STR_5+21)
  2155   0008CE  6E39               	movwf	print_string@str^0,c
  2156   0008D0  0E10               	movlw	high (STR_5+21)
  2157   0008D2  6E3A               	movwf	(print_string@str+1)^0,c
  2158   0008D4  ECCD  F00A         	call	_print_string	;wreg free
  2159   0008D8                     
  2160                           ;MagnetDigi24V1.c: 245:                 LATAbits.LA2 = 0;
  2161   0008D8  9489               	bcf	137,2,c	;volatile
  2162                           
  2163                           ;MagnetDigi24V1.c: 246:                 break;
  2164   0008DA  EF2C  F008         	goto	i2l429
  2165   0008DE                     i2l2555:
  2166   0008DE  FFFF               	dw	65535	; assembler added errata NOP
  2167                           
  2168                           ;MagnetDigi24V1.c: 248:                 TransmitCMD_USART('X');
  2169   0008E0  0E58               	movlw	88
  2170   0008E2  EC2F  F00B         	call	_TransmitCMD_USART
  2171   0008E6                     
  2172                           ;MagnetDigi24V1.c: 249:                 RCSTAbits.CREN = 1;
  2173   0008E6  88AB               	bsf	171,4,c	;volatile
  2174                           
  2175                           ;MagnetDigi24V1.c: 250:         }
  2176   0008E8  EF2C  F008         	goto	i2l429
  2177   0008EC                     i2l2559:
  2178   0008EC  FFFF               	dw	65535	; assembler added errata NOP
  2179   0008EE  505B               	movf	Interrups@ID^0,w,c
  2180   0008F0  6E53               	movwf	??_Interrups^0,c
  2181   0008F2  6A54               	clrf	(??_Interrups+1)^0,c
  2182                           
  2183                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2184                           ; Switch size 1, requested type "simple"
  2185                           ; Number of cases is 1, Range of values is 0 to 0
  2186                           ; switch strategies available:
  2187                           ; Name         Instructions Cycles
  2188                           ; simple_byte            4     3 (average)
  2189                           ;	Chosen strategy is simple_byte
  2190   0008F4  5054               	movf	(??_Interrups+1)^0,w,c
  2191   0008F6  0A00               	xorlw	0	; case 0
  2192   0008F8  B4D8               	btfsc	status,2,c
  2193   0008FA  EF81  F004         	goto	i2l2895
  2194   0008FE  EF6F  F004         	goto	i2l2555
  2195   000902                     i2l2895:
  2196   000902  FFFF               	dw	65535	; assembler added errata NOP
  2197                           
  2198                           ; Switch size 1, requested type "simple"
  2199                           ; Number of cases is 10, Range of values is 48 to 57
  2200                           ; switch strategies available:
  2201                           ; Name         Instructions Cycles
  2202                           ; simple_byte           31    16 (average)
  2203                           ;	Chosen strategy is simple_byte
  2204   000904  5053               	movf	??_Interrups^0,w,c
  2205   000906  0A30               	xorlw	48	; case 48
  2206   000908  B4D8               	btfsc	status,2,c
  2207   00090A  EF31  F000         	goto	i2l2235
  2208   00090E  0A01               	xorlw	1	; case 49
  2209   000910  B4D8               	btfsc	status,2,c
  2210   000912  EF43  F000         	goto	i2l2247
  2211   000916  0A03               	xorlw	3	; case 50
  2212   000918  B4D8               	btfsc	status,2,c
  2213   00091A  EF49  F000         	goto	i2l2249
  2214   00091E  0A01               	xorlw	1	; case 51
  2215   000920  B4D8               	btfsc	status,2,c
  2216   000922  EF4F  F000         	goto	i2l2251
  2217   000926  0A07               	xorlw	7	; case 52
  2218   000928  B4D8               	btfsc	status,2,c
  2219   00092A  EF89  F000         	goto	i2l2285
  2220   00092E  0A01               	xorlw	1	; case 53
  2221   000930  B4D8               	btfsc	status,2,c
  2222   000932  EF29  F000         	goto	i2l2231
  2223   000936  0A03               	xorlw	3	; case 54
  2224   000938  B4D8               	btfsc	status,2,c
  2225   00093A  EF8F  F000         	goto	i2l2287
  2226   00093E  0A01               	xorlw	1	; case 55
  2227   000940  B4D8               	btfsc	status,2,c
  2228   000942  EF01  F001         	goto	i2l2319
  2229   000946  0A0F               	xorlw	15	; case 56
  2230   000948  B4D8               	btfsc	status,2,c
  2231   00094A  EF07  F001         	goto	i2l2321
  2232   00094E  0A01               	xorlw	1	; case 57
  2233   000950  B4D8               	btfsc	status,2,c
  2234   000952  EF0D  F001         	goto	i2l390
  2235   000956  EF6F  F004         	goto	i2l2555
  2236   00095A                     i2l376:
  2237   00095A  FFFF               	dw	65535	; assembler added errata NOP
  2238   00095C  AAF2               	btfss	242,5,c	;volatile
  2239   00095E  EFB3  F004         	goto	i2u84_41
  2240   000962  EFB6  F004         	goto	i2u84_40
  2241   000966                     i2u84_41:
  2242   000966  FFFF               	dw	65535	; assembler added errata NOP
  2243   000968  EF2C  F008         	goto	i2l429
  2244   00096C                     i2u84_40:
  2245   00096C  FFFF               	dw	65535	; assembler added errata NOP
  2246   00096E  A4F2               	btfss	242,2,c	;volatile
  2247   000970  EFBC  F004         	goto	i2u85_41
  2248   000974  EFBF  F004         	goto	i2u85_40
  2249   000978                     i2u85_41:
  2250   000978  FFFF               	dw	65535	; assembler added errata NOP
  2251   00097A  EF2C  F008         	goto	i2l429
  2252   00097E                     i2u85_40:
  2253   00097E  FFFF               	dw	65535	; assembler added errata NOP
  2254   000980                     
  2255                           ;MagnetDigi24V1.c: 253:         LATAbits.LA2 = 1;
  2256   000980  8489               	bsf	137,2,c	;volatile
  2257                           
  2258                           ;MagnetDigi24V1.c: 255:         INTCONbits.TMR0IF = 0;
  2259   000982  94F2               	bcf	242,2,c	;volatile
  2260   000984                     
  2261                           ;MagnetDigi24V1.c: 256:         TMR0H = 0x10;
  2262   000984  0E10               	movlw	16
  2263   000986  6ED7               	movwf	215,c	;volatile
  2264                           
  2265                           ;MagnetDigi24V1.c: 257:         TMR0L = 0x00;
  2266   000988  0E00               	movlw	0
  2267   00098A  6ED6               	movwf	214,c	;volatile
  2268   00098C                     
  2269                           ;MagnetDigi24V1.c: 258:         ContaSample++;
  2270   00098C  2A35               	incf	_ContaSample^0,f,c
  2271   00098E                     
  2272                           ;MagnetDigi24V1.c: 261:         CleanHolding();
  2273   00098E  EC99  F00B         	call	_CleanHolding	;wreg free
  2274   000992                     
  2275                           ;MagnetDigi24V1.c: 263:         PORTB = 0x38;
  2276   000992  0E38               	movlw	56
  2277   000994  6E81               	movwf	129,c	;volatile
  2278   000996                     
  2279                           ;MagnetDigi24V1.c: 264:         _delay((unsigned long)((7)*(9830400UL/4000.0)));
  2280   000996  0E11               	movlw	17
  2281   000998  6E53               	movwf	??_Interrups^0,c
  2282   00099A  0EC3               	movlw	195
  2283   00099C                     i2u108_47:
  2284   00099C  FFFF               	dw	65535	; errata NOP
  2285   00099E  2EE8               	decfsz	wreg,f,c
  2286   0009A0  D7FD               	bra	i2u108_47
  2287   0009A2  2E53               	decfsz	??_Interrups^0,f,c
  2288   0009A4  D7FB               	bra	i2u108_47
  2289   0009A6  D000               	nop2	
  2290   0009A8  F000               	nop	
  2291   0009AA                     
  2292                           ;MagnetDigi24V1.c: 265:         SumData_X = 0;
  2293   0009AA  0E00               	movlw	0
  2294   0009AC  6E2D               	movwf	_SumData_X^0,c
  2295   0009AE  0E00               	movlw	0
  2296   0009B0  6E2E               	movwf	(_SumData_X+1)^0,c
  2297   0009B2  0E00               	movlw	0
  2298   0009B4  6E2F               	movwf	(_SumData_X+2)^0,c
  2299   0009B6  0E00               	movlw	0
  2300   0009B8  6E30               	movwf	(_SumData_X+3)^0,c
  2301   0009BA                     
  2302                           ;MagnetDigi24V1.c: 266:         ReadAD24(0,0x00);
  2303   0009BA  0E00               	movlw	0
  2304   0009BC  6E46               	movwf	ReadAD24@cmd_convert^0,c
  2305   0009BE  0E00               	movlw	0
  2306   0009C0  ECF6  F008         	call	_ReadAD24
  2307   0009C4                     
  2308                           ;MagnetDigi24V1.c: 267:         for(conta=0; conta<5; conta++){
  2309   0009C4  0E00               	movlw	0
  2310   0009C6  6E5C               	movwf	Interrups@conta^0,c
  2311   0009C8                     i2l2583:
  2312   0009C8  FFFF               	dw	65535	; assembler added errata NOP
  2313                           
  2314                           ;MagnetDigi24V1.c: 268:             Data_X = ReadAD24(1,0x00);
  2315   0009CA  0E00               	movlw	0
  2316   0009CC  6E46               	movwf	ReadAD24@cmd_convert^0,c
  2317   0009CE  0E01               	movlw	1
  2318   0009D0  ECF6  F008         	call	_ReadAD24
  2319   0009D4  C046  F00D         	movff	?_ReadAD24,_Data_X
  2320   0009D8  C047  F00E         	movff	?_ReadAD24+1,_Data_X+1
  2321   0009DC  C048  F00F         	movff	?_ReadAD24+2,_Data_X+2
  2322   0009E0  C049  F010         	movff	?_ReadAD24+3,_Data_X+3
  2323   0009E4                     
  2324                           ;MagnetDigi24V1.c: 269:             SumData_X = SumData_X + Data_X;
  2325   0009E4  500D               	movf	_Data_X^0,w,c
  2326   0009E6  242D               	addwf	_SumData_X^0,w,c
  2327   0009E8  6E2D               	movwf	_SumData_X^0,c
  2328   0009EA  500E               	movf	(_Data_X+1)^0,w,c
  2329   0009EC  202E               	addwfc	(_SumData_X+1)^0,w,c
  2330   0009EE  6E2E               	movwf	(_SumData_X+1)^0,c
  2331   0009F0  500F               	movf	(_Data_X+2)^0,w,c
  2332   0009F2  202F               	addwfc	(_SumData_X+2)^0,w,c
  2333   0009F4  6E2F               	movwf	(_SumData_X+2)^0,c
  2334   0009F6  5010               	movf	(_Data_X+3)^0,w,c
  2335   0009F8  2030               	addwfc	(_SumData_X+3)^0,w,c
  2336   0009FA  6E30               	movwf	(_SumData_X+3)^0,c
  2337   0009FC                     
  2338                           ;MagnetDigi24V1.c: 270:         }
  2339   0009FC  2A5C               	incf	Interrups@conta^0,f,c
  2340   0009FE  0E04               	movlw	4
  2341   000A00  645C               	cpfsgt	Interrups@conta^0,c
  2342   000A02  EF05  F005         	goto	i2u86_41
  2343   000A06  EF08  F005         	goto	i2u86_40
  2344   000A0A                     i2u86_41:
  2345   000A0A  FFFF               	dw	65535	; assembler added errata NOP
  2346   000A0C  EFE4  F004         	goto	i2l2583
  2347   000A10                     i2u86_40:
  2348   000A10  FFFF               	dw	65535	; assembler added errata NOP
  2349   000A12                     
  2350                           ;MagnetDigi24V1.c: 272:         CleanHolding();
  2351   000A12  EC99  F00B         	call	_CleanHolding	;wreg free
  2352   000A16                     
  2353                           ;MagnetDigi24V1.c: 274:         PORTB = 0x18;
  2354   000A16  0E18               	movlw	24
  2355   000A18  6E81               	movwf	129,c	;volatile
  2356   000A1A                     
  2357                           ;MagnetDigi24V1.c: 275:         _delay((unsigned long)((7)*(9830400UL/4000.0)));
  2358   000A1A  0E11               	movlw	17
  2359   000A1C  6E53               	movwf	??_Interrups^0,c
  2360   000A1E  0EC3               	movlw	195
  2361   000A20                     i2u109_47:
  2362   000A20  FFFF               	dw	65535	; errata NOP
  2363   000A22  2EE8               	decfsz	wreg,f,c
  2364   000A24  D7FD               	bra	i2u109_47
  2365   000A26  2E53               	decfsz	??_Interrups^0,f,c
  2366   000A28  D7FB               	bra	i2u109_47
  2367   000A2A  D000               	nop2	
  2368   000A2C  F000               	nop	
  2369   000A2E                     
  2370                           ;MagnetDigi24V1.c: 276:         SumData_Y = 0;
  2371   000A2E  0E00               	movlw	0
  2372   000A30  6E29               	movwf	_SumData_Y^0,c
  2373   000A32  0E00               	movlw	0
  2374   000A34  6E2A               	movwf	(_SumData_Y+1)^0,c
  2375   000A36  0E00               	movlw	0
  2376   000A38  6E2B               	movwf	(_SumData_Y+2)^0,c
  2377   000A3A  0E00               	movlw	0
  2378   000A3C  6E2C               	movwf	(_SumData_Y+3)^0,c
  2379   000A3E                     
  2380                           ;MagnetDigi24V1.c: 277:         ReadAD24(0,0x00);
  2381   000A3E  0E00               	movlw	0
  2382   000A40  6E46               	movwf	ReadAD24@cmd_convert^0,c
  2383   000A42  0E00               	movlw	0
  2384   000A44  ECF6  F008         	call	_ReadAD24
  2385   000A48                     
  2386                           ;MagnetDigi24V1.c: 278:         for(conta=0; conta<5; conta++){
  2387   000A48  0E00               	movlw	0
  2388   000A4A  6E5C               	movwf	Interrups@conta^0,c
  2389   000A4C                     i2l2607:
  2390   000A4C  FFFF               	dw	65535	; assembler added errata NOP
  2391                           
  2392                           ;MagnetDigi24V1.c: 279:             Data_Y = ReadAD24(1,0x00);
  2393   000A4E  0E00               	movlw	0
  2394   000A50  6E46               	movwf	ReadAD24@cmd_convert^0,c
  2395   000A52  0E01               	movlw	1
  2396   000A54  ECF6  F008         	call	_ReadAD24
  2397   000A58  C046  F009         	movff	?_ReadAD24,_Data_Y
  2398   000A5C  C047  F00A         	movff	?_ReadAD24+1,_Data_Y+1
  2399   000A60  C048  F00B         	movff	?_ReadAD24+2,_Data_Y+2
  2400   000A64  C049  F00C         	movff	?_ReadAD24+3,_Data_Y+3
  2401   000A68                     
  2402                           ;MagnetDigi24V1.c: 280:             SumData_Y = SumData_Y + Data_Y;
  2403   000A68  5009               	movf	_Data_Y^0,w,c
  2404   000A6A  2429               	addwf	_SumData_Y^0,w,c
  2405   000A6C  6E29               	movwf	_SumData_Y^0,c
  2406   000A6E  500A               	movf	(_Data_Y+1)^0,w,c
  2407   000A70  202A               	addwfc	(_SumData_Y+1)^0,w,c
  2408   000A72  6E2A               	movwf	(_SumData_Y+1)^0,c
  2409   000A74  500B               	movf	(_Data_Y+2)^0,w,c
  2410   000A76  202B               	addwfc	(_SumData_Y+2)^0,w,c
  2411   000A78  6E2B               	movwf	(_SumData_Y+2)^0,c
  2412   000A7A  500C               	movf	(_Data_Y+3)^0,w,c
  2413   000A7C  202C               	addwfc	(_SumData_Y+3)^0,w,c
  2414   000A7E  6E2C               	movwf	(_SumData_Y+3)^0,c
  2415   000A80                     
  2416                           ;MagnetDigi24V1.c: 281:         }
  2417   000A80  2A5C               	incf	Interrups@conta^0,f,c
  2418   000A82  0E04               	movlw	4
  2419   000A84  645C               	cpfsgt	Interrups@conta^0,c
  2420   000A86  EF47  F005         	goto	i2u87_41
  2421   000A8A  EF4A  F005         	goto	i2u87_40
  2422   000A8E                     i2u87_41:
  2423   000A8E  FFFF               	dw	65535	; assembler added errata NOP
  2424   000A90  EF26  F005         	goto	i2l2607
  2425   000A94                     i2u87_40:
  2426   000A94  FFFF               	dw	65535	; assembler added errata NOP
  2427   000A96                     
  2428                           ;MagnetDigi24V1.c: 283:         CleanHolding();
  2429   000A96  EC99  F00B         	call	_CleanHolding	;wreg free
  2430   000A9A                     
  2431                           ;MagnetDigi24V1.c: 285:         PORTB = 0x28;
  2432   000A9A  0E28               	movlw	40
  2433   000A9C  6E81               	movwf	129,c	;volatile
  2434   000A9E                     
  2435                           ;MagnetDigi24V1.c: 286:         _delay((unsigned long)((7)*(9830400UL/4000.0)));
  2436   000A9E  0E11               	movlw	17
  2437   000AA0  6E53               	movwf	??_Interrups^0,c
  2438   000AA2  0EC3               	movlw	195
  2439   000AA4                     i2u110_47:
  2440   000AA4  FFFF               	dw	65535	; errata NOP
  2441   000AA6  2EE8               	decfsz	wreg,f,c
  2442   000AA8  D7FD               	bra	i2u110_47
  2443   000AAA  2E53               	decfsz	??_Interrups^0,f,c
  2444   000AAC  D7FB               	bra	i2u110_47
  2445   000AAE  D000               	nop2	
  2446   000AB0  F000               	nop	
  2447   000AB2                     
  2448                           ;MagnetDigi24V1.c: 287:         SumData_Z = 0;
  2449   000AB2  0E00               	movlw	0
  2450   000AB4  6E25               	movwf	_SumData_Z^0,c
  2451   000AB6  0E00               	movlw	0
  2452   000AB8  6E26               	movwf	(_SumData_Z+1)^0,c
  2453   000ABA  0E00               	movlw	0
  2454   000ABC  6E27               	movwf	(_SumData_Z+2)^0,c
  2455   000ABE  0E00               	movlw	0
  2456   000AC0  6E28               	movwf	(_SumData_Z+3)^0,c
  2457   000AC2                     
  2458                           ;MagnetDigi24V1.c: 288:         ReadAD24(0,0x00);
  2459   000AC2  0E00               	movlw	0
  2460   000AC4  6E46               	movwf	ReadAD24@cmd_convert^0,c
  2461   000AC6  0E00               	movlw	0
  2462   000AC8  ECF6  F008         	call	_ReadAD24
  2463   000ACC                     
  2464                           ;MagnetDigi24V1.c: 289:         for(conta=0; conta<5; conta++){
  2465   000ACC  0E00               	movlw	0
  2466   000ACE  6E5C               	movwf	Interrups@conta^0,c
  2467   000AD0                     i2l2631:
  2468   000AD0  FFFF               	dw	65535	; assembler added errata NOP
  2469                           
  2470                           ;MagnetDigi24V1.c: 290:             Data_Z = ReadAD24(1,0x00);
  2471   000AD2  0E00               	movlw	0
  2472   000AD4  6E46               	movwf	ReadAD24@cmd_convert^0,c
  2473   000AD6  0E01               	movlw	1
  2474   000AD8  ECF6  F008         	call	_ReadAD24
  2475   000ADC  C046  F005         	movff	?_ReadAD24,_Data_Z
  2476   000AE0  C047  F006         	movff	?_ReadAD24+1,_Data_Z+1
  2477   000AE4  C048  F007         	movff	?_ReadAD24+2,_Data_Z+2
  2478   000AE8  C049  F008         	movff	?_ReadAD24+3,_Data_Z+3
  2479   000AEC                     
  2480                           ;MagnetDigi24V1.c: 291:             SumData_Z = SumData_Z + Data_Z;
  2481   000AEC  5005               	movf	_Data_Z^0,w,c
  2482   000AEE  2425               	addwf	_SumData_Z^0,w,c
  2483   000AF0  6E25               	movwf	_SumData_Z^0,c
  2484   000AF2  5006               	movf	(_Data_Z+1)^0,w,c
  2485   000AF4  2026               	addwfc	(_SumData_Z+1)^0,w,c
  2486   000AF6  6E26               	movwf	(_SumData_Z+1)^0,c
  2487   000AF8  5007               	movf	(_Data_Z+2)^0,w,c
  2488   000AFA  2027               	addwfc	(_SumData_Z+2)^0,w,c
  2489   000AFC  6E27               	movwf	(_SumData_Z+2)^0,c
  2490   000AFE  5008               	movf	(_Data_Z+3)^0,w,c
  2491   000B00  2028               	addwfc	(_SumData_Z+3)^0,w,c
  2492   000B02  6E28               	movwf	(_SumData_Z+3)^0,c
  2493   000B04                     
  2494                           ;MagnetDigi24V1.c: 292:         }
  2495   000B04  2A5C               	incf	Interrups@conta^0,f,c
  2496   000B06  0E04               	movlw	4
  2497   000B08  645C               	cpfsgt	Interrups@conta^0,c
  2498   000B0A  EF89  F005         	goto	i2u88_41
  2499   000B0E  EF8C  F005         	goto	i2u88_40
  2500   000B12                     i2u88_41:
  2501   000B12  FFFF               	dw	65535	; assembler added errata NOP
  2502   000B14  EF68  F005         	goto	i2l2631
  2503   000B18                     i2u88_40:
  2504   000B18  FFFF               	dw	65535	; assembler added errata NOP
  2505   000B1A                     
  2506                           ;MagnetDigi24V1.c: 294:         CleanHolding();
  2507   000B1A  EC99  F00B         	call	_CleanHolding	;wreg free
  2508   000B1E                     
  2509                           ;MagnetDigi24V1.c: 296:         PORTB = 0x08;
  2510   000B1E  0E08               	movlw	8
  2511   000B20  6E81               	movwf	129,c	;volatile
  2512   000B22                     
  2513                           ;MagnetDigi24V1.c: 297:         _delay((unsigned long)((7)*(9830400UL/4000.0)));
  2514   000B22  0E11               	movlw	17
  2515   000B24  6E53               	movwf	??_Interrups^0,c
  2516   000B26  0EC3               	movlw	195
  2517   000B28                     i2u111_47:
  2518   000B28  FFFF               	dw	65535	; errata NOP
  2519   000B2A  2EE8               	decfsz	wreg,f,c
  2520   000B2C  D7FD               	bra	i2u111_47
  2521   000B2E  2E53               	decfsz	??_Interrups^0,f,c
  2522   000B30  D7FB               	bra	i2u111_47
  2523   000B32  D000               	nop2	
  2524   000B34  F000               	nop	
  2525   000B36                     
  2526                           ;MagnetDigi24V1.c: 298:         SumData_TC = 0;
  2527   000B36  0E00               	movlw	0
  2528   000B38  6E21               	movwf	_SumData_TC^0,c
  2529   000B3A  0E00               	movlw	0
  2530   000B3C  6E22               	movwf	(_SumData_TC+1)^0,c
  2531   000B3E  0E00               	movlw	0
  2532   000B40  6E23               	movwf	(_SumData_TC+2)^0,c
  2533   000B42  0E00               	movlw	0
  2534   000B44  6E24               	movwf	(_SumData_TC+3)^0,c
  2535   000B46                     
  2536                           ;MagnetDigi24V1.c: 299:         ReadAD24(0,0x00);
  2537   000B46  0E00               	movlw	0
  2538   000B48  6E46               	movwf	ReadAD24@cmd_convert^0,c
  2539   000B4A  0E00               	movlw	0
  2540   000B4C  ECF6  F008         	call	_ReadAD24
  2541   000B50                     
  2542                           ;MagnetDigi24V1.c: 300:         for(conta=0; conta<5; conta++){
  2543   000B50  0E00               	movlw	0
  2544   000B52  6E5C               	movwf	Interrups@conta^0,c
  2545   000B54                     i2l2655:
  2546   000B54  FFFF               	dw	65535	; assembler added errata NOP
  2547                           
  2548                           ;MagnetDigi24V1.c: 301:             Data_TC = ReadAD24(1,0x00);
  2549   000B56  0E00               	movlw	0
  2550   000B58  6E46               	movwf	ReadAD24@cmd_convert^0,c
  2551   000B5A  0E01               	movlw	1
  2552   000B5C  ECF6  F008         	call	_ReadAD24
  2553   000B60  C046  F001         	movff	?_ReadAD24,_Data_TC
  2554   000B64  C047  F002         	movff	?_ReadAD24+1,_Data_TC+1
  2555   000B68  C048  F003         	movff	?_ReadAD24+2,_Data_TC+2
  2556   000B6C  C049  F004         	movff	?_ReadAD24+3,_Data_TC+3
  2557   000B70                     
  2558                           ;MagnetDigi24V1.c: 302:             SumData_TC = SumData_TC + Data_TC;
  2559   000B70  5001               	movf	_Data_TC^0,w,c
  2560   000B72  2421               	addwf	_SumData_TC^0,w,c
  2561   000B74  6E21               	movwf	_SumData_TC^0,c
  2562   000B76  5002               	movf	(_Data_TC+1)^0,w,c
  2563   000B78  2022               	addwfc	(_SumData_TC+1)^0,w,c
  2564   000B7A  6E22               	movwf	(_SumData_TC+1)^0,c
  2565   000B7C  5003               	movf	(_Data_TC+2)^0,w,c
  2566   000B7E  2023               	addwfc	(_SumData_TC+2)^0,w,c
  2567   000B80  6E23               	movwf	(_SumData_TC+2)^0,c
  2568   000B82  5004               	movf	(_Data_TC+3)^0,w,c
  2569   000B84  2024               	addwfc	(_SumData_TC+3)^0,w,c
  2570   000B86  6E24               	movwf	(_SumData_TC+3)^0,c
  2571   000B88                     
  2572                           ;MagnetDigi24V1.c: 303:         }
  2573   000B88  2A5C               	incf	Interrups@conta^0,f,c
  2574   000B8A  0E04               	movlw	4
  2575   000B8C  645C               	cpfsgt	Interrups@conta^0,c
  2576   000B8E  EFCB  F005         	goto	i2u89_41
  2577   000B92  EFCE  F005         	goto	i2u89_40
  2578   000B96                     i2u89_41:
  2579   000B96  FFFF               	dw	65535	; assembler added errata NOP
  2580   000B98  EFAA  F005         	goto	i2l2655
  2581   000B9C                     i2u89_40:
  2582   000B9C  FFFF               	dw	65535	; assembler added errata NOP
  2583   000B9E                     
  2584                           ;MagnetDigi24V1.c: 305:         CleanHolding();
  2585   000B9E  EC99  F00B         	call	_CleanHolding	;wreg free
  2586   000BA2                     
  2587                           ;MagnetDigi24V1.c: 307:         PORTB = 0x04;
  2588   000BA2  0E04               	movlw	4
  2589   000BA4  6E81               	movwf	129,c	;volatile
  2590   000BA6                     
  2591                           ;MagnetDigi24V1.c: 308:         _delay((unsigned long)((7)*(9830400UL/4000.0)));
  2592   000BA6  0E11               	movlw	17
  2593   000BA8  6E53               	movwf	??_Interrups^0,c
  2594   000BAA  0EC3               	movlw	195
  2595   000BAC                     i2u112_47:
  2596   000BAC  FFFF               	dw	65535	; errata NOP
  2597   000BAE  2EE8               	decfsz	wreg,f,c
  2598   000BB0  D7FD               	bra	i2u112_47
  2599   000BB2  2E53               	decfsz	??_Interrups^0,f,c
  2600   000BB4  D7FB               	bra	i2u112_47
  2601   000BB6  D000               	nop2	
  2602   000BB8  F000               	nop	
  2603   000BBA                     
  2604                           ;MagnetDigi24V1.c: 309:         SumData_TS = 0;
  2605   000BBA  0E00               	movlw	0
  2606   000BBC  6E1D               	movwf	_SumData_TS^0,c
  2607   000BBE  0E00               	movlw	0
  2608   000BC0  6E1E               	movwf	(_SumData_TS+1)^0,c
  2609   000BC2  0E00               	movlw	0
  2610   000BC4  6E1F               	movwf	(_SumData_TS+2)^0,c
  2611   000BC6  0E00               	movlw	0
  2612   000BC8  6E20               	movwf	(_SumData_TS+3)^0,c
  2613   000BCA                     
  2614                           ;MagnetDigi24V1.c: 310:         ReadAD24(0,0x00);
  2615   000BCA  0E00               	movlw	0
  2616   000BCC  6E46               	movwf	ReadAD24@cmd_convert^0,c
  2617   000BCE  0E00               	movlw	0
  2618   000BD0  ECF6  F008         	call	_ReadAD24
  2619   000BD4                     
  2620                           ;MagnetDigi24V1.c: 311:         for(conta=0; conta<5; conta++){
  2621   000BD4  0E00               	movlw	0
  2622   000BD6  6E5C               	movwf	Interrups@conta^0,c
  2623   000BD8                     i2l2679:
  2624   000BD8  FFFF               	dw	65535	; assembler added errata NOP
  2625                           
  2626                           ;MagnetDigi24V1.c: 312:             Data_TS = ReadAD24(1,0x00);
  2627   000BDA  0E00               	movlw	0
  2628   000BDC  6E46               	movwf	ReadAD24@cmd_convert^0,c
  2629   000BDE  0E01               	movlw	1
  2630   000BE0  ECF6  F008         	call	_ReadAD24
  2631   000BE4  C046  F081         	movff	?_ReadAD24,_Data_TS
  2632   000BE8  C047  F082         	movff	?_ReadAD24+1,_Data_TS+1
  2633   000BEC  C048  F083         	movff	?_ReadAD24+2,_Data_TS+2
  2634   000BF0  C049  F084         	movff	?_ReadAD24+3,_Data_TS+3
  2635   000BF4                     
  2636                           ;MagnetDigi24V1.c: 313:             SumData_TS = SumData_TS + Data_TS;
  2637   000BF4  0100               	movlb	0	; () banked
  2638   000BF6  5181               	movf	_Data_TS& (0+255),w,b
  2639   000BF8  241D               	addwf	_SumData_TS^0,w,c
  2640   000BFA  6E1D               	movwf	_SumData_TS^0,c
  2641   000BFC  5182               	movf	(_Data_TS+1)& (0+255),w,b
  2642   000BFE  201E               	addwfc	(_SumData_TS+1)^0,w,c
  2643   000C00  6E1E               	movwf	(_SumData_TS+1)^0,c
  2644   000C02  5183               	movf	(_Data_TS+2)& (0+255),w,b
  2645   000C04  201F               	addwfc	(_SumData_TS+2)^0,w,c
  2646   000C06  6E1F               	movwf	(_SumData_TS+2)^0,c
  2647   000C08  5184               	movf	(_Data_TS+3)& (0+255),w,b
  2648   000C0A  2020               	addwfc	(_SumData_TS+3)^0,w,c
  2649   000C0C  6E20               	movwf	(_SumData_TS+3)^0,c
  2650   000C0E                     
  2651                           ; BSR set to: 0
  2652                           ;MagnetDigi24V1.c: 314:         }
  2653   000C0E  2A5C               	incf	Interrups@conta^0,f,c
  2654   000C10                     
  2655                           ; BSR set to: 0
  2656   000C10  0E04               	movlw	4
  2657   000C12  645C               	cpfsgt	Interrups@conta^0,c
  2658   000C14  EF0E  F006         	goto	i2u90_41
  2659   000C18  EF11  F006         	goto	i2u90_40
  2660   000C1C                     i2u90_41:
  2661   000C1C  FFFF               	dw	65535	; assembler added errata NOP
  2662   000C1E  EFEC  F005         	goto	i2l2679
  2663   000C22                     i2u90_40:
  2664   000C22  FFFF               	dw	65535	; assembler added errata NOP
  2665   000C24                     
  2666                           ; BSR set to: 0
  2667                           ;MagnetDigi24V1.c: 316:         CleanHolding();
  2668   000C24  EC99  F00B         	call	_CleanHolding	;wreg free
  2669   000C28                     
  2670                           ;MagnetDigi24V1.c: 318:         PORTB = 0x34;
  2671   000C28  0E34               	movlw	52
  2672   000C2A  6E81               	movwf	129,c	;volatile
  2673   000C2C                     
  2674                           ;MagnetDigi24V1.c: 319:         _delay((unsigned long)((7)*(9830400UL/4000.0)));
  2675   000C2C  0E11               	movlw	17
  2676   000C2E  6E53               	movwf	??_Interrups^0,c
  2677   000C30  0EC3               	movlw	195
  2678   000C32                     i2u113_47:
  2679   000C32  FFFF               	dw	65535	; errata NOP
  2680   000C34  2EE8               	decfsz	wreg,f,c
  2681   000C36  D7FD               	bra	i2u113_47
  2682   000C38  2E53               	decfsz	??_Interrups^0,f,c
  2683   000C3A  D7FB               	bra	i2u113_47
  2684   000C3C  D000               	nop2	
  2685   000C3E  F000               	nop	
  2686   000C40                     
  2687                           ;MagnetDigi24V1.c: 320:         SumData_AUX0 = 0;
  2688   000C40  0E00               	movlw	0
  2689   000C42  6E19               	movwf	_SumData_AUX0^0,c
  2690   000C44  0E00               	movlw	0
  2691   000C46  6E1A               	movwf	(_SumData_AUX0+1)^0,c
  2692   000C48  0E00               	movlw	0
  2693   000C4A  6E1B               	movwf	(_SumData_AUX0+2)^0,c
  2694   000C4C  0E00               	movlw	0
  2695   000C4E  6E1C               	movwf	(_SumData_AUX0+3)^0,c
  2696   000C50                     
  2697                           ;MagnetDigi24V1.c: 321:         ReadAD24(0,0x00);
  2698   000C50  0E00               	movlw	0
  2699   000C52  6E46               	movwf	ReadAD24@cmd_convert^0,c
  2700   000C54  0E00               	movlw	0
  2701   000C56  ECF6  F008         	call	_ReadAD24
  2702   000C5A                     
  2703                           ;MagnetDigi24V1.c: 322:         for(conta=0; conta<5; conta++){
  2704   000C5A  0E00               	movlw	0
  2705   000C5C  6E5C               	movwf	Interrups@conta^0,c
  2706   000C5E                     i2l2703:
  2707   000C5E  FFFF               	dw	65535	; assembler added errata NOP
  2708                           
  2709                           ;MagnetDigi24V1.c: 323:             Data_AUX0 = ReadAD24(1,0x00);
  2710   000C60  0E00               	movlw	0
  2711   000C62  6E46               	movwf	ReadAD24@cmd_convert^0,c
  2712   000C64  0E01               	movlw	1
  2713   000C66  ECF6  F008         	call	_ReadAD24
  2714   000C6A  C046  F079         	movff	?_ReadAD24,_Data_AUX0
  2715   000C6E  C047  F07A         	movff	?_ReadAD24+1,_Data_AUX0+1
  2716   000C72  C048  F07B         	movff	?_ReadAD24+2,_Data_AUX0+2
  2717   000C76  C049  F07C         	movff	?_ReadAD24+3,_Data_AUX0+3
  2718   000C7A                     
  2719                           ;MagnetDigi24V1.c: 324:             SumData_AUX0 = SumData_AUX0 + Data_AUX0;
  2720   000C7A  0100               	movlb	0	; () banked
  2721   000C7C  5179               	movf	_Data_AUX0& (0+255),w,b
  2722   000C7E  2419               	addwf	_SumData_AUX0^0,w,c
  2723   000C80  6E19               	movwf	_SumData_AUX0^0,c
  2724   000C82  517A               	movf	(_Data_AUX0+1)& (0+255),w,b
  2725   000C84  201A               	addwfc	(_SumData_AUX0+1)^0,w,c
  2726   000C86  6E1A               	movwf	(_SumData_AUX0+1)^0,c
  2727   000C88  517B               	movf	(_Data_AUX0+2)& (0+255),w,b
  2728   000C8A  201B               	addwfc	(_SumData_AUX0+2)^0,w,c
  2729   000C8C  6E1B               	movwf	(_SumData_AUX0+2)^0,c
  2730   000C8E  517C               	movf	(_Data_AUX0+3)& (0+255),w,b
  2731   000C90  201C               	addwfc	(_SumData_AUX0+3)^0,w,c
  2732   000C92  6E1C               	movwf	(_SumData_AUX0+3)^0,c
  2733   000C94                     
  2734                           ; BSR set to: 0
  2735                           ;MagnetDigi24V1.c: 325:         }
  2736   000C94  2A5C               	incf	Interrups@conta^0,f,c
  2737   000C96                     
  2738                           ; BSR set to: 0
  2739   000C96  0E04               	movlw	4
  2740   000C98  645C               	cpfsgt	Interrups@conta^0,c
  2741   000C9A  EF51  F006         	goto	i2u91_41
  2742   000C9E  EF54  F006         	goto	i2u91_40
  2743   000CA2                     i2u91_41:
  2744   000CA2  FFFF               	dw	65535	; assembler added errata NOP
  2745   000CA4  EF2F  F006         	goto	i2l2703
  2746   000CA8                     i2u91_40:
  2747   000CA8  FFFF               	dw	65535	; assembler added errata NOP
  2748   000CAA                     
  2749                           ; BSR set to: 0
  2750                           ;MagnetDigi24V1.c: 327:         CleanHolding();
  2751   000CAA  EC99  F00B         	call	_CleanHolding	;wreg free
  2752   000CAE                     
  2753                           ;MagnetDigi24V1.c: 329:         PORTB = 0x14;
  2754   000CAE  0E14               	movlw	20
  2755   000CB0  6E81               	movwf	129,c	;volatile
  2756   000CB2                     
  2757                           ;MagnetDigi24V1.c: 330:         _delay((unsigned long)((7)*(9830400UL/4000.0)));
  2758   000CB2  0E11               	movlw	17
  2759   000CB4  6E53               	movwf	??_Interrups^0,c
  2760   000CB6  0EC3               	movlw	195
  2761   000CB8                     i2u114_47:
  2762   000CB8  FFFF               	dw	65535	; errata NOP
  2763   000CBA  2EE8               	decfsz	wreg,f,c
  2764   000CBC  D7FD               	bra	i2u114_47
  2765   000CBE  2E53               	decfsz	??_Interrups^0,f,c
  2766   000CC0  D7FB               	bra	i2u114_47
  2767   000CC2  D000               	nop2	
  2768   000CC4  F000               	nop	
  2769   000CC6                     
  2770                           ;MagnetDigi24V1.c: 331:         SumData_AUX1 = 0;
  2771   000CC6  0E00               	movlw	0
  2772   000CC8  6E15               	movwf	_SumData_AUX1^0,c
  2773   000CCA  0E00               	movlw	0
  2774   000CCC  6E16               	movwf	(_SumData_AUX1+1)^0,c
  2775   000CCE  0E00               	movlw	0
  2776   000CD0  6E17               	movwf	(_SumData_AUX1+2)^0,c
  2777   000CD2  0E00               	movlw	0
  2778   000CD4  6E18               	movwf	(_SumData_AUX1+3)^0,c
  2779   000CD6                     
  2780                           ;MagnetDigi24V1.c: 332:         ReadAD24(0,0x00);
  2781   000CD6  0E00               	movlw	0
  2782   000CD8  6E46               	movwf	ReadAD24@cmd_convert^0,c
  2783   000CDA  0E00               	movlw	0
  2784   000CDC  ECF6  F008         	call	_ReadAD24
  2785   000CE0                     
  2786                           ;MagnetDigi24V1.c: 333:         for(conta=0; conta<5; conta++){
  2787   000CE0  0E00               	movlw	0
  2788   000CE2  6E5C               	movwf	Interrups@conta^0,c
  2789   000CE4                     i2l2727:
  2790   000CE4  FFFF               	dw	65535	; assembler added errata NOP
  2791                           
  2792                           ;MagnetDigi24V1.c: 334:             Data_AUX1 = ReadAD24(1,0x00);
  2793   000CE6  0E00               	movlw	0
  2794   000CE8  6E46               	movwf	ReadAD24@cmd_convert^0,c
  2795   000CEA  0E01               	movlw	1
  2796   000CEC  ECF6  F008         	call	_ReadAD24
  2797   000CF0  C046  F075         	movff	?_ReadAD24,_Data_AUX1
  2798   000CF4  C047  F076         	movff	?_ReadAD24+1,_Data_AUX1+1
  2799   000CF8  C048  F077         	movff	?_ReadAD24+2,_Data_AUX1+2
  2800   000CFC  C049  F078         	movff	?_ReadAD24+3,_Data_AUX1+3
  2801   000D00                     
  2802                           ;MagnetDigi24V1.c: 335:             SumData_AUX1 = SumData_AUX1 + Data_AUX1;
  2803   000D00  0100               	movlb	0	; () banked
  2804   000D02  5175               	movf	_Data_AUX1& (0+255),w,b
  2805   000D04  2415               	addwf	_SumData_AUX1^0,w,c
  2806   000D06  6E15               	movwf	_SumData_AUX1^0,c
  2807   000D08  5176               	movf	(_Data_AUX1+1)& (0+255),w,b
  2808   000D0A  2016               	addwfc	(_SumData_AUX1+1)^0,w,c
  2809   000D0C  6E16               	movwf	(_SumData_AUX1+1)^0,c
  2810   000D0E  5177               	movf	(_Data_AUX1+2)& (0+255),w,b
  2811   000D10  2017               	addwfc	(_SumData_AUX1+2)^0,w,c
  2812   000D12  6E17               	movwf	(_SumData_AUX1+2)^0,c
  2813   000D14  5178               	movf	(_Data_AUX1+3)& (0+255),w,b
  2814   000D16  2018               	addwfc	(_SumData_AUX1+3)^0,w,c
  2815   000D18  6E18               	movwf	(_SumData_AUX1+3)^0,c
  2816   000D1A                     
  2817                           ; BSR set to: 0
  2818                           ;MagnetDigi24V1.c: 336:         }
  2819   000D1A  2A5C               	incf	Interrups@conta^0,f,c
  2820   000D1C                     
  2821                           ; BSR set to: 0
  2822   000D1C  0E04               	movlw	4
  2823   000D1E  645C               	cpfsgt	Interrups@conta^0,c
  2824   000D20  EF94  F006         	goto	i2u92_41
  2825   000D24  EF97  F006         	goto	i2u92_40
  2826   000D28                     i2u92_41:
  2827   000D28  FFFF               	dw	65535	; assembler added errata NOP
  2828   000D2A  EF72  F006         	goto	i2l2727
  2829   000D2E                     i2u92_40:
  2830   000D2E  FFFF               	dw	65535	; assembler added errata NOP
  2831   000D30                     
  2832                           ; BSR set to: 0
  2833                           ;MagnetDigi24V1.c: 338:         CleanHolding();
  2834   000D30  EC99  F00B         	call	_CleanHolding	;wreg free
  2835   000D34                     
  2836                           ;MagnetDigi24V1.c: 340:         PORTB = 0x24;
  2837   000D34  0E24               	movlw	36
  2838   000D36  6E81               	movwf	129,c	;volatile
  2839   000D38                     
  2840                           ;MagnetDigi24V1.c: 341:         _delay((unsigned long)((7)*(9830400UL/4000.0)));
  2841   000D38  0E11               	movlw	17
  2842   000D3A  6E53               	movwf	??_Interrups^0,c
  2843   000D3C  0EC3               	movlw	195
  2844   000D3E                     i2u115_47:
  2845   000D3E  FFFF               	dw	65535	; errata NOP
  2846   000D40  2EE8               	decfsz	wreg,f,c
  2847   000D42  D7FD               	bra	i2u115_47
  2848   000D44  2E53               	decfsz	??_Interrups^0,f,c
  2849   000D46  D7FB               	bra	i2u115_47
  2850   000D48  D000               	nop2	
  2851   000D4A  F000               	nop	
  2852   000D4C                     
  2853                           ;MagnetDigi24V1.c: 342:         SumData_AUX2 = 0;
  2854   000D4C  0E00               	movlw	0
  2855   000D4E  6E11               	movwf	_SumData_AUX2^0,c
  2856   000D50  0E00               	movlw	0
  2857   000D52  6E12               	movwf	(_SumData_AUX2+1)^0,c
  2858   000D54  0E00               	movlw	0
  2859   000D56  6E13               	movwf	(_SumData_AUX2+2)^0,c
  2860   000D58  0E00               	movlw	0
  2861   000D5A  6E14               	movwf	(_SumData_AUX2+3)^0,c
  2862   000D5C                     
  2863                           ;MagnetDigi24V1.c: 343:         ReadAD24(0,0x00);
  2864   000D5C  0E00               	movlw	0
  2865   000D5E  6E46               	movwf	ReadAD24@cmd_convert^0,c
  2866   000D60  0E00               	movlw	0
  2867   000D62  ECF6  F008         	call	_ReadAD24
  2868   000D66                     
  2869                           ;MagnetDigi24V1.c: 344:         for(conta=0; conta<5; conta++){
  2870   000D66  0E00               	movlw	0
  2871   000D68  6E5C               	movwf	Interrups@conta^0,c
  2872   000D6A                     i2l2751:
  2873   000D6A  FFFF               	dw	65535	; assembler added errata NOP
  2874                           
  2875                           ;MagnetDigi24V1.c: 345:             Data_AUX2 = ReadAD24(1,0x00);
  2876   000D6C  0E00               	movlw	0
  2877   000D6E  6E46               	movwf	ReadAD24@cmd_convert^0,c
  2878   000D70  0E01               	movlw	1
  2879   000D72  ECF6  F008         	call	_ReadAD24
  2880   000D76  C046  F071         	movff	?_ReadAD24,_Data_AUX2
  2881   000D7A  C047  F072         	movff	?_ReadAD24+1,_Data_AUX2+1
  2882   000D7E  C048  F073         	movff	?_ReadAD24+2,_Data_AUX2+2
  2883   000D82  C049  F074         	movff	?_ReadAD24+3,_Data_AUX2+3
  2884   000D86                     
  2885                           ;MagnetDigi24V1.c: 346:             SumData_AUX2 = SumData_AUX2 + Data_AUX2;
  2886   000D86  0100               	movlb	0	; () banked
  2887   000D88  5171               	movf	_Data_AUX2& (0+255),w,b
  2888   000D8A  2411               	addwf	_SumData_AUX2^0,w,c
  2889   000D8C  6E11               	movwf	_SumData_AUX2^0,c
  2890   000D8E  5172               	movf	(_Data_AUX2+1)& (0+255),w,b
  2891   000D90  2012               	addwfc	(_SumData_AUX2+1)^0,w,c
  2892   000D92  6E12               	movwf	(_SumData_AUX2+1)^0,c
  2893   000D94  5173               	movf	(_Data_AUX2+2)& (0+255),w,b
  2894   000D96  2013               	addwfc	(_SumData_AUX2+2)^0,w,c
  2895   000D98  6E13               	movwf	(_SumData_AUX2+2)^0,c
  2896   000D9A  5174               	movf	(_Data_AUX2+3)& (0+255),w,b
  2897   000D9C  2014               	addwfc	(_SumData_AUX2+3)^0,w,c
  2898   000D9E  6E14               	movwf	(_SumData_AUX2+3)^0,c
  2899   000DA0                     
  2900                           ; BSR set to: 0
  2901                           ;MagnetDigi24V1.c: 347:         }
  2902   000DA0  2A5C               	incf	Interrups@conta^0,f,c
  2903   000DA2                     
  2904                           ; BSR set to: 0
  2905   000DA2  0E04               	movlw	4
  2906   000DA4  645C               	cpfsgt	Interrups@conta^0,c
  2907   000DA6  EFD7  F006         	goto	i2u93_41
  2908   000DAA  EFDA  F006         	goto	i2u93_40
  2909   000DAE                     i2u93_41:
  2910   000DAE  FFFF               	dw	65535	; assembler added errata NOP
  2911   000DB0  EFB5  F006         	goto	i2l2751
  2912   000DB4                     i2u93_40:
  2913   000DB4  FFFF               	dw	65535	; assembler added errata NOP
  2914   000DB6                     
  2915                           ; BSR set to: 0
  2916                           ;MagnetDigi24V1.c: 350:         Data_X = SumData_X/5;
  2917   000DB6  C02D  F038         	movff	_SumData_X,___aldiv@dividend
  2918   000DBA  C02E  F039         	movff	_SumData_X+1,___aldiv@dividend+1
  2919   000DBE  C02F  F03A         	movff	_SumData_X+2,___aldiv@dividend+2
  2920   000DC2  C030  F03B         	movff	_SumData_X+3,___aldiv@dividend+3
  2921   000DC6  0E05               	movlw	5
  2922   000DC8  6E3C               	movwf	___aldiv@divisor^0,c
  2923   000DCA  0E00               	movlw	0
  2924   000DCC  6E3D               	movwf	(___aldiv@divisor+1)^0,c
  2925   000DCE  0E00               	movlw	0
  2926   000DD0  6E3E               	movwf	(___aldiv@divisor+2)^0,c
  2927   000DD2  0E00               	movlw	0
  2928   000DD4  6E3F               	movwf	(___aldiv@divisor+3)^0,c
  2929   000DD6  EC5A  F008         	call	___aldiv	;wreg free
  2930   000DDA  C038  F00D         	movff	?___aldiv,_Data_X
  2931   000DDE  C039  F00E         	movff	?___aldiv+1,_Data_X+1
  2932   000DE2  C03A  F00F         	movff	?___aldiv+2,_Data_X+2
  2933   000DE6  C03B  F010         	movff	?___aldiv+3,_Data_X+3
  2934                           
  2935                           ;MagnetDigi24V1.c: 351:         Data_Y = SumData_Y/5;
  2936   000DEA  C029  F038         	movff	_SumData_Y,___aldiv@dividend
  2937   000DEE  C02A  F039         	movff	_SumData_Y+1,___aldiv@dividend+1
  2938   000DF2  C02B  F03A         	movff	_SumData_Y+2,___aldiv@dividend+2
  2939   000DF6  C02C  F03B         	movff	_SumData_Y+3,___aldiv@dividend+3
  2940   000DFA  0E05               	movlw	5
  2941   000DFC  6E3C               	movwf	___aldiv@divisor^0,c
  2942   000DFE  0E00               	movlw	0
  2943   000E00  6E3D               	movwf	(___aldiv@divisor+1)^0,c
  2944   000E02  0E00               	movlw	0
  2945   000E04  6E3E               	movwf	(___aldiv@divisor+2)^0,c
  2946   000E06  0E00               	movlw	0
  2947   000E08  6E3F               	movwf	(___aldiv@divisor+3)^0,c
  2948   000E0A  EC5A  F008         	call	___aldiv	;wreg free
  2949   000E0E  C038  F009         	movff	?___aldiv,_Data_Y
  2950   000E12  C039  F00A         	movff	?___aldiv+1,_Data_Y+1
  2951   000E16  C03A  F00B         	movff	?___aldiv+2,_Data_Y+2
  2952   000E1A  C03B  F00C         	movff	?___aldiv+3,_Data_Y+3
  2953                           
  2954                           ;MagnetDigi24V1.c: 352:         Data_Z = SumData_Z/5;
  2955   000E1E  C025  F038         	movff	_SumData_Z,___aldiv@dividend
  2956   000E22  C026  F039         	movff	_SumData_Z+1,___aldiv@dividend+1
  2957   000E26  C027  F03A         	movff	_SumData_Z+2,___aldiv@dividend+2
  2958   000E2A  C028  F03B         	movff	_SumData_Z+3,___aldiv@dividend+3
  2959   000E2E  0E05               	movlw	5
  2960   000E30  6E3C               	movwf	___aldiv@divisor^0,c
  2961   000E32  0E00               	movlw	0
  2962   000E34  6E3D               	movwf	(___aldiv@divisor+1)^0,c
  2963   000E36  0E00               	movlw	0
  2964   000E38  6E3E               	movwf	(___aldiv@divisor+2)^0,c
  2965   000E3A  0E00               	movlw	0
  2966   000E3C  6E3F               	movwf	(___aldiv@divisor+3)^0,c
  2967   000E3E  EC5A  F008         	call	___aldiv	;wreg free
  2968   000E42  C038  F005         	movff	?___aldiv,_Data_Z
  2969   000E46  C039  F006         	movff	?___aldiv+1,_Data_Z+1
  2970   000E4A  C03A  F007         	movff	?___aldiv+2,_Data_Z+2
  2971   000E4E  C03B  F008         	movff	?___aldiv+3,_Data_Z+3
  2972                           
  2973                           ;MagnetDigi24V1.c: 353:         Data_TC = SumData_TC/5;
  2974   000E52  C021  F038         	movff	_SumData_TC,___aldiv@dividend
  2975   000E56  C022  F039         	movff	_SumData_TC+1,___aldiv@dividend+1
  2976   000E5A  C023  F03A         	movff	_SumData_TC+2,___aldiv@dividend+2
  2977   000E5E  C024  F03B         	movff	_SumData_TC+3,___aldiv@dividend+3
  2978   000E62  0E05               	movlw	5
  2979   000E64  6E3C               	movwf	___aldiv@divisor^0,c
  2980   000E66  0E00               	movlw	0
  2981   000E68  6E3D               	movwf	(___aldiv@divisor+1)^0,c
  2982   000E6A  0E00               	movlw	0
  2983   000E6C  6E3E               	movwf	(___aldiv@divisor+2)^0,c
  2984   000E6E  0E00               	movlw	0
  2985   000E70  6E3F               	movwf	(___aldiv@divisor+3)^0,c
  2986   000E72  EC5A  F008         	call	___aldiv	;wreg free
  2987   000E76  C038  F001         	movff	?___aldiv,_Data_TC
  2988   000E7A  C039  F002         	movff	?___aldiv+1,_Data_TC+1
  2989   000E7E  C03A  F003         	movff	?___aldiv+2,_Data_TC+2
  2990   000E82  C03B  F004         	movff	?___aldiv+3,_Data_TC+3
  2991                           
  2992                           ;MagnetDigi24V1.c: 354:         Data_TS = SumData_TS/5;
  2993   000E86  C01D  F038         	movff	_SumData_TS,___aldiv@dividend
  2994   000E8A  C01E  F039         	movff	_SumData_TS+1,___aldiv@dividend+1
  2995   000E8E  C01F  F03A         	movff	_SumData_TS+2,___aldiv@dividend+2
  2996   000E92  C020  F03B         	movff	_SumData_TS+3,___aldiv@dividend+3
  2997   000E96  0E05               	movlw	5
  2998   000E98  6E3C               	movwf	___aldiv@divisor^0,c
  2999   000E9A  0E00               	movlw	0
  3000   000E9C  6E3D               	movwf	(___aldiv@divisor+1)^0,c
  3001   000E9E  0E00               	movlw	0
  3002   000EA0  6E3E               	movwf	(___aldiv@divisor+2)^0,c
  3003   000EA2  0E00               	movlw	0
  3004   000EA4  6E3F               	movwf	(___aldiv@divisor+3)^0,c
  3005   000EA6  EC5A  F008         	call	___aldiv	;wreg free
  3006   000EAA  C038  F081         	movff	?___aldiv,_Data_TS
  3007   000EAE  C039  F082         	movff	?___aldiv+1,_Data_TS+1
  3008   000EB2  C03A  F083         	movff	?___aldiv+2,_Data_TS+2
  3009   000EB6  C03B  F084         	movff	?___aldiv+3,_Data_TS+3
  3010                           
  3011                           ;MagnetDigi24V1.c: 355:         Data_AUX0 = SumData_AUX0/5;
  3012   000EBA  C019  F038         	movff	_SumData_AUX0,___aldiv@dividend
  3013   000EBE  C01A  F039         	movff	_SumData_AUX0+1,___aldiv@dividend+1
  3014   000EC2  C01B  F03A         	movff	_SumData_AUX0+2,___aldiv@dividend+2
  3015   000EC6  C01C  F03B         	movff	_SumData_AUX0+3,___aldiv@dividend+3
  3016   000ECA  0E05               	movlw	5
  3017   000ECC  6E3C               	movwf	___aldiv@divisor^0,c
  3018   000ECE  0E00               	movlw	0
  3019   000ED0  6E3D               	movwf	(___aldiv@divisor+1)^0,c
  3020   000ED2  0E00               	movlw	0
  3021   000ED4  6E3E               	movwf	(___aldiv@divisor+2)^0,c
  3022   000ED6  0E00               	movlw	0
  3023   000ED8  6E3F               	movwf	(___aldiv@divisor+3)^0,c
  3024   000EDA  EC5A  F008         	call	___aldiv	;wreg free
  3025   000EDE  C038  F079         	movff	?___aldiv,_Data_AUX0
  3026   000EE2  C039  F07A         	movff	?___aldiv+1,_Data_AUX0+1
  3027   000EE6  C03A  F07B         	movff	?___aldiv+2,_Data_AUX0+2
  3028   000EEA  C03B  F07C         	movff	?___aldiv+3,_Data_AUX0+3
  3029                           
  3030                           ;MagnetDigi24V1.c: 356:         Data_AUX1 = SumData_AUX1/5;
  3031   000EEE  C015  F038         	movff	_SumData_AUX1,___aldiv@dividend
  3032   000EF2  C016  F039         	movff	_SumData_AUX1+1,___aldiv@dividend+1
  3033   000EF6  C017  F03A         	movff	_SumData_AUX1+2,___aldiv@dividend+2
  3034   000EFA  C018  F03B         	movff	_SumData_AUX1+3,___aldiv@dividend+3
  3035   000EFE  0E05               	movlw	5
  3036   000F00  6E3C               	movwf	___aldiv@divisor^0,c
  3037   000F02  0E00               	movlw	0
  3038   000F04  6E3D               	movwf	(___aldiv@divisor+1)^0,c
  3039   000F06  0E00               	movlw	0
  3040   000F08  6E3E               	movwf	(___aldiv@divisor+2)^0,c
  3041   000F0A  0E00               	movlw	0
  3042   000F0C  6E3F               	movwf	(___aldiv@divisor+3)^0,c
  3043   000F0E  EC5A  F008         	call	___aldiv	;wreg free
  3044   000F12  C038  F075         	movff	?___aldiv,_Data_AUX1
  3045   000F16  C039  F076         	movff	?___aldiv+1,_Data_AUX1+1
  3046   000F1A  C03A  F077         	movff	?___aldiv+2,_Data_AUX1+2
  3047   000F1E  C03B  F078         	movff	?___aldiv+3,_Data_AUX1+3
  3048                           
  3049                           ;MagnetDigi24V1.c: 357:         Data_AUX2 = SumData_AUX2/5;
  3050   000F22  C011  F038         	movff	_SumData_AUX2,___aldiv@dividend
  3051   000F26  C012  F039         	movff	_SumData_AUX2+1,___aldiv@dividend+1
  3052   000F2A  C013  F03A         	movff	_SumData_AUX2+2,___aldiv@dividend+2
  3053   000F2E  C014  F03B         	movff	_SumData_AUX2+3,___aldiv@dividend+3
  3054   000F32  0E05               	movlw	5
  3055   000F34  6E3C               	movwf	___aldiv@divisor^0,c
  3056   000F36  0E00               	movlw	0
  3057   000F38  6E3D               	movwf	(___aldiv@divisor+1)^0,c
  3058   000F3A  0E00               	movlw	0
  3059   000F3C  6E3E               	movwf	(___aldiv@divisor+2)^0,c
  3060   000F3E  0E00               	movlw	0
  3061   000F40  6E3F               	movwf	(___aldiv@divisor+3)^0,c
  3062   000F42  EC5A  F008         	call	___aldiv	;wreg free
  3063   000F46  C038  F071         	movff	?___aldiv,_Data_AUX2
  3064   000F4A  C039  F072         	movff	?___aldiv+1,_Data_AUX2+1
  3065   000F4E  C03A  F073         	movff	?___aldiv+2,_Data_AUX2+2
  3066   000F52  C03B  F074         	movff	?___aldiv+3,_Data_AUX2+3
  3067   000F56                     
  3068                           ;MagnetDigi24V1.c: 360:         print_string("JROADQ");
  3069   000F56  0EAB               	movlw	low STR_6
  3070   000F58  6E39               	movwf	print_string@str^0,c
  3071   000F5A  0E10               	movlw	high STR_6
  3072   000F5C  6E3A               	movwf	(print_string@str+1)^0,c
  3073   000F5E  ECCD  F00A         	call	_print_string	;wreg free
  3074   000F62                     
  3075                           ;MagnetDigi24V1.c: 361:         WriteByte_USART(ContaSample);
  3076   000F62  5035               	movf	_ContaSample^0,w,c
  3077   000F64  EC79  F00B         	call	_WriteByte_USART
  3078   000F68                     
  3079                           ;MagnetDigi24V1.c: 362:         print_value(Data_X);
  3080   000F68  C00D  F039         	movff	_Data_X,print_value@value
  3081   000F6C  C00E  F03A         	movff	_Data_X+1,print_value@value+1
  3082   000F70  C00F  F03B         	movff	_Data_X+2,print_value@value+2
  3083   000F74  C010  F03C         	movff	_Data_X+3,print_value@value+3
  3084   000F78  EC55  F00B         	call	_print_value	;wreg free
  3085   000F7C                     
  3086                           ;MagnetDigi24V1.c: 363:         print_value(Data_Y);
  3087   000F7C  C009  F039         	movff	_Data_Y,print_value@value
  3088   000F80  C00A  F03A         	movff	_Data_Y+1,print_value@value+1
  3089   000F84  C00B  F03B         	movff	_Data_Y+2,print_value@value+2
  3090   000F88  C00C  F03C         	movff	_Data_Y+3,print_value@value+3
  3091   000F8C  EC55  F00B         	call	_print_value	;wreg free
  3092   000F90                     
  3093                           ;MagnetDigi24V1.c: 364:         print_value(Data_Z);
  3094   000F90  C005  F039         	movff	_Data_Z,print_value@value
  3095   000F94  C006  F03A         	movff	_Data_Z+1,print_value@value+1
  3096   000F98  C007  F03B         	movff	_Data_Z+2,print_value@value+2
  3097   000F9C  C008  F03C         	movff	_Data_Z+3,print_value@value+3
  3098   000FA0  EC55  F00B         	call	_print_value	;wreg free
  3099   000FA4                     
  3100                           ;MagnetDigi24V1.c: 365:         print_value(Data_TC);
  3101   000FA4  C001  F039         	movff	_Data_TC,print_value@value
  3102   000FA8  C002  F03A         	movff	_Data_TC+1,print_value@value+1
  3103   000FAC  C003  F03B         	movff	_Data_TC+2,print_value@value+2
  3104   000FB0  C004  F03C         	movff	_Data_TC+3,print_value@value+3
  3105   000FB4  EC55  F00B         	call	_print_value	;wreg free
  3106   000FB8                     
  3107                           ;MagnetDigi24V1.c: 366:         print_value(Data_TS);
  3108   000FB8  C081  F039         	movff	_Data_TS,print_value@value
  3109   000FBC  C082  F03A         	movff	_Data_TS+1,print_value@value+1
  3110   000FC0  C083  F03B         	movff	_Data_TS+2,print_value@value+2
  3111   000FC4  C084  F03C         	movff	_Data_TS+3,print_value@value+3
  3112   000FC8  EC55  F00B         	call	_print_value	;wreg free
  3113   000FCC                     
  3114                           ;MagnetDigi24V1.c: 367:         print_value(Data_AUX0);
  3115   000FCC  C079  F039         	movff	_Data_AUX0,print_value@value
  3116   000FD0  C07A  F03A         	movff	_Data_AUX0+1,print_value@value+1
  3117   000FD4  C07B  F03B         	movff	_Data_AUX0+2,print_value@value+2
  3118   000FD8  C07C  F03C         	movff	_Data_AUX0+3,print_value@value+3
  3119   000FDC  EC55  F00B         	call	_print_value	;wreg free
  3120   000FE0                     
  3121                           ;MagnetDigi24V1.c: 368:         print_value(Data_AUX1);
  3122   000FE0  C075  F039         	movff	_Data_AUX1,print_value@value
  3123   000FE4  C076  F03A         	movff	_Data_AUX1+1,print_value@value+1
  3124   000FE8  C077  F03B         	movff	_Data_AUX1+2,print_value@value+2
  3125   000FEC  C078  F03C         	movff	_Data_AUX1+3,print_value@value+3
  3126   000FF0  EC55  F00B         	call	_print_value	;wreg free
  3127   000FF4                     
  3128                           ;MagnetDigi24V1.c: 369:         print_value(Data_AUX2);
  3129   000FF4  C071  F039         	movff	_Data_AUX2,print_value@value
  3130   000FF8  C072  F03A         	movff	_Data_AUX2+1,print_value@value+1
  3131   000FFC  C073  F03B         	movff	_Data_AUX2+2,print_value@value+2
  3132   001000  C074  F03C         	movff	_Data_AUX2+3,print_value@value+3
  3133   001004  EC55  F00B         	call	_print_value	;wreg free
  3134   001008                     
  3135                           ;MagnetDigi24V1.c: 370:         print_string("\n\r");
  3136   001008  0E92               	movlw	low (STR_5+21)
  3137   00100A  6E39               	movwf	print_string@str^0,c
  3138   00100C  0E10               	movlw	high (STR_5+21)
  3139   00100E  6E3A               	movwf	(print_string@str+1)^0,c
  3140   001010  ECCD  F00A         	call	_print_string	;wreg free
  3141   001014                     
  3142                           ;MagnetDigi24V1.c: 372:         LATAbits.LA2 = 0;
  3143   001014  9489               	bcf	137,2,c	;volatile
  3144   001016                     
  3145                           ;MagnetDigi24V1.c: 374:         if(ContaSample == 4){
  3146   001016  0E04               	movlw	4
  3147   001018  1835               	xorwf	_ContaSample^0,w,c
  3148   00101A  A4D8               	btfss	status,2,c
  3149   00101C  EF12  F008         	goto	i2u94_41
  3150   001020  EF15  F008         	goto	i2u94_40
  3151   001024                     i2u94_41:
  3152   001024  FFFF               	dw	65535	; assembler added errata NOP
  3153   001026  EF2C  F008         	goto	i2l429
  3154   00102A                     i2u94_40:
  3155   00102A  FFFF               	dw	65535	; assembler added errata NOP
  3156   00102C                     
  3157                           ;MagnetDigi24V1.c: 375:             INTCONbits.TMR0IE = 0;
  3158   00102C  9AF2               	bcf	242,5,c	;volatile
  3159                           
  3160                           ;MagnetDigi24V1.c: 376:             LATBbits.LB7 = 0;
  3161   00102E  9E8A               	bcf	138,7,c	;volatile
  3162   001030                     
  3163                           ;MagnetDigi24V1.c: 377:             if(ControlSample == 1){
  3164   001030  0436               	decf	_ControlSample^0,w,c
  3165   001032  A4D8               	btfss	status,2,c
  3166   001034  EF1E  F008         	goto	i2u95_41
  3167   001038  EF21  F008         	goto	i2u95_40
  3168   00103C                     i2u95_41:
  3169   00103C  FFFF               	dw	65535	; assembler added errata NOP
  3170   00103E  EF26  F008         	goto	i2l2793
  3171   001042                     i2u95_40:
  3172   001042  FFFF               	dw	65535	; assembler added errata NOP
  3173   001044                     
  3174                           ;MagnetDigi24V1.c: 378:                 INTCONbits.INT0IF = 0;
  3175   001044  92F2               	bcf	242,1,c	;volatile
  3176                           
  3177                           ;MagnetDigi24V1.c: 379:                 INTCONbits.INT0IE = 1;
  3178   001046  88F2               	bsf	242,4,c	;volatile
  3179                           
  3180                           ;MagnetDigi24V1.c: 380:             }else{
  3181   001048  EF2C  F008         	goto	i2l429
  3182   00104C                     i2l2793:
  3183   00104C  FFFF               	dw	65535	; assembler added errata NOP
  3184                           
  3185                           ;MagnetDigi24V1.c: 381:                 ReadAD24(0,0xFF);
  3186   00104E  0EFF               	movlw	255
  3187   001050  6E46               	movwf	ReadAD24@cmd_convert^0,c
  3188   001052  0E00               	movlw	0
  3189   001054  ECF6  F008         	call	_ReadAD24
  3190   001058                     i2l429:
  3191   001058  FFFF               	dw	65535	; assembler added errata NOP
  3192   00105A  C05A  FFF5         	movff	??_Interrups+7,tablat
  3193   00105E  C059  FFF8         	movff	??_Interrups+6,tblptru
  3194   001062  C058  FFF7         	movff	??_Interrups+5,tblptrh
  3195   001066  C057  FFF6         	movff	??_Interrups+4,tblptrl
  3196   00106A  C056  FFDA         	movff	??_Interrups+3,fsr2h
  3197   00106E  C055  FFD9         	movff	??_Interrups+2,fsr2l
  3198   001072  925D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  3199   001074  0011               	retfie		f
  3200   001076  FFFF               	dw	65535	; errata NOP
  3201   001078                     __end_of_Interrups:
  3202                           	callstack 0
  3203                           
  3204 ;; *************** function _print_value *****************
  3205 ;; Defined at:
  3206 ;;		line 139 in file "LIB258_USART.c"
  3207 ;; Parameters:    Size  Location     Type
  3208 ;;  value           4    1[COMRAM] long 
  3209 ;; Auto vars:     Size  Location     Type
  3210 ;;  Bytes           3    5[COMRAM] unsigned char [3]
  3211 ;; Return value:  Size  Location     Type
  3212 ;;                  1    wreg      void 
  3213 ;; Registers used:
  3214 ;;		wreg, status,2, cstack
  3215 ;; Tracked objects:
  3216 ;;		On entry : 0/0
  3217 ;;		On exit  : 0/0
  3218 ;;		Unchanged: 0/0
  3219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3220 ;;      Params:         4       0       0       0       0       0       0
  3221 ;;      Locals:         3       0       0       0       0       0       0
  3222 ;;      Temps:          0       0       0       0       0       0       0
  3223 ;;      Totals:         7       0       0       0       0       0       0
  3224 ;;Total ram usage:        7 bytes
  3225 ;; Hardware stack levels used: 1
  3226 ;; Hardware stack levels required when called: 1
  3227 ;; This function calls:
  3228 ;;		_WriteByte_USART
  3229 ;; This function is called by:
  3230 ;;		_Interrups
  3231 ;; This function uses a non-reentrant model
  3232 ;;
  3233                           
  3234                           	psect	text8
  3235   0016AA                     __ptext8:
  3236                           	callstack 0
  3237   0016AA                     _print_value:
  3238                           	callstack 0
  3239   0016AA  FFFF               	dw	65535	; assembler added errata NOP
  3240   0016AC                     
  3241                           ;LIB258_USART.c: 141:     char Bytes[3];;LIB258_USART.c: 144:     Bytes[2] = (char) ((va
      +                          lue&0x00FF0000)>>16);
  3242   0016AC  C03B  F03F         	movff	print_value@value+2,print_value@Bytes+2
  3243                           
  3244                           ;LIB258_USART.c: 146:     Bytes[1] = (char) ((value&0x0000FF00)>>8);
  3245   0016B0  C03A  F03E         	movff	print_value@value+1,print_value@Bytes+1
  3246                           
  3247                           ;LIB258_USART.c: 148:     Bytes[0] = (char) ((value&0x000000FF)>>0);
  3248   0016B4  C039  F03D         	movff	print_value@value,print_value@Bytes
  3249   0016B8                     
  3250                           ;LIB258_USART.c: 151:     WriteByte_USART(Bytes[0]);
  3251   0016B8  503D               	movf	print_value@Bytes^0,w,c
  3252   0016BA  EC79  F00B         	call	_WriteByte_USART
  3253                           
  3254                           ;LIB258_USART.c: 152:     WriteByte_USART(Bytes[1]);
  3255   0016BE  503E               	movf	(print_value@Bytes+1)^0,w,c
  3256   0016C0  EC79  F00B         	call	_WriteByte_USART
  3257                           
  3258                           ;LIB258_USART.c: 153:     WriteByte_USART(Bytes[2]);
  3259   0016C4  503F               	movf	(print_value@Bytes+2)^0,w,c
  3260   0016C6  EC79  F00B         	call	_WriteByte_USART
  3261   0016CA  0012               	return		;funcret
  3262   0016CC  FFFF               	dw	65535	; errata NOP
  3263   0016CE                     __end_of_print_value:
  3264                           	callstack 0
  3265                           
  3266 ;; *************** function _TransmitDAT_USART *****************
  3267 ;; Defined at:
  3268 ;;		line 126 in file "LIB258_USART.c"
  3269 ;; Parameters:    Size  Location     Type
  3270 ;;  DAT_ID          1    wreg     unsigned char 
  3271 ;; Auto vars:     Size  Location     Type
  3272 ;;  DAT_ID          1    3[COMRAM] unsigned char 
  3273 ;;  conta           1    4[COMRAM] unsigned char 
  3274 ;; Return value:  Size  Location     Type
  3275 ;;                  1    wreg      void 
  3276 ;; Registers used:
  3277 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3278 ;; Tracked objects:
  3279 ;;		On entry : 0/0
  3280 ;;		On exit  : 0/0
  3281 ;;		Unchanged: 0/0
  3282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3283 ;;      Params:         0       0       0       0       0       0       0
  3284 ;;      Locals:         2       0       0       0       0       0       0
  3285 ;;      Temps:          0       0       0       0       0       0       0
  3286 ;;      Totals:         2       0       0       0       0       0       0
  3287 ;;Total ram usage:        2 bytes
  3288 ;; Hardware stack levels used: 1
  3289 ;; Hardware stack levels required when called: 2
  3290 ;; This function calls:
  3291 ;;		_WriteByte_USART
  3292 ;;		_print_string
  3293 ;; This function is called by:
  3294 ;;		_Interrups
  3295 ;; This function uses a non-reentrant model
  3296 ;;
  3297                           
  3298                           	psect	text9
  3299   001546                     __ptext9:
  3300                           	callstack 0
  3301   001546                     _TransmitDAT_USART:
  3302                           	callstack 0
  3303   001546  FFFF               	dw	65535	; assembler added errata NOP
  3304                           
  3305                           ;incstack = 0
  3306                           ;TransmitDAT_USART@DAT_ID stored from wreg
  3307   001548  6E3B               	movwf	TransmitDAT_USART@DAT_ID^0,c
  3308   00154A                     
  3309                           ;LIB258_USART.c: 127:     unsigned char conta;;LIB258_USART.c: 129:     print_string("NN
      +                          NNJRODAT");
  3310   00154A  0EA0               	movlw	low STR_3
  3311   00154C  6E39               	movwf	print_string@str^0,c
  3312   00154E  0E10               	movlw	high STR_3
  3313   001550  6E3A               	movwf	(print_string@str+1)^0,c
  3314   001552  ECCD  F00A         	call	_print_string	;wreg free
  3315   001556                     
  3316                           ;LIB258_USART.c: 130:     WriteByte_USART(DAT_ID);
  3317   001556  503B               	movf	TransmitDAT_USART@DAT_ID^0,w,c
  3318   001558  EC79  F00B         	call	_WriteByte_USART
  3319   00155C                     
  3320                           ;LIB258_USART.c: 131:     for(conta=0; conta<12; conta++){
  3321   00155C  0E00               	movlw	0
  3322   00155E  6E3C               	movwf	TransmitDAT_USART@conta^0,c
  3323   001560                     i2l2209:
  3324   001560  FFFF               	dw	65535	; assembler added errata NOP
  3325                           
  3326                           ;LIB258_USART.c: 132:         WriteByte_USART(BufferDAT[conta]);
  3327   001562  0E60               	movlw	low _BufferDAT
  3328   001564  243C               	addwf	TransmitDAT_USART@conta^0,w,c
  3329   001566  6ED9               	movwf	fsr2l,c
  3330   001568  6ADA               	clrf	fsr2h,c
  3331   00156A  0E00               	movlw	high _BufferDAT
  3332   00156C  22DA               	addwfc	fsr2h,f,c
  3333   00156E  50DF               	movf	indf2,w,c
  3334   001570  EC79  F00B         	call	_WriteByte_USART
  3335   001574                     
  3336                           ;LIB258_USART.c: 133:     }
  3337   001574  2A3C               	incf	TransmitDAT_USART@conta^0,f,c
  3338   001576  0E0B               	movlw	11
  3339   001578  643C               	cpfsgt	TransmitDAT_USART@conta^0,c
  3340   00157A  EFC1  F00A         	goto	i2u72_41
  3341   00157E  EFC4  F00A         	goto	i2u72_40
  3342   001582                     i2u72_41:
  3343   001582  FFFF               	dw	65535	; assembler added errata NOP
  3344   001584  EFB0  F00A         	goto	i2l2209
  3345   001588                     i2u72_40:
  3346   001588  FFFF               	dw	65535	; assembler added errata NOP
  3347   00158A                     
  3348                           ;LIB258_USART.c: 134:     print_string("\n\r");
  3349   00158A  0E92               	movlw	low (STR_5+21)
  3350   00158C  6E39               	movwf	print_string@str^0,c
  3351   00158E  0E10               	movlw	high (STR_5+21)
  3352   001590  6E3A               	movwf	(print_string@str+1)^0,c
  3353   001592  ECCD  F00A         	call	_print_string	;wreg free
  3354   001596  0012               	return		;funcret
  3355   001598  FFFF               	dw	65535	; errata NOP
  3356   00159A                     __end_of_TransmitDAT_USART:
  3357                           	callstack 0
  3358                           
  3359 ;; *************** function _TransmitCMD_USART *****************
  3360 ;; Defined at:
  3361 ;;		line 117 in file "LIB258_USART.c"
  3362 ;; Parameters:    Size  Location     Type
  3363 ;;  CMD_ID          1    wreg     unsigned char 
  3364 ;; Auto vars:     Size  Location     Type
  3365 ;;  CMD_ID          1    3[COMRAM] unsigned char 
  3366 ;; Return value:  Size  Location     Type
  3367 ;;                  1    wreg      void 
  3368 ;; Registers used:
  3369 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3370 ;; Tracked objects:
  3371 ;;		On entry : 0/0
  3372 ;;		On exit  : 0/0
  3373 ;;		Unchanged: 0/0
  3374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3375 ;;      Params:         0       0       0       0       0       0       0
  3376 ;;      Locals:         1       0       0       0       0       0       0
  3377 ;;      Temps:          0       0       0       0       0       0       0
  3378 ;;      Totals:         1       0       0       0       0       0       0
  3379 ;;Total ram usage:        1 bytes
  3380 ;; Hardware stack levels used: 1
  3381 ;; Hardware stack levels required when called: 2
  3382 ;; This function calls:
  3383 ;;		_WriteByte_USART
  3384 ;;		_print_string
  3385 ;; This function is called by:
  3386 ;;		_Interrups
  3387 ;; This function uses a non-reentrant model
  3388 ;;
  3389                           
  3390                           	psect	text10
  3391   00165E                     __ptext10:
  3392                           	callstack 0
  3393   00165E                     _TransmitCMD_USART:
  3394                           	callstack 0
  3395   00165E  FFFF               	dw	65535	; assembler added errata NOP
  3396                           
  3397                           ;incstack = 0
  3398                           ;TransmitCMD_USART@CMD_ID stored from wreg
  3399   001660  6E3B               	movwf	TransmitCMD_USART@CMD_ID^0,c
  3400   001662                     
  3401                           ;LIB258_USART.c: 119:     print_string("NNNNJROCMD");
  3402   001662  0E95               	movlw	low STR_1
  3403   001664  6E39               	movwf	print_string@str^0,c
  3404   001666  0E10               	movlw	high STR_1
  3405   001668  6E3A               	movwf	(print_string@str+1)^0,c
  3406   00166A  ECCD  F00A         	call	_print_string	;wreg free
  3407   00166E                     
  3408                           ;LIB258_USART.c: 120:     WriteByte_USART(CMD_ID);
  3409   00166E  503B               	movf	TransmitCMD_USART@CMD_ID^0,w,c
  3410   001670  EC79  F00B         	call	_WriteByte_USART
  3411   001674                     
  3412                           ;LIB258_USART.c: 121:     print_string("\n\r");
  3413   001674  0E92               	movlw	low (STR_5+21)
  3414   001676  6E39               	movwf	print_string@str^0,c
  3415   001678  0E10               	movlw	high (STR_5+21)
  3416   00167A  6E3A               	movwf	(print_string@str+1)^0,c
  3417   00167C  ECCD  F00A         	call	_print_string	;wreg free
  3418   001680  0012               	return		;funcret
  3419   001682  FFFF               	dw	65535	; errata NOP
  3420   001684                     __end_of_TransmitCMD_USART:
  3421                           	callstack 0
  3422                           
  3423 ;; *************** function _print_string *****************
  3424 ;; Defined at:
  3425 ;;		line 76 in file "LIB258_USART.c"
  3426 ;; Parameters:    Size  Location     Type
  3427 ;;  str             2    1[COMRAM] PTR unsigned char 
  3428 ;;		 -> STR_9(3), STR_8(7), STR_7(3), STR_6(7), 
  3429 ;;		 -> STR_5(24), STR_4(3), STR_3(11), STR_2(3), 
  3430 ;;		 -> STR_1(11), 
  3431 ;; Auto vars:     Size  Location     Type
  3432 ;;		None
  3433 ;; Return value:  Size  Location     Type
  3434 ;;                  1    wreg      void 
  3435 ;; Registers used:
  3436 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3437 ;; Tracked objects:
  3438 ;;		On entry : 0/0
  3439 ;;		On exit  : 0/0
  3440 ;;		Unchanged: 0/0
  3441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3442 ;;      Params:         2       0       0       0       0       0       0
  3443 ;;      Locals:         0       0       0       0       0       0       0
  3444 ;;      Temps:          0       0       0       0       0       0       0
  3445 ;;      Totals:         2       0       0       0       0       0       0
  3446 ;;Total ram usage:        2 bytes
  3447 ;; Hardware stack levels used: 1
  3448 ;; Hardware stack levels required when called: 1
  3449 ;; This function calls:
  3450 ;;		_WriteByte_USART
  3451 ;; This function is called by:
  3452 ;;		_TransmitCMD_USART
  3453 ;;		_TransmitDAT_USART
  3454 ;;		_Interrups
  3455 ;; This function uses a non-reentrant model
  3456 ;;
  3457                           
  3458                           	psect	text11
  3459   00159A                     __ptext11:
  3460                           	callstack 0
  3461   00159A                     _print_string:
  3462                           	callstack 0
  3463   00159A  FFFF               	dw	65535	; assembler added errata NOP
  3464   00159C                     
  3465                           ;LIB258_USART.c: 77:     while(*str != '\0'){
  3466   00159C  EFDC  F00A         	goto	i2l2089
  3467   0015A0                     i2l2085:
  3468   0015A0  FFFF               	dw	65535	; assembler added errata NOP
  3469                           
  3470                           ;LIB258_USART.c: 78:         WriteByte_USART(*str);
  3471   0015A2  C039  FFF6         	movff	print_string@str,tblptrl
  3472   0015A6  C03A  FFF7         	movff	print_string@str+1,tblptrh
  3473   0015AA                     	if	0	;tblptru may be non-zero
  3474   0015AA                     	endif
  3475   0015AA                     	if	0	;tblptru may be non-zero
  3476   0015AA                     	endif
  3477   0015AA  0008               	tblrd		*
  3478   0015AC  FFFF               	dw	65535	; errata NOP
  3479   0015AE  50F5               	movf	tablat,w,c
  3480   0015B0  EC79  F00B         	call	_WriteByte_USART
  3481   0015B4                     
  3482                           ;LIB258_USART.c: 79:         str++;
  3483   0015B4  4A39               	infsnz	print_string@str^0,f,c
  3484   0015B6  2A3A               	incf	(print_string@str+1)^0,f,c
  3485   0015B8                     i2l2089:
  3486   0015B8  FFFF               	dw	65535	; assembler added errata NOP
  3487                           
  3488                           ;LIB258_USART.c: 77:     while(*str != '\0'){
  3489   0015BA  C039  FFF6         	movff	print_string@str,tblptrl
  3490   0015BE  C03A  FFF7         	movff	print_string@str+1,tblptrh
  3491   0015C2                     	if	0	;tblptru may be non-zero
  3492   0015C2                     	endif
  3493   0015C2                     	if	0	;tblptru may be non-zero
  3494   0015C2                     	endif
  3495   0015C2  0008               	tblrd		*
  3496   0015C4  FFFF               	dw	65535	; errata NOP
  3497   0015C6  50F5               	movf	tablat,w,c
  3498   0015C8  0900               	iorlw	0
  3499   0015CA  A4D8               	btfss	status,2,c
  3500   0015CC  EFEA  F00A         	goto	i2u64_41
  3501   0015D0  EFED  F00A         	goto	i2u64_40
  3502   0015D4                     i2u64_41:
  3503   0015D4  FFFF               	dw	65535	; assembler added errata NOP
  3504   0015D6  EFD0  F00A         	goto	i2l2085
  3505   0015DA                     i2u64_40:
  3506   0015DA  FFFF               	dw	65535	; assembler added errata NOP
  3507   0015DC  0012               	return		;funcret
  3508   0015DE  FFFF               	dw	65535	; errata NOP
  3509   0015E0                     __end_of_print_string:
  3510                           	callstack 0
  3511                           
  3512 ;; *************** function _WriteByte_USART *****************
  3513 ;; Defined at:
  3514 ;;		line 68 in file "LIB258_USART.c"
  3515 ;; Parameters:    Size  Location     Type
  3516 ;;  byte            1    wreg     unsigned char 
  3517 ;; Auto vars:     Size  Location     Type
  3518 ;;  byte            1    0[COMRAM] unsigned char 
  3519 ;; Return value:  Size  Location     Type
  3520 ;;                  1    wreg      void 
  3521 ;; Registers used:
  3522 ;;		wreg
  3523 ;; Tracked objects:
  3524 ;;		On entry : 0/0
  3525 ;;		On exit  : 0/0
  3526 ;;		Unchanged: 0/0
  3527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3528 ;;      Params:         0       0       0       0       0       0       0
  3529 ;;      Locals:         1       0       0       0       0       0       0
  3530 ;;      Temps:          0       0       0       0       0       0       0
  3531 ;;      Totals:         1       0       0       0       0       0       0
  3532 ;;Total ram usage:        1 bytes
  3533 ;; Hardware stack levels used: 1
  3534 ;; This function calls:
  3535 ;;		Nothing
  3536 ;; This function is called by:
  3537 ;;		_print_string
  3538 ;;		_TransmitCMD_USART
  3539 ;;		_TransmitDAT_USART
  3540 ;;		_print_value
  3541 ;;		_Interrups
  3542 ;; This function uses a non-reentrant model
  3543 ;;
  3544                           
  3545                           	psect	text12
  3546   0016F2                     __ptext12:
  3547                           	callstack 0
  3548   0016F2                     _WriteByte_USART:
  3549                           	callstack 0
  3550   0016F2  FFFF               	dw	65535	; assembler added errata NOP
  3551                           
  3552                           ;incstack = 0
  3553                           ;WriteByte_USART@byte stored from wreg
  3554   0016F4  6E38               	movwf	WriteByte_USART@byte^0,c
  3555   0016F6                     
  3556                           ;LIB258_USART.c: 70:     TXREG = byte;
  3557   0016F6  C038  FFAD         	movff	WriteByte_USART@byte,4013	;volatile
  3558   0016FA                     
  3559                           ;LIB258_USART.c: 71:     __nop();
  3560   0016FA  F000               	nop	
  3561   0016FC                     i2l215:
  3562   0016FC  FFFF               	dw	65535	; assembler added errata NOP
  3563   0016FE  A2AC               	btfss	172,1,c	;volatile
  3564   001700  EF84  F00B         	goto	i2u50_41
  3565   001704  EF87  F00B         	goto	i2u50_40
  3566   001708                     i2u50_41:
  3567   001708  FFFF               	dw	65535	; assembler added errata NOP
  3568   00170A  EF7E  F00B         	goto	i2l215
  3569   00170E                     i2u50_40:
  3570   00170E  FFFF               	dw	65535	; assembler added errata NOP
  3571   001710  0012               	return		;funcret
  3572   001712  FFFF               	dw	65535	; errata NOP
  3573   001714                     __end_of_WriteByte_USART:
  3574                           	callstack 0
  3575                           
  3576 ;; *************** function _ResetCS5532 *****************
  3577 ;; Defined at:
  3578 ;;		line 43 in file "LIB258_SPI.c"
  3579 ;; Parameters:    Size  Location     Type
  3580 ;;		None
  3581 ;; Auto vars:     Size  Location     Type
  3582 ;;  conta           1    3[COMRAM] unsigned char 
  3583 ;; Return value:  Size  Location     Type
  3584 ;;                  1    wreg      unsigned char 
  3585 ;; Registers used:
  3586 ;;		wreg, status,2, status,0, cstack
  3587 ;; Tracked objects:
  3588 ;;		On entry : 0/0
  3589 ;;		On exit  : 0/0
  3590 ;;		Unchanged: 0/0
  3591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3592 ;;      Params:         0       0       0       0       0       0       0
  3593 ;;      Locals:         1       0       0       0       0       0       0
  3594 ;;      Temps:          1       0       0       0       0       0       0
  3595 ;;      Totals:         2       0       0       0       0       0       0
  3596 ;;Total ram usage:        2 bytes
  3597 ;; Hardware stack levels used: 1
  3598 ;; Hardware stack levels required when called: 2
  3599 ;; This function calls:
  3600 ;;		_ReadRegister_4bytesCS5532
  3601 ;;		_TransferByte_SPI
  3602 ;;		_WriteRegister_4bytesCS5532
  3603 ;; This function is called by:
  3604 ;;		_Interrups
  3605 ;; This function uses a non-reentrant model
  3606 ;;
  3607                           
  3608                           	psect	text13
  3609   001468                     __ptext13:
  3610                           	callstack 0
  3611   001468                     _ResetCS5532:
  3612                           	callstack 0
  3613   001468  FFFF               	dw	65535	; assembler added errata NOP
  3614   00146A                     
  3615                           ;LIB258_SPI.c: 44:     unsigned char conta;;LIB258_SPI.c: 47:     for(conta=0;conta<15;c
      +                          onta++){
  3616   00146A  0E00               	movlw	0
  3617   00146C  6E3B               	movwf	ResetCS5532@conta^0,c
  3618   00146E                     i2l2097:
  3619   00146E  FFFF               	dw	65535	; assembler added errata NOP
  3620                           
  3621                           ;LIB258_SPI.c: 48:         TransferByte_SPI(0xFF);
  3622   001470  0EFF               	movlw	255
  3623   001472  EC67  F00B         	call	_TransferByte_SPI
  3624   001476                     
  3625                           ;LIB258_SPI.c: 49:     }
  3626   001476  2A3B               	incf	ResetCS5532@conta^0,f,c
  3627   001478  0E0E               	movlw	14
  3628   00147A  643B               	cpfsgt	ResetCS5532@conta^0,c
  3629   00147C  EF42  F00A         	goto	i2u65_41
  3630   001480  EF45  F00A         	goto	i2u65_40
  3631   001484                     i2u65_41:
  3632   001484  FFFF               	dw	65535	; assembler added errata NOP
  3633   001486  EF37  F00A         	goto	i2l2097
  3634   00148A                     i2u65_40:
  3635   00148A  FFFF               	dw	65535	; assembler added errata NOP
  3636   00148C                     
  3637                           ;LIB258_SPI.c: 50:     TransferByte_SPI(0xFE);
  3638   00148C  0EFE               	movlw	254
  3639   00148E  EC67  F00B         	call	_TransferByte_SPI
  3640   001492                     
  3641                           ;LIB258_SPI.c: 51:     _delay((unsigned long)((2)*(9830400UL/4000.0)));
  3642   001492  0E05               	movlw	5
  3643   001494  6E3A               	movwf	??_ResetCS5532^0,c
  3644   001496  0EC9               	movlw	201
  3645   001498                     i2u116_47:
  3646   001498  FFFF               	dw	65535	; errata NOP
  3647   00149A  2EE8               	decfsz	wreg,f,c
  3648   00149C  D7FD               	bra	i2u116_47
  3649   00149E  2E3A               	decfsz	??_ResetCS5532^0,f,c
  3650   0014A0  D7FB               	bra	i2u116_47
  3651   0014A2  D000               	nop2	
  3652   0014A4  F000               	nop	
  3653   0014A6                     
  3654                           ;LIB258_SPI.c: 53:     ReadRegister_4bytesCS5532(0x0B);
  3655   0014A6  0E0B               	movlw	11
  3656   0014A8  ECF0  F00A         	call	_ReadRegister_4bytesCS5532
  3657   0014AC                     
  3658                           ;LIB258_SPI.c: 54:     BufferSPI[0] |= 0x20;
  3659   0014AC  8A31               	bsf	_BufferSPI^0,5,c
  3660   0014AE                     
  3661                           ;LIB258_SPI.c: 55:     WriteRegister_4bytesCS5532(0x03);
  3662   0014AE  0E03               	movlw	3
  3663   0014B0  EC42  F00B         	call	_WriteRegister_4bytesCS5532
  3664   0014B4                     
  3665                           ;LIB258_SPI.c: 56:     _delay((unsigned long)((25)*(9830400UL/4000000.0)));
  3666   0014B4  0E0F               	movlw	15
  3667   0014B6                     i2u117_47:
  3668   0014B6  FFFF               	dw	65535	; errata NOP
  3669   0014B8  2EE8               	decfsz	wreg,f,c
  3670   0014BA  D7FD               	bra	i2u117_47
  3671   0014BC  F000               	nop	
  3672   0014BE                     
  3673                           ;LIB258_SPI.c: 57:     BufferSPI[0] &= 0xDF;
  3674   0014BE  9A31               	bcf	_BufferSPI^0,5,c
  3675                           
  3676                           ;LIB258_SPI.c: 58:     WriteRegister_4bytesCS5532(0x03);
  3677   0014C0  0E03               	movlw	3
  3678   0014C2  EC42  F00B         	call	_WriteRegister_4bytesCS5532
  3679   0014C6                     
  3680                           ;LIB258_SPI.c: 59:     _delay((unsigned long)((25)*(9830400UL/4000000.0)));
  3681   0014C6  0E0F               	movlw	15
  3682   0014C8                     i2u118_47:
  3683   0014C8  FFFF               	dw	65535	; errata NOP
  3684   0014CA  2EE8               	decfsz	wreg,f,c
  3685   0014CC  D7FD               	bra	i2u118_47
  3686   0014CE  F000               	nop	
  3687   0014D0                     
  3688                           ;LIB258_SPI.c: 60:     ReadRegister_4bytesCS5532(0x0B);
  3689   0014D0  0E0B               	movlw	11
  3690   0014D2  ECF0  F00A         	call	_ReadRegister_4bytesCS5532
  3691   0014D6                     
  3692                           ;LIB258_SPI.c: 61:     return BufferSPI[0];
  3693   0014D6  5031               	movf	_BufferSPI^0,w,c
  3694   0014D8  0012               	return		;funcret
  3695   0014DA  FFFF               	dw	65535	; errata NOP
  3696   0014DC                     __end_of_ResetCS5532:
  3697                           	callstack 0
  3698                           
  3699 ;; *************** function _ReceiveCMD_USART *****************
  3700 ;; Defined at:
  3701 ;;		line 85 in file "LIB258_USART.c"
  3702 ;; Parameters:    Size  Location     Type
  3703 ;;		None
  3704 ;; Auto vars:     Size  Location     Type
  3705 ;;  data_byte       1    4[COMRAM] unsigned char 
  3706 ;;  conta_byte      1    3[COMRAM] unsigned char 
  3707 ;; Return value:  Size  Location     Type
  3708 ;;                  1    wreg      unsigned char 
  3709 ;; Registers used:
  3710 ;;		wreg, status,2, status,0, cstack
  3711 ;; Tracked objects:
  3712 ;;		On entry : 0/0
  3713 ;;		On exit  : 0/0
  3714 ;;		Unchanged: 0/0
  3715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3716 ;;      Params:         0       0       0       0       0       0       0
  3717 ;;      Locals:         2       0       0       0       0       0       0
  3718 ;;      Temps:          0       0       0       0       0       0       0
  3719 ;;      Totals:         2       0       0       0       0       0       0
  3720 ;;Total ram usage:        2 bytes
  3721 ;; Hardware stack levels used: 1
  3722 ;; Hardware stack levels required when called: 1
  3723 ;; This function calls:
  3724 ;;		_ReadByte_USART
  3725 ;; This function is called by:
  3726 ;;		_Interrups
  3727 ;; This function uses a non-reentrant model
  3728 ;;
  3729                           
  3730                           	psect	text14
  3731   001302                     __ptext14:
  3732                           	callstack 0
  3733   001302                     _ReceiveCMD_USART:
  3734                           	callstack 0
  3735   001302  FFFF               	dw	65535	; assembler added errata NOP
  3736   001304                     
  3737                           ;LIB258_USART.c: 86:     unsigned char conta_byte;;LIB258_USART.c: 87:     char data_byt
      +                          e;;LIB258_USART.c: 89:     for(conta_byte=0; conta_byte<10;conta_byte++){
  3738   001304  0E00               	movlw	0
  3739   001306  6E3B               	movwf	ReceiveCMD_USART@conta_byte^0,c
  3740   001308                     i2l2157:
  3741   001308  FFFF               	dw	65535	; assembler added errata NOP
  3742                           
  3743                           ;LIB258_USART.c: 90:         data_byte = ReadByte_USART();
  3744   00130A  ECEF  F009         	call	_ReadByte_USART	;wreg free
  3745   00130E  6E3C               	movwf	ReceiveCMD_USART@data_byte^0,c
  3746   001310                     
  3747                           ;LIB258_USART.c: 91:         if(data_byte == 'J'){
  3748   001310  0E4A               	movlw	74
  3749   001312  183C               	xorwf	ReceiveCMD_USART@data_byte^0,w,c
  3750   001314  A4D8               	btfss	status,2,c
  3751   001316  EF8F  F009         	goto	i2u66_41
  3752   00131A  EF92  F009         	goto	i2u66_40
  3753   00131E                     i2u66_41:
  3754   00131E  FFFF               	dw	65535	; assembler added errata NOP
  3755   001320  EF95  F009         	goto	i2l2163
  3756   001324                     i2u66_40:
  3757   001324  FFFF               	dw	65535	; assembler added errata NOP
  3758   001326  EFA0  F009         	goto	i2l2167
  3759   00132A                     i2l2163:
  3760   00132A  FFFF               	dw	65535	; assembler added errata NOP
  3761                           
  3762                           ;LIB258_USART.c: 94:     }
  3763   00132C  2A3B               	incf	ReceiveCMD_USART@conta_byte^0,f,c
  3764   00132E  0E09               	movlw	9
  3765   001330  643B               	cpfsgt	ReceiveCMD_USART@conta_byte^0,c
  3766   001332  EF9D  F009         	goto	i2u67_41
  3767   001336  EFA0  F009         	goto	i2u67_40
  3768   00133A                     i2u67_41:
  3769   00133A  FFFF               	dw	65535	; assembler added errata NOP
  3770   00133C  EF84  F009         	goto	i2l2157
  3771   001340                     i2u67_40:
  3772   001340                     i2l2167:
  3773   001340  FFFF               	dw	65535	; assembler added errata NOP
  3774                           
  3775                           ;LIB258_USART.c: 95:     if(conta_byte < 10){
  3776   001342  0E0A               	movlw	10
  3777   001344  603B               	cpfslt	ReceiveCMD_USART@conta_byte^0,c
  3778   001346  EFA7  F009         	goto	i2u68_41
  3779   00134A  EFAA  F009         	goto	i2u68_40
  3780   00134E                     i2u68_41:
  3781   00134E  FFFF               	dw	65535	; assembler added errata NOP
  3782   001350  EFE9  F009         	goto	i2l230
  3783   001354                     i2u68_40:
  3784   001354  FFFF               	dw	65535	; assembler added errata NOP
  3785   001356                     
  3786                           ;LIB258_USART.c: 96:         data_byte = ReadByte_USART();
  3787   001356  ECEF  F009         	call	_ReadByte_USART	;wreg free
  3788   00135A  6E3C               	movwf	ReceiveCMD_USART@data_byte^0,c
  3789   00135C                     
  3790                           ;LIB258_USART.c: 97:         if(data_byte == 'R'){
  3791   00135C  0E52               	movlw	82
  3792   00135E  183C               	xorwf	ReceiveCMD_USART@data_byte^0,w,c
  3793   001360  A4D8               	btfss	status,2,c
  3794   001362  EFB5  F009         	goto	i2u69_41
  3795   001366  EFB8  F009         	goto	i2u69_40
  3796   00136A                     i2u69_41:
  3797   00136A  FFFF               	dw	65535	; assembler added errata NOP
  3798   00136C  EFE9  F009         	goto	i2l230
  3799   001370                     i2u69_40:
  3800   001370  FFFF               	dw	65535	; assembler added errata NOP
  3801   001372                     
  3802                           ;LIB258_USART.c: 98:             data_byte = ReadByte_USART();
  3803   001372  ECEF  F009         	call	_ReadByte_USART	;wreg free
  3804   001376  6E3C               	movwf	ReceiveCMD_USART@data_byte^0,c
  3805   001378                     
  3806                           ;LIB258_USART.c: 99:             if(data_byte == 'O'){
  3807   001378  0E4F               	movlw	79
  3808   00137A  183C               	xorwf	ReceiveCMD_USART@data_byte^0,w,c
  3809   00137C  A4D8               	btfss	status,2,c
  3810   00137E  EFC3  F009         	goto	i2u70_41
  3811   001382  EFC6  F009         	goto	i2u70_40
  3812   001386                     i2u70_41:
  3813   001386  FFFF               	dw	65535	; assembler added errata NOP
  3814   001388  EFE9  F009         	goto	i2l230
  3815   00138C                     i2u70_40:
  3816   00138C  FFFF               	dw	65535	; assembler added errata NOP
  3817   00138E                     
  3818                           ;LIB258_USART.c: 100:                 data_byte = ReadByte_USART();
  3819   00138E  ECEF  F009         	call	_ReadByte_USART	;wreg free
  3820   001392  6E3C               	movwf	ReceiveCMD_USART@data_byte^0,c
  3821   001394                     
  3822                           ;LIB258_USART.c: 101:                 if(data_byte == 'C'){
  3823   001394  0E43               	movlw	67
  3824   001396  183C               	xorwf	ReceiveCMD_USART@data_byte^0,w,c
  3825   001398  A4D8               	btfss	status,2,c
  3826   00139A  EFD1  F009         	goto	i2u71_41
  3827   00139E  EFD4  F009         	goto	i2u71_40
  3828   0013A2                     i2u71_41:
  3829   0013A2  FFFF               	dw	65535	; assembler added errata NOP
  3830   0013A4  EFE9  F009         	goto	i2l230
  3831   0013A8                     i2u71_40:
  3832   0013A8  FFFF               	dw	65535	; assembler added errata NOP
  3833   0013AA                     
  3834                           ;LIB258_USART.c: 102:                     data_byte = ReadByte_USART();
  3835   0013AA  ECEF  F009         	call	_ReadByte_USART	;wreg free
  3836   0013AE  6E3C               	movwf	ReceiveCMD_USART@data_byte^0,c
  3837                           
  3838                           ;LIB258_USART.c: 103:                     data_byte = ReadByte_USART();
  3839   0013B0  ECEF  F009         	call	_ReadByte_USART	;wreg free
  3840   0013B4  6E3C               	movwf	ReceiveCMD_USART@data_byte^0,c
  3841                           
  3842                           ;LIB258_USART.c: 104:                     BufferDAT[12] = ReadByte_USART();
  3843   0013B6  ECEF  F009         	call	_ReadByte_USART	;wreg free
  3844   0013BA  0100               	movlb	0	; () banked
  3845   0013BC  6F6C               	movwf	(_BufferDAT+12)& (0+255),b
  3846                           
  3847                           ;LIB258_USART.c: 105:                     data_byte = ReadByte_USART();
  3848   0013BE  ECEF  F009         	call	_ReadByte_USART	;wreg free
  3849   0013C2  6E3C               	movwf	ReceiveCMD_USART@data_byte^0,c
  3850                           
  3851                           ;LIB258_USART.c: 106:                     data_byte = ReadByte_USART();
  3852   0013C4  ECEF  F009         	call	_ReadByte_USART	;wreg free
  3853   0013C8  6E3C               	movwf	ReceiveCMD_USART@data_byte^0,c
  3854   0013CA                     
  3855                           ;LIB258_USART.c: 107:                     return BufferDAT[12];
  3856   0013CA  0100               	movlb	0	; () banked
  3857   0013CC  516C               	movf	(_BufferDAT+12)& (0+255),w,b
  3858   0013CE  EFEC  F009         	goto	i2l234
  3859   0013D2                     i2l230:
  3860   0013D2  FFFF               	dw	65535	; assembler added errata NOP
  3861                           
  3862                           ;LIB258_USART.c: 112:     RCSTAbits.CREN = 0;
  3863   0013D4  98AB               	bcf	171,4,c	;volatile
  3864   0013D6                     
  3865                           ;LIB258_USART.c: 113:     return 'X';
  3866   0013D6  0E58               	movlw	88
  3867   0013D8                     i2l234:
  3868   0013D8  FFFF               	dw	65535	; assembler added errata NOP
  3869   0013DA  0012               	return		;funcret
  3870   0013DC  FFFF               	dw	65535	; errata NOP
  3871   0013DE                     __end_of_ReceiveCMD_USART:
  3872                           	callstack 0
  3873                           
  3874 ;; *************** function _ReadByte_USART *****************
  3875 ;; Defined at:
  3876 ;;		line 36 in file "LIB258_USART.c"
  3877 ;; Parameters:    Size  Location     Type
  3878 ;;		None
  3879 ;; Auto vars:     Size  Location     Type
  3880 ;;  Ready           1    2[COMRAM] unsigned char 
  3881 ;;  conta           1    1[COMRAM] unsigned char 
  3882 ;;  data            1    0[COMRAM] unsigned char 
  3883 ;; Return value:  Size  Location     Type
  3884 ;;                  1    wreg      unsigned char 
  3885 ;; Registers used:
  3886 ;;		wreg, status,2, status,0
  3887 ;; Tracked objects:
  3888 ;;		On entry : 0/0
  3889 ;;		On exit  : 0/0
  3890 ;;		Unchanged: 0/0
  3891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3892 ;;      Params:         0       0       0       0       0       0       0
  3893 ;;      Locals:         3       0       0       0       0       0       0
  3894 ;;      Temps:          0       0       0       0       0       0       0
  3895 ;;      Totals:         3       0       0       0       0       0       0
  3896 ;;Total ram usage:        3 bytes
  3897 ;; Hardware stack levels used: 1
  3898 ;; This function calls:
  3899 ;;		Nothing
  3900 ;; This function is called by:
  3901 ;;		_ReceiveCMD_USART
  3902 ;; This function uses a non-reentrant model
  3903 ;;
  3904                           
  3905                           	psect	text15
  3906   0013DE                     __ptext15:
  3907                           	callstack 0
  3908   0013DE                     _ReadByte_USART:
  3909                           	callstack 0
  3910   0013DE  FFFF               	dw	65535	; assembler added errata NOP
  3911   0013E0                     
  3912                           ;LIB258_USART.c: 37:     unsigned char conta;;LIB258_USART.c: 38:     unsigned char Read
      +                          y;;LIB258_USART.c: 39:     char data;;LIB258_USART.c: 41:     conta = 0;
  3913   0013E0  0E00               	movlw	0
  3914   0013E2  6E39               	movwf	ReadByte_USART@conta^0,c
  3915   0013E4                     
  3916                           ;LIB258_USART.c: 42:     Ready = 255;
  3917   0013E4  683A               	setf	ReadByte_USART@Ready^0,c
  3918                           
  3919                           ;LIB258_USART.c: 43:     TMR2 = 0x00;
  3920   0013E6  0E00               	movlw	0
  3921   0013E8  6ECC               	movwf	204,c	;volatile
  3922   0013EA                     
  3923                           ;LIB258_USART.c: 44:     T2CONbits.TMR2ON = 1;
  3924   0013EA  84CA               	bsf	202,2,c	;volatile
  3925                           
  3926                           ;LIB258_USART.c: 46:     while(Ready){
  3927   0013EC  EF22  F00A         	goto	i2l195
  3928   0013F0                     i2l197:
  3929   0013F0  FFFF               	dw	65535	; assembler added errata NOP
  3930   0013F2  BA9E               	btfsc	158,5,c	;volatile
  3931   0013F4  EFFE  F009         	goto	i2u59_41
  3932   0013F8  EF01  F00A         	goto	i2u59_40
  3933   0013FC                     i2u59_41:
  3934   0013FC  FFFF               	dw	65535	; assembler added errata NOP
  3935   0013FE  EF0A  F00A         	goto	i2l201
  3936   001402                     i2u59_40:
  3937   001402  FFFF               	dw	65535	; assembler added errata NOP
  3938   001404  A29E               	btfss	158,1,c	;volatile
  3939   001406  EF07  F00A         	goto	i2u60_41
  3940   00140A  EF0A  F00A         	goto	i2u60_40
  3941   00140E                     i2u60_41:
  3942   00140E  FFFF               	dw	65535	; assembler added errata NOP
  3943   001410  EFF8  F009         	goto	i2l197
  3944   001414                     i2u60_40:
  3945   001414                     i2l201:
  3946   001414  FFFF               	dw	65535	; assembler added errata NOP
  3947                           
  3948                           ;LIB258_USART.c: 48:         PIR1bits.TMR2IF = 0;
  3949   001416  929E               	bcf	158,1,c	;volatile
  3950   001418                     
  3951                           ;LIB258_USART.c: 49:         conta++;
  3952   001418  2A39               	incf	ReadByte_USART@conta^0,f,c
  3953   00141A                     
  3954                           ;LIB258_USART.c: 50:         if((PIR1bits.RCIF == 1) || (conta>3)){
  3955   00141A  BA9E               	btfsc	158,5,c	;volatile
  3956   00141C  EF12  F00A         	goto	i2u61_41
  3957   001420  EF15  F00A         	goto	i2u61_40
  3958   001424                     i2u61_41:
  3959   001424  FFFF               	dw	65535	; assembler added errata NOP
  3960   001426  EF1F  F00A         	goto	i2l2077
  3961   00142A                     i2u61_40:
  3962   00142A  FFFF               	dw	65535	; assembler added errata NOP
  3963   00142C  0E03               	movlw	3
  3964   00142E  6439               	cpfsgt	ReadByte_USART@conta^0,c
  3965   001430  EF1C  F00A         	goto	i2u62_41
  3966   001434  EF1F  F00A         	goto	i2u62_40
  3967   001438                     i2u62_41:
  3968   001438  FFFF               	dw	65535	; assembler added errata NOP
  3969   00143A  EF22  F00A         	goto	i2l195
  3970   00143E                     i2u62_40:
  3971   00143E                     i2l2077:
  3972   00143E  FFFF               	dw	65535	; assembler added errata NOP
  3973                           
  3974                           ;LIB258_USART.c: 51:             Ready = 0;
  3975   001440  0E00               	movlw	0
  3976   001442  6E3A               	movwf	ReadByte_USART@Ready^0,c
  3977   001444                     i2l195:
  3978   001444  FFFF               	dw	65535	; assembler added errata NOP
  3979                           
  3980                           ;LIB258_USART.c: 46:     while(Ready){
  3981   001446  503A               	movf	ReadByte_USART@Ready^0,w,c
  3982   001448  A4D8               	btfss	status,2,c
  3983   00144A  EF29  F00A         	goto	i2u63_41
  3984   00144E  EF2C  F00A         	goto	i2u63_40
  3985   001452                     i2u63_41:
  3986   001452  FFFF               	dw	65535	; assembler added errata NOP
  3987   001454  EFF8  F009         	goto	i2l197
  3988   001458                     i2u63_40:
  3989   001458  FFFF               	dw	65535	; assembler added errata NOP
  3990   00145A                     
  3991                           ;LIB258_USART.c: 54:     PIR1bits.TMR2IF = 0;
  3992   00145A  929E               	bcf	158,1,c	;volatile
  3993                           
  3994                           ;LIB258_USART.c: 55:     T2CONbits.TMR2ON = 0;
  3995   00145C  94CA               	bcf	202,2,c	;volatile
  3996                           
  3997                           ;LIB258_USART.c: 56:     data = (char) RCREG;
  3998   00145E  CFAE F038          	movff	4014,ReadByte_USART@data	;volatile
  3999   001462                     
  4000                           ;LIB258_USART.c: 57:     return data;
  4001   001462  5038               	movf	ReadByte_USART@data^0,w,c
  4002   001464  0012               	return		;funcret
  4003   001466  FFFF               	dw	65535	; errata NOP
  4004   001468                     __end_of_ReadByte_USART:
  4005                           	callstack 0
  4006                           
  4007 ;; *************** function _InitCS5532 *****************
  4008 ;; Defined at:
  4009 ;;		line 64 in file "LIB258_SPI.c"
  4010 ;; Parameters:    Size  Location     Type
  4011 ;;		None
  4012 ;; Auto vars:     Size  Location     Type
  4013 ;;		None
  4014 ;; Return value:  Size  Location     Type
  4015 ;;                  1    wreg      void 
  4016 ;; Registers used:
  4017 ;;		wreg, status,2, status,0, cstack
  4018 ;; Tracked objects:
  4019 ;;		On entry : 0/0
  4020 ;;		On exit  : 0/0
  4021 ;;		Unchanged: 0/0
  4022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4023 ;;      Params:         0       0       0       0       0       0       0
  4024 ;;      Locals:         0       0       0       0       0       0       0
  4025 ;;      Temps:          0       0       0       0       0       0       0
  4026 ;;      Totals:         0       0       0       0       0       0       0
  4027 ;;Total ram usage:        0 bytes
  4028 ;; Hardware stack levels used: 1
  4029 ;; Hardware stack levels required when called: 2
  4030 ;; This function calls:
  4031 ;;		_ReadRegister_4bytesCS5532
  4032 ;;		_WriteRegister_4bytesCS5532
  4033 ;; This function is called by:
  4034 ;;		_Interrups
  4035 ;; This function uses a non-reentrant model
  4036 ;;
  4037                           
  4038                           	psect	text16
  4039   00160E                     __ptext16:
  4040                           	callstack 0
  4041   00160E                     _InitCS5532:
  4042                           	callstack 0
  4043   00160E  FFFF               	dw	65535	; assembler added errata NOP
  4044   001610                     
  4045                           ;LIB258_SPI.c: 67:     ReadRegister_4bytesCS5532(0x0B);
  4046   001610  0E0B               	movlw	11
  4047   001612  ECF0  F00A         	call	_ReadRegister_4bytesCS5532
  4048   001616                     
  4049                           ;LIB258_SPI.c: 68:     BufferSPI[0] |= 0x02;
  4050   001616  8231               	bsf	_BufferSPI^0,1,c
  4051   001618                     
  4052                           ;LIB258_SPI.c: 69:     WriteRegister_4bytesCS5532(0x03);
  4053   001618  0E03               	movlw	3
  4054   00161A  EC42  F00B         	call	_WriteRegister_4bytesCS5532
  4055   00161E                     
  4056                           ;LIB258_SPI.c: 71:     BufferSPI[0] = 0x05;
  4057   00161E  0E05               	movlw	5
  4058   001620  6E31               	movwf	_BufferSPI^0,c
  4059   001622                     
  4060                           ;LIB258_SPI.c: 72:     BufferSPI[1] = 0x00;
  4061   001622  0E00               	movlw	0
  4062   001624  6E32               	movwf	(_BufferSPI+1)^0,c
  4063   001626                     
  4064                           ;LIB258_SPI.c: 73:     BufferSPI[2] = 0x05;
  4065   001626  0E05               	movlw	5
  4066   001628  6E33               	movwf	(_BufferSPI+2)^0,c
  4067   00162A                     
  4068                           ;LIB258_SPI.c: 74:     BufferSPI[3] = 0x00;
  4069   00162A  0E00               	movlw	0
  4070   00162C  6E34               	movwf	(_BufferSPI+3)^0,c
  4071   00162E                     
  4072                           ;LIB258_SPI.c: 75:     WriteRegister_4bytesCS5532(0x05);
  4073   00162E  0E05               	movlw	5
  4074   001630  EC42  F00B         	call	_WriteRegister_4bytesCS5532
  4075   001634  0012               	return		;funcret
  4076   001636  FFFF               	dw	65535	; errata NOP
  4077   001638                     __end_of_InitCS5532:
  4078                           	callstack 0
  4079                           
  4080 ;; *************** function _WriteRegister_4bytesCS5532 *****************
  4081 ;; Defined at:
  4082 ;;		line 89 in file "LIB258_SPI.c"
  4083 ;; Parameters:    Size  Location     Type
  4084 ;;  command         1    wreg     unsigned char 
  4085 ;; Auto vars:     Size  Location     Type
  4086 ;;  command         1    1[COMRAM] unsigned char 
  4087 ;; Return value:  Size  Location     Type
  4088 ;;                  1    wreg      void 
  4089 ;; Registers used:
  4090 ;;		wreg, status,2, cstack
  4091 ;; Tracked objects:
  4092 ;;		On entry : 0/0
  4093 ;;		On exit  : 0/0
  4094 ;;		Unchanged: 0/0
  4095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4096 ;;      Params:         0       0       0       0       0       0       0
  4097 ;;      Locals:         1       0       0       0       0       0       0
  4098 ;;      Temps:          0       0       0       0       0       0       0
  4099 ;;      Totals:         1       0       0       0       0       0       0
  4100 ;;Total ram usage:        1 bytes
  4101 ;; Hardware stack levels used: 1
  4102 ;; Hardware stack levels required when called: 1
  4103 ;; This function calls:
  4104 ;;		_TransferByte_SPI
  4105 ;; This function is called by:
  4106 ;;		_ResetCS5532
  4107 ;;		_InitCS5532
  4108 ;; This function uses a non-reentrant model
  4109 ;;
  4110                           
  4111                           	psect	text17
  4112   001684                     __ptext17:
  4113                           	callstack 0
  4114   001684                     _WriteRegister_4bytesCS5532:
  4115                           	callstack 0
  4116   001684  FFFF               	dw	65535	; assembler added errata NOP
  4117                           
  4118                           ;incstack = 0
  4119                           ;WriteRegister_4bytesCS5532@command stored from wreg
  4120   001686  6E39               	movwf	WriteRegister_4bytesCS5532@command^0,c
  4121   001688                     
  4122                           ;LIB258_SPI.c: 91:     TransferByte_SPI(command);
  4123   001688  5039               	movf	WriteRegister_4bytesCS5532@command^0,w,c
  4124   00168A  EC67  F00B         	call	_TransferByte_SPI
  4125                           
  4126                           ;LIB258_SPI.c: 92:     TransferByte_SPI(BufferSPI[0]);
  4127   00168E  5031               	movf	_BufferSPI^0,w,c
  4128   001690  EC67  F00B         	call	_TransferByte_SPI
  4129                           
  4130                           ;LIB258_SPI.c: 93:     TransferByte_SPI(BufferSPI[1]);
  4131   001694  5032               	movf	(_BufferSPI+1)^0,w,c
  4132   001696  EC67  F00B         	call	_TransferByte_SPI
  4133                           
  4134                           ;LIB258_SPI.c: 94:     TransferByte_SPI(BufferSPI[2]);
  4135   00169A  5033               	movf	(_BufferSPI+2)^0,w,c
  4136   00169C  EC67  F00B         	call	_TransferByte_SPI
  4137                           
  4138                           ;LIB258_SPI.c: 95:     TransferByte_SPI(BufferSPI[3]);
  4139   0016A0  5034               	movf	(_BufferSPI+3)^0,w,c
  4140   0016A2  EC67  F00B         	call	_TransferByte_SPI
  4141   0016A6  0012               	return		;funcret
  4142   0016A8  FFFF               	dw	65535	; errata NOP
  4143   0016AA                     __end_of_WriteRegister_4bytesCS5532:
  4144                           	callstack 0
  4145                           
  4146 ;; *************** function _CleanHolding *****************
  4147 ;; Defined at:
  4148 ;;		line 122 in file "LIB258_SPI.c"
  4149 ;; Parameters:    Size  Location     Type
  4150 ;;		None
  4151 ;; Auto vars:     Size  Location     Type
  4152 ;;		None
  4153 ;; Return value:  Size  Location     Type
  4154 ;;                  1    wreg      void 
  4155 ;; Registers used:
  4156 ;;		wreg, status,2, status,0, cstack
  4157 ;; Tracked objects:
  4158 ;;		On entry : 0/0
  4159 ;;		On exit  : 0/0
  4160 ;;		Unchanged: 0/0
  4161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4162 ;;      Params:         0       0       0       0       0       0       0
  4163 ;;      Locals:         0       0       0       0       0       0       0
  4164 ;;      Temps:          0       0       0       0       0       0       0
  4165 ;;      Totals:         0       0       0       0       0       0       0
  4166 ;;Total ram usage:        0 bytes
  4167 ;; Hardware stack levels used: 1
  4168 ;; Hardware stack levels required when called: 3
  4169 ;; This function calls:
  4170 ;;		_ReadAD24
  4171 ;; This function is called by:
  4172 ;;		_Interrups
  4173 ;; This function uses a non-reentrant model
  4174 ;;
  4175                           
  4176                           	psect	text18
  4177   001732                     __ptext18:
  4178                           	callstack 0
  4179   001732                     _CleanHolding:
  4180                           	callstack 0
  4181   001732  FFFF               	dw	65535	; assembler added errata NOP
  4182   001734                     
  4183                           ;LIB258_SPI.c: 124:     PORTB = 0X0C;
  4184   001734  0E0C               	movlw	12
  4185   001736  6E81               	movwf	129,c	;volatile
  4186   001738                     
  4187                           ;LIB258_SPI.c: 125:     _delay((unsigned long)((100)*(9830400UL/4000000.0)));
  4188   001738  0E3D               	movlw	61
  4189   00173A                     i2u119_47:
  4190   00173A  FFFF               	dw	65535	; errata NOP
  4191   00173C  2EE8               	decfsz	wreg,f,c
  4192   00173E  D7FD               	bra	i2u119_47
  4193   001740  F000               	nop	
  4194   001742                     
  4195                           ;LIB258_SPI.c: 126:     ReadAD24(0, 0x00);
  4196   001742  0E00               	movlw	0
  4197   001744  6E46               	movwf	ReadAD24@cmd_convert^0,c
  4198   001746  0E00               	movlw	0
  4199   001748  ECF6  F008         	call	_ReadAD24
  4200   00174C  0012               	return		;funcret
  4201   00174E  FFFF               	dw	65535	; errata NOP
  4202   001750                     __end_of_CleanHolding:
  4203                           	callstack 0
  4204                           
  4205 ;; *************** function _ReadAD24 *****************
  4206 ;; Defined at:
  4207 ;;		line 102 in file "LIB258_SPI.c"
  4208 ;; Parameters:    Size  Location     Type
  4209 ;;  flag_convert    1    wreg     unsigned char 
  4210 ;;  cmd_convert     1   14[COMRAM] unsigned char 
  4211 ;; Auto vars:     Size  Location     Type
  4212 ;;  flag_convert    1   22[COMRAM] unsigned char 
  4213 ;;  DataADC         4   23[COMRAM] long 
  4214 ;; Return value:  Size  Location     Type
  4215 ;;                  4   14[COMRAM] long 
  4216 ;; Registers used:
  4217 ;;		wreg, status,2, status,0, cstack
  4218 ;; Tracked objects:
  4219 ;;		On entry : 0/0
  4220 ;;		On exit  : 0/0
  4221 ;;		Unchanged: 0/0
  4222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4223 ;;      Params:         4       0       0       0       0       0       0
  4224 ;;      Locals:         5       0       0       0       0       0       0
  4225 ;;      Temps:          4       0       0       0       0       0       0
  4226 ;;      Totals:        13       0       0       0       0       0       0
  4227 ;;Total ram usage:       13 bytes
  4228 ;; Hardware stack levels used: 1
  4229 ;; Hardware stack levels required when called: 2
  4230 ;; This function calls:
  4231 ;;		_ReadRegister_4bytesCS5532
  4232 ;;		___aldiv
  4233 ;; This function is called by:
  4234 ;;		_CleanHolding
  4235 ;;		_Interrups
  4236 ;; This function uses a non-reentrant model
  4237 ;;
  4238                           
  4239                           	psect	text19
  4240   0011EC                     __ptext19:
  4241                           	callstack 0
  4242   0011EC                     _ReadAD24:
  4243                           	callstack 0
  4244   0011EC  FFFF               	dw	65535	; assembler added errata NOP
  4245                           
  4246                           ;incstack = 0
  4247                           ;ReadAD24@flag_convert stored from wreg
  4248   0011EE  6E4E               	movwf	ReadAD24@flag_convert^0,c
  4249   0011F0                     i2l98:
  4250   0011F0  FFFF               	dw	65535	; assembler added errata NOP
  4251   0011F2  B882               	btfsc	130,4,c	;volatile
  4252   0011F4  EFFE  F008         	goto	i2u57_41
  4253   0011F8  EF01  F009         	goto	i2u57_40
  4254   0011FC                     i2u57_41:
  4255   0011FC  FFFF               	dw	65535	; assembler added errata NOP
  4256   0011FE  EFF8  F008         	goto	i2l98
  4257   001202                     i2u57_40:
  4258   001202  FFFF               	dw	65535	; assembler added errata NOP
  4259   001204                     
  4260                           ;LIB258_SPI.c: 107:     ReadRegister_4bytesCS5532(cmd_convert);
  4261   001204  5046               	movf	ReadAD24@cmd_convert^0,w,c
  4262   001206  ECF0  F00A         	call	_ReadRegister_4bytesCS5532
  4263   00120A                     
  4264                           ;LIB258_SPI.c: 109:     DataADC = 0;
  4265   00120A  0E00               	movlw	0
  4266   00120C  6E4F               	movwf	ReadAD24@DataADC^0,c
  4267   00120E  0E00               	movlw	0
  4268   001210  6E50               	movwf	(ReadAD24@DataADC+1)^0,c
  4269   001212  0E00               	movlw	0
  4270   001214  6E51               	movwf	(ReadAD24@DataADC+2)^0,c
  4271   001216  0E00               	movlw	0
  4272   001218  6E52               	movwf	(ReadAD24@DataADC+3)^0,c
  4273   00121A                     
  4274                           ;LIB258_SPI.c: 110:     if(flag_convert){
  4275   00121A  504E               	movf	ReadAD24@flag_convert^0,w,c
  4276   00121C  B4D8               	btfsc	status,2,c
  4277   00121E  EF13  F009         	goto	i2u58_41
  4278   001222  EF16  F009         	goto	i2u58_40
  4279   001226                     i2u58_41:
  4280   001226  FFFF               	dw	65535	; assembler added errata NOP
  4281   001228  EF76  F009         	goto	i2l2059
  4282   00122C                     i2u58_40:
  4283   00122C  FFFF               	dw	65535	; assembler added errata NOP
  4284   00122E                     
  4285                           ;LIB258_SPI.c: 111:         DataADC = DataADC | (signed long) BufferSPI[0]<<24;
  4286   00122E  C031  F04A         	movff	_BufferSPI,??_ReadAD24
  4287   001232  6A4B               	clrf	(??_ReadAD24+1)^0,c
  4288   001234  6A4C               	clrf	(??_ReadAD24+2)^0,c
  4289   001236  6A4D               	clrf	(??_ReadAD24+3)^0,c
  4290   001238  C04A  F04D         	movff	??_ReadAD24,??_ReadAD24+3
  4291   00123C  6A4C               	clrf	(??_ReadAD24+2)^0,c
  4292   00123E  6A4B               	clrf	(??_ReadAD24+1)^0,c
  4293   001240  6A4A               	clrf	??_ReadAD24^0,c
  4294   001242  504F               	movf	ReadAD24@DataADC^0,w,c
  4295   001244  104A               	iorwf	??_ReadAD24^0,w,c
  4296   001246  6E4F               	movwf	ReadAD24@DataADC^0,c
  4297   001248  5050               	movf	(ReadAD24@DataADC+1)^0,w,c
  4298   00124A  104B               	iorwf	(??_ReadAD24+1)^0,w,c
  4299   00124C  6E50               	movwf	(ReadAD24@DataADC+1)^0,c
  4300   00124E  5051               	movf	(ReadAD24@DataADC+2)^0,w,c
  4301   001250  104C               	iorwf	(??_ReadAD24+2)^0,w,c
  4302   001252  6E51               	movwf	(ReadAD24@DataADC+2)^0,c
  4303   001254  5052               	movf	(ReadAD24@DataADC+3)^0,w,c
  4304   001256  104D               	iorwf	(??_ReadAD24+3)^0,w,c
  4305   001258  6E52               	movwf	(ReadAD24@DataADC+3)^0,c
  4306                           
  4307                           ;LIB258_SPI.c: 112:         DataADC = DataADC | (signed long) BufferSPI[1]<<16;
  4308   00125A  C032  F04A         	movff	_BufferSPI+1,??_ReadAD24
  4309   00125E  6A4B               	clrf	(??_ReadAD24+1)^0,c
  4310   001260  6A4C               	clrf	(??_ReadAD24+2)^0,c
  4311   001262  6A4D               	clrf	(??_ReadAD24+3)^0,c
  4312   001264  C04B  F04D         	movff	??_ReadAD24+1,??_ReadAD24+3
  4313   001268  C04A  F04C         	movff	??_ReadAD24,??_ReadAD24+2
  4314   00126C  6A4B               	clrf	(??_ReadAD24+1)^0,c
  4315   00126E  6A4A               	clrf	??_ReadAD24^0,c
  4316   001270  504F               	movf	ReadAD24@DataADC^0,w,c
  4317   001272  104A               	iorwf	??_ReadAD24^0,w,c
  4318   001274  6E4F               	movwf	ReadAD24@DataADC^0,c
  4319   001276  5050               	movf	(ReadAD24@DataADC+1)^0,w,c
  4320   001278  104B               	iorwf	(??_ReadAD24+1)^0,w,c
  4321   00127A  6E50               	movwf	(ReadAD24@DataADC+1)^0,c
  4322   00127C  5051               	movf	(ReadAD24@DataADC+2)^0,w,c
  4323   00127E  104C               	iorwf	(??_ReadAD24+2)^0,w,c
  4324   001280  6E51               	movwf	(ReadAD24@DataADC+2)^0,c
  4325   001282  5052               	movf	(ReadAD24@DataADC+3)^0,w,c
  4326   001284  104D               	iorwf	(??_ReadAD24+3)^0,w,c
  4327   001286  6E52               	movwf	(ReadAD24@DataADC+3)^0,c
  4328                           
  4329                           ;LIB258_SPI.c: 113:         DataADC = DataADC | (signed long) BufferSPI[2]<<8;
  4330   001288  C033  F04A         	movff	_BufferSPI+2,??_ReadAD24
  4331   00128C  6A4B               	clrf	(??_ReadAD24+1)^0,c
  4332   00128E  6A4C               	clrf	(??_ReadAD24+2)^0,c
  4333   001290  6A4D               	clrf	(??_ReadAD24+3)^0,c
  4334   001292  C04C  F04D         	movff	??_ReadAD24+2,??_ReadAD24+3
  4335   001296  C04B  F04C         	movff	??_ReadAD24+1,??_ReadAD24+2
  4336   00129A  C04A  F04B         	movff	??_ReadAD24,??_ReadAD24+1
  4337   00129E  6A4A               	clrf	??_ReadAD24^0,c
  4338   0012A0  504F               	movf	ReadAD24@DataADC^0,w,c
  4339   0012A2  104A               	iorwf	??_ReadAD24^0,w,c
  4340   0012A4  6E4F               	movwf	ReadAD24@DataADC^0,c
  4341   0012A6  5050               	movf	(ReadAD24@DataADC+1)^0,w,c
  4342   0012A8  104B               	iorwf	(??_ReadAD24+1)^0,w,c
  4343   0012AA  6E50               	movwf	(ReadAD24@DataADC+1)^0,c
  4344   0012AC  5051               	movf	(ReadAD24@DataADC+2)^0,w,c
  4345   0012AE  104C               	iorwf	(??_ReadAD24+2)^0,w,c
  4346   0012B0  6E51               	movwf	(ReadAD24@DataADC+2)^0,c
  4347   0012B2  5052               	movf	(ReadAD24@DataADC+3)^0,w,c
  4348   0012B4  104D               	iorwf	(??_ReadAD24+3)^0,w,c
  4349   0012B6  6E52               	movwf	(ReadAD24@DataADC+3)^0,c
  4350   0012B8                     
  4351                           ;LIB258_SPI.c: 115:         DataADC = DataADC/256;
  4352   0012B8  C04F  F038         	movff	ReadAD24@DataADC,___aldiv@dividend
  4353   0012BC  C050  F039         	movff	ReadAD24@DataADC+1,___aldiv@dividend+1
  4354   0012C0  C051  F03A         	movff	ReadAD24@DataADC+2,___aldiv@dividend+2
  4355   0012C4  C052  F03B         	movff	ReadAD24@DataADC+3,___aldiv@dividend+3
  4356   0012C8  0E00               	movlw	0
  4357   0012CA  6E3C               	movwf	___aldiv@divisor^0,c
  4358   0012CC  0E01               	movlw	1
  4359   0012CE  6E3D               	movwf	(___aldiv@divisor+1)^0,c
  4360   0012D0  0E00               	movlw	0
  4361   0012D2  6E3E               	movwf	(___aldiv@divisor+2)^0,c
  4362   0012D4  0E00               	movlw	0
  4363   0012D6  6E3F               	movwf	(___aldiv@divisor+3)^0,c
  4364   0012D8  EC5A  F008         	call	___aldiv	;wreg free
  4365   0012DC  C038  F04F         	movff	?___aldiv,ReadAD24@DataADC
  4366   0012E0  C039  F050         	movff	?___aldiv+1,ReadAD24@DataADC+1
  4367   0012E4  C03A  F051         	movff	?___aldiv+2,ReadAD24@DataADC+2
  4368   0012E8  C03B  F052         	movff	?___aldiv+3,ReadAD24@DataADC+3
  4369   0012EC                     i2l2059:
  4370   0012EC  FFFF               	dw	65535	; assembler added errata NOP
  4371                           
  4372                           ;LIB258_SPI.c: 118:     return DataADC;
  4373   0012EE  C04F  F046         	movff	ReadAD24@DataADC,?_ReadAD24
  4374   0012F2  C050  F047         	movff	ReadAD24@DataADC+1,?_ReadAD24+1
  4375   0012F6  C051  F048         	movff	ReadAD24@DataADC+2,?_ReadAD24+2
  4376   0012FA  C052  F049         	movff	ReadAD24@DataADC+3,?_ReadAD24+3
  4377   0012FE  0012               	return		;funcret
  4378   001300  FFFF               	dw	65535	; errata NOP
  4379   001302                     __end_of_ReadAD24:
  4380                           	callstack 0
  4381                           
  4382 ;; *************** function ___aldiv *****************
  4383 ;; Defined at:
  4384 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\aldiv.c"
  4385 ;; Parameters:    Size  Location     Type
  4386 ;;  dividend        4    0[COMRAM] long 
  4387 ;;  divisor         4    4[COMRAM] long 
  4388 ;; Auto vars:     Size  Location     Type
  4389 ;;  quotient        4   10[COMRAM] long 
  4390 ;;  sign            1    9[COMRAM] unsigned char 
  4391 ;;  counter         1    8[COMRAM] unsigned char 
  4392 ;; Return value:  Size  Location     Type
  4393 ;;                  4    0[COMRAM] long 
  4394 ;; Registers used:
  4395 ;;		wreg, status,2, status,0
  4396 ;; Tracked objects:
  4397 ;;		On entry : 0/0
  4398 ;;		On exit  : 0/0
  4399 ;;		Unchanged: 0/0
  4400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4401 ;;      Params:         8       0       0       0       0       0       0
  4402 ;;      Locals:         6       0       0       0       0       0       0
  4403 ;;      Temps:          0       0       0       0       0       0       0
  4404 ;;      Totals:        14       0       0       0       0       0       0
  4405 ;;Total ram usage:       14 bytes
  4406 ;; Hardware stack levels used: 1
  4407 ;; This function calls:
  4408 ;;		Nothing
  4409 ;; This function is called by:
  4410 ;;		_ReadAD24
  4411 ;;		_Interrups
  4412 ;; This function uses a non-reentrant model
  4413 ;;
  4414                           
  4415                           	psect	text20
  4416   0010B4                     __ptext20:
  4417                           	callstack 0
  4418   0010B4                     ___aldiv:
  4419                           	callstack 0
  4420   0010B4  FFFF               	dw	65535	; assembler added errata NOP
  4421   0010B6  0E00               	movlw	0
  4422   0010B8  6E41               	movwf	___aldiv@sign^0,c
  4423   0010BA  BE3F               	btfsc	(___aldiv@divisor+3)^0,7,c
  4424   0010BC  EF65  F008         	goto	i2u51_40
  4425   0010C0  EF62  F008         	goto	i2u51_41
  4426   0010C4                     i2u51_41:
  4427   0010C4  FFFF               	dw	65535	; assembler added errata NOP
  4428   0010C6  EF70  F008         	goto	i2l2007
  4429   0010CA                     i2u51_40:
  4430   0010CA  FFFF               	dw	65535	; assembler added errata NOP
  4431   0010CC  1E3F               	comf	(___aldiv@divisor+3)^0,f,c
  4432   0010CE  1E3E               	comf	(___aldiv@divisor+2)^0,f,c
  4433   0010D0  1E3D               	comf	(___aldiv@divisor+1)^0,f,c
  4434   0010D2  6C3C               	negf	___aldiv@divisor^0,c
  4435   0010D4  0E00               	movlw	0
  4436   0010D6  223D               	addwfc	(___aldiv@divisor+1)^0,f,c
  4437   0010D8  223E               	addwfc	(___aldiv@divisor+2)^0,f,c
  4438   0010DA  223F               	addwfc	(___aldiv@divisor+3)^0,f,c
  4439   0010DC  0E01               	movlw	1
  4440   0010DE  6E41               	movwf	___aldiv@sign^0,c
  4441   0010E0                     i2l2007:
  4442   0010E0  FFFF               	dw	65535	; assembler added errata NOP
  4443   0010E2  BE3B               	btfsc	(___aldiv@dividend+3)^0,7,c
  4444   0010E4  EF79  F008         	goto	i2u52_40
  4445   0010E8  EF76  F008         	goto	i2u52_41
  4446   0010EC                     i2u52_41:
  4447   0010EC  FFFF               	dw	65535	; assembler added errata NOP
  4448   0010EE  EF84  F008         	goto	i2l2013
  4449   0010F2                     i2u52_40:
  4450   0010F2  FFFF               	dw	65535	; assembler added errata NOP
  4451   0010F4  1E3B               	comf	(___aldiv@dividend+3)^0,f,c
  4452   0010F6  1E3A               	comf	(___aldiv@dividend+2)^0,f,c
  4453   0010F8  1E39               	comf	(___aldiv@dividend+1)^0,f,c
  4454   0010FA  6C38               	negf	___aldiv@dividend^0,c
  4455   0010FC  0E00               	movlw	0
  4456   0010FE  2239               	addwfc	(___aldiv@dividend+1)^0,f,c
  4457   001100  223A               	addwfc	(___aldiv@dividend+2)^0,f,c
  4458   001102  223B               	addwfc	(___aldiv@dividend+3)^0,f,c
  4459   001104  0E01               	movlw	1
  4460   001106  1A41               	xorwf	___aldiv@sign^0,f,c
  4461   001108                     i2l2013:
  4462   001108  FFFF               	dw	65535	; assembler added errata NOP
  4463   00110A  0E00               	movlw	0
  4464   00110C  6E42               	movwf	___aldiv@quotient^0,c
  4465   00110E  0E00               	movlw	0
  4466   001110  6E43               	movwf	(___aldiv@quotient+1)^0,c
  4467   001112  0E00               	movlw	0
  4468   001114  6E44               	movwf	(___aldiv@quotient+2)^0,c
  4469   001116  0E00               	movlw	0
  4470   001118  6E45               	movwf	(___aldiv@quotient+3)^0,c
  4471   00111A  503C               	movf	___aldiv@divisor^0,w,c
  4472   00111C  103D               	iorwf	(___aldiv@divisor+1)^0,w,c
  4473   00111E  103E               	iorwf	(___aldiv@divisor+2)^0,w,c
  4474   001120  103F               	iorwf	(___aldiv@divisor+3)^0,w,c
  4475   001122  B4D8               	btfsc	status,2,c
  4476   001124  EF96  F008         	goto	i2u53_41
  4477   001128  EF99  F008         	goto	i2u53_40
  4478   00112C                     i2u53_41:
  4479   00112C  FFFF               	dw	65535	; assembler added errata NOP
  4480   00112E  EFD8  F008         	goto	i2l2035
  4481   001132                     i2u53_40:
  4482   001132  FFFF               	dw	65535	; assembler added errata NOP
  4483   001134  0E01               	movlw	1
  4484   001136  6E40               	movwf	___aldiv@counter^0,c
  4485   001138  EFA5  F008         	goto	i2l2021
  4486   00113C                     i2l2019:
  4487   00113C  FFFF               	dw	65535	; assembler added errata NOP
  4488   00113E  90D8               	bcf	status,0,c
  4489   001140  363C               	rlcf	___aldiv@divisor^0,f,c
  4490   001142  363D               	rlcf	(___aldiv@divisor+1)^0,f,c
  4491   001144  363E               	rlcf	(___aldiv@divisor+2)^0,f,c
  4492   001146  363F               	rlcf	(___aldiv@divisor+3)^0,f,c
  4493   001148  2A40               	incf	___aldiv@counter^0,f,c
  4494   00114A                     i2l2021:
  4495   00114A  FFFF               	dw	65535	; assembler added errata NOP
  4496   00114C  AE3F               	btfss	(___aldiv@divisor+3)^0,7,c
  4497   00114E  EFAB  F008         	goto	i2u54_41
  4498   001152  EFAE  F008         	goto	i2u54_40
  4499   001156                     i2u54_41:
  4500   001156  FFFF               	dw	65535	; assembler added errata NOP
  4501   001158  EF9E  F008         	goto	i2l2019
  4502   00115C                     i2u54_40:
  4503   00115C  FFFF               	dw	65535	; assembler added errata NOP
  4504   00115E                     i2l2023:
  4505   00115E  FFFF               	dw	65535	; assembler added errata NOP
  4506   001160  90D8               	bcf	status,0,c
  4507   001162  3642               	rlcf	___aldiv@quotient^0,f,c
  4508   001164  3643               	rlcf	(___aldiv@quotient+1)^0,f,c
  4509   001166  3644               	rlcf	(___aldiv@quotient+2)^0,f,c
  4510   001168  3645               	rlcf	(___aldiv@quotient+3)^0,f,c
  4511   00116A  503C               	movf	___aldiv@divisor^0,w,c
  4512   00116C  5C38               	subwf	___aldiv@dividend^0,w,c
  4513   00116E  503D               	movf	(___aldiv@divisor+1)^0,w,c
  4514   001170  5839               	subwfb	(___aldiv@dividend+1)^0,w,c
  4515   001172  503E               	movf	(___aldiv@divisor+2)^0,w,c
  4516   001174  583A               	subwfb	(___aldiv@dividend+2)^0,w,c
  4517   001176  503F               	movf	(___aldiv@divisor+3)^0,w,c
  4518   001178  583B               	subwfb	(___aldiv@dividend+3)^0,w,c
  4519   00117A  A0D8               	btfss	status,0,c
  4520   00117C  EFC2  F008         	goto	i2u55_41
  4521   001180  EFC5  F008         	goto	i2u55_40
  4522   001184                     i2u55_41:
  4523   001184  FFFF               	dw	65535	; assembler added errata NOP
  4524   001186  EFCF  F008         	goto	i2l2031
  4525   00118A                     i2u55_40:
  4526   00118A  FFFF               	dw	65535	; assembler added errata NOP
  4527   00118C  503C               	movf	___aldiv@divisor^0,w,c
  4528   00118E  5E38               	subwf	___aldiv@dividend^0,f,c
  4529   001190  503D               	movf	(___aldiv@divisor+1)^0,w,c
  4530   001192  5A39               	subwfb	(___aldiv@dividend+1)^0,f,c
  4531   001194  503E               	movf	(___aldiv@divisor+2)^0,w,c
  4532   001196  5A3A               	subwfb	(___aldiv@dividend+2)^0,f,c
  4533   001198  503F               	movf	(___aldiv@divisor+3)^0,w,c
  4534   00119A  5A3B               	subwfb	(___aldiv@dividend+3)^0,f,c
  4535   00119C  8042               	bsf	___aldiv@quotient^0,0,c
  4536   00119E                     i2l2031:
  4537   00119E  FFFF               	dw	65535	; assembler added errata NOP
  4538   0011A0  90D8               	bcf	status,0,c
  4539   0011A2  323F               	rrcf	(___aldiv@divisor+3)^0,f,c
  4540   0011A4  323E               	rrcf	(___aldiv@divisor+2)^0,f,c
  4541   0011A6  323D               	rrcf	(___aldiv@divisor+1)^0,f,c
  4542   0011A8  323C               	rrcf	___aldiv@divisor^0,f,c
  4543   0011AA  2E40               	decfsz	___aldiv@counter^0,f,c
  4544   0011AC  EFAF  F008         	goto	i2l2023
  4545   0011B0                     i2l2035:
  4546   0011B0  FFFF               	dw	65535	; assembler added errata NOP
  4547   0011B2  5041               	movf	___aldiv@sign^0,w,c
  4548   0011B4  B4D8               	btfsc	status,2,c
  4549   0011B6  EFDF  F008         	goto	i2u56_41
  4550   0011BA  EFE2  F008         	goto	i2u56_40
  4551   0011BE                     i2u56_41:
  4552   0011BE  FFFF               	dw	65535	; assembler added errata NOP
  4553   0011C0  EFEB  F008         	goto	i2l2039
  4554   0011C4                     i2u56_40:
  4555   0011C4  FFFF               	dw	65535	; assembler added errata NOP
  4556   0011C6  1E45               	comf	(___aldiv@quotient+3)^0,f,c
  4557   0011C8  1E44               	comf	(___aldiv@quotient+2)^0,f,c
  4558   0011CA  1E43               	comf	(___aldiv@quotient+1)^0,f,c
  4559   0011CC  6C42               	negf	___aldiv@quotient^0,c
  4560   0011CE  0E00               	movlw	0
  4561   0011D0  2243               	addwfc	(___aldiv@quotient+1)^0,f,c
  4562   0011D2  2244               	addwfc	(___aldiv@quotient+2)^0,f,c
  4563   0011D4  2245               	addwfc	(___aldiv@quotient+3)^0,f,c
  4564   0011D6                     i2l2039:
  4565   0011D6  FFFF               	dw	65535	; assembler added errata NOP
  4566   0011D8  C042  F038         	movff	___aldiv@quotient,?___aldiv
  4567   0011DC  C043  F039         	movff	___aldiv@quotient+1,?___aldiv+1
  4568   0011E0  C044  F03A         	movff	___aldiv@quotient+2,?___aldiv+2
  4569   0011E4  C045  F03B         	movff	___aldiv@quotient+3,?___aldiv+3
  4570   0011E8  0012               	return		;funcret
  4571   0011EA  FFFF               	dw	65535	; errata NOP
  4572   0011EC                     __end_of___aldiv:
  4573                           	callstack 0
  4574                           
  4575 ;; *************** function _ReadRegister_4bytesCS5532 *****************
  4576 ;; Defined at:
  4577 ;;		line 79 in file "LIB258_SPI.c"
  4578 ;; Parameters:    Size  Location     Type
  4579 ;;  command         1    wreg     unsigned char 
  4580 ;; Auto vars:     Size  Location     Type
  4581 ;;  command         1    1[COMRAM] unsigned char 
  4582 ;; Return value:  Size  Location     Type
  4583 ;;                  1    wreg      void 
  4584 ;; Registers used:
  4585 ;;		wreg, status,2, cstack
  4586 ;; Tracked objects:
  4587 ;;		On entry : 0/0
  4588 ;;		On exit  : 0/0
  4589 ;;		Unchanged: 0/0
  4590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4591 ;;      Params:         0       0       0       0       0       0       0
  4592 ;;      Locals:         1       0       0       0       0       0       0
  4593 ;;      Temps:          0       0       0       0       0       0       0
  4594 ;;      Totals:         1       0       0       0       0       0       0
  4595 ;;Total ram usage:        1 bytes
  4596 ;; Hardware stack levels used: 1
  4597 ;; Hardware stack levels required when called: 1
  4598 ;; This function calls:
  4599 ;;		_TransferByte_SPI
  4600 ;; This function is called by:
  4601 ;;		_ResetCS5532
  4602 ;;		_InitCS5532
  4603 ;;		_ReadAD24
  4604 ;;		_Interrups
  4605 ;; This function uses a non-reentrant model
  4606 ;;
  4607                           
  4608                           	psect	text21
  4609   0015E0                     __ptext21:
  4610                           	callstack 0
  4611   0015E0                     _ReadRegister_4bytesCS5532:
  4612                           	callstack 0
  4613   0015E0  FFFF               	dw	65535	; assembler added errata NOP
  4614                           
  4615                           ;incstack = 0
  4616                           ;ReadRegister_4bytesCS5532@command stored from wreg
  4617   0015E2  6E39               	movwf	ReadRegister_4bytesCS5532@command^0,c
  4618   0015E4                     
  4619                           ;LIB258_SPI.c: 81:     TransferByte_SPI(command);
  4620   0015E4  5039               	movf	ReadRegister_4bytesCS5532@command^0,w,c
  4621   0015E6  EC67  F00B         	call	_TransferByte_SPI
  4622                           
  4623                           ;LIB258_SPI.c: 82:     BufferSPI[0] = TransferByte_SPI(0x00);
  4624   0015EA  0E00               	movlw	0
  4625   0015EC  EC67  F00B         	call	_TransferByte_SPI
  4626   0015F0  6E31               	movwf	_BufferSPI^0,c
  4627                           
  4628                           ;LIB258_SPI.c: 83:     BufferSPI[1] = TransferByte_SPI(0x00);
  4629   0015F2  0E00               	movlw	0
  4630   0015F4  EC67  F00B         	call	_TransferByte_SPI
  4631   0015F8  6E32               	movwf	(_BufferSPI+1)^0,c
  4632                           
  4633                           ;LIB258_SPI.c: 84:     BufferSPI[2] = TransferByte_SPI(0x00);
  4634   0015FA  0E00               	movlw	0
  4635   0015FC  EC67  F00B         	call	_TransferByte_SPI
  4636   001600  6E33               	movwf	(_BufferSPI+2)^0,c
  4637                           
  4638                           ;LIB258_SPI.c: 85:     BufferSPI[3] = TransferByte_SPI(0x00);
  4639   001602  0E00               	movlw	0
  4640   001604  EC67  F00B         	call	_TransferByte_SPI
  4641   001608  6E34               	movwf	(_BufferSPI+3)^0,c
  4642   00160A  0012               	return		;funcret
  4643   00160C  FFFF               	dw	65535	; errata NOP
  4644   00160E                     __end_of_ReadRegister_4bytesCS5532:
  4645                           	callstack 0
  4646                           
  4647 ;; *************** function _TransferByte_SPI *****************
  4648 ;; Defined at:
  4649 ;;		line 33 in file "LIB258_SPI.c"
  4650 ;; Parameters:    Size  Location     Type
  4651 ;;  data            1    wreg     unsigned char 
  4652 ;; Auto vars:     Size  Location     Type
  4653 ;;  data            1    0[COMRAM] unsigned char 
  4654 ;;  valor           1    0        unsigned char 
  4655 ;; Return value:  Size  Location     Type
  4656 ;;                  1    wreg      unsigned char 
  4657 ;; Registers used:
  4658 ;;		wreg, status,2
  4659 ;; Tracked objects:
  4660 ;;		On entry : 0/0
  4661 ;;		On exit  : 0/0
  4662 ;;		Unchanged: 0/0
  4663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4664 ;;      Params:         0       0       0       0       0       0       0
  4665 ;;      Locals:         1       0       0       0       0       0       0
  4666 ;;      Temps:          0       0       0       0       0       0       0
  4667 ;;      Totals:         1       0       0       0       0       0       0
  4668 ;;Total ram usage:        1 bytes
  4669 ;; Hardware stack levels used: 1
  4670 ;; This function calls:
  4671 ;;		Nothing
  4672 ;; This function is called by:
  4673 ;;		_ResetCS5532
  4674 ;;		_ReadRegister_4bytesCS5532
  4675 ;;		_WriteRegister_4bytesCS5532
  4676 ;;		_Interrups
  4677 ;; This function uses a non-reentrant model
  4678 ;;
  4679                           
  4680                           	psect	text22
  4681   0016CE                     __ptext22:
  4682                           	callstack 0
  4683   0016CE                     _TransferByte_SPI:
  4684                           	callstack 0
  4685   0016CE  FFFF               	dw	65535	; assembler added errata NOP
  4686                           
  4687                           ;incstack = 0
  4688                           ;TransferByte_SPI@data stored from wreg
  4689   0016D0  6E38               	movwf	TransferByte_SPI@data^0,c
  4690   0016D2  50C9               	movf	201,w,c	;volatile
  4691   0016D4                     
  4692                           ;LIB258_SPI.c: 37:     SSPBUF = data;
  4693   0016D4  C038  FFC9         	movff	TransferByte_SPI@data,4041	;volatile
  4694   0016D8                     i2l78:
  4695   0016D8  FFFF               	dw	65535	; assembler added errata NOP
  4696   0016DA  A0C7               	btfss	199,0,c	;volatile
  4697   0016DC  EF72  F00B         	goto	i2u49_41
  4698   0016E0  EF75  F00B         	goto	i2u49_40
  4699   0016E4                     i2u49_41:
  4700   0016E4  FFFF               	dw	65535	; assembler added errata NOP
  4701   0016E6  EF6C  F00B         	goto	i2l78
  4702   0016EA                     i2u49_40:
  4703   0016EA  FFFF               	dw	65535	; assembler added errata NOP
  4704   0016EC                     
  4705                           ;LIB258_SPI.c: 39:     return SSPBUF;
  4706   0016EC  50C9               	movf	201,w,c	;volatile
  4707   0016EE  0012               	return		;funcret
  4708   0016F0  FFFF               	dw	65535	; errata NOP
  4709   0016F2                     __end_of_TransferByte_SPI:
  4710                           	callstack 0
  4711                           
  4712                           	psect	rparam
  4713   000000                     
  4714                           	psect	temp
  4715   00005D                     btemp:
  4716                           	callstack 0
  4717   00005D                     	ds	1
  4718   000000                     int$flags	set	btemp
  4719   000000                     wtemp8	set	btemp+1
  4720   000000                     ttemp5	set	btemp+1
  4721   000000                     ttemp6	set	btemp+4
  4722   000000                     ttemp7	set	btemp+8
  4723                           
  4724                           	psect	idloc
  4725                           
  4726                           ;Config register IDLOC0 @ 0x200000
  4727                           ;	unspecified, using default values
  4728   200000                     	org	2097152
  4729   200000  FF                 	db	255
  4730                           
  4731                           ;Config register IDLOC1 @ 0x200001
  4732                           ;	unspecified, using default values
  4733   200001                     	org	2097153
  4734   200001  FF                 	db	255
  4735                           
  4736                           ;Config register IDLOC2 @ 0x200002
  4737                           ;	unspecified, using default values
  4738   200002                     	org	2097154
  4739   200002  FF                 	db	255
  4740                           
  4741                           ;Config register IDLOC3 @ 0x200003
  4742                           ;	unspecified, using default values
  4743   200003                     	org	2097155
  4744   200003  FF                 	db	255
  4745                           
  4746                           ;Config register IDLOC4 @ 0x200004
  4747                           ;	unspecified, using default values
  4748   200004                     	org	2097156
  4749   200004  FF                 	db	255
  4750                           
  4751                           ;Config register IDLOC5 @ 0x200005
  4752                           ;	unspecified, using default values
  4753   200005                     	org	2097157
  4754   200005  FF                 	db	255
  4755                           
  4756                           ;Config register IDLOC6 @ 0x200006
  4757                           ;	unspecified, using default values
  4758   200006                     	org	2097158
  4759   200006  FF                 	db	255
  4760                           
  4761                           ;Config register IDLOC7 @ 0x200007
  4762                           ;	unspecified, using default values
  4763   200007                     	org	2097159
  4764   200007  FF                 	db	255
  4765                           
  4766                           	psect	config
  4767                           
  4768                           ; Padding undefined space
  4769   300000                     	org	3145728
  4770   300000  FF                 	db	255
  4771                           
  4772                           ;Config register CONFIG1H @ 0x300001
  4773                           ;	Oscillator Selection bits
  4774                           ;	OSC = HSPLL, HS oscillator with PLL enabled/Clock frequency = (4 x FOSC)
  4775                           ;	Oscillator System Clock Switch Enable bit
  4776                           ;	OSCS = OFF, Oscillator system clock switch option is disabled (main oscillator is sour
      +                          ce)
  4777   300001                     	org	3145729
  4778   300001  26                 	db	38
  4779                           
  4780                           ;Config register CONFIG2L @ 0x300002
  4781                           ;	Power-up Timer Enable bit
  4782                           ;	PWRT = ON, PWRT enabled
  4783                           ;	Brown-out Reset Enable bit
  4784                           ;	BOR = ON, Brown-out Reset enabled
  4785                           ;	Brown-out Reset Voltage bits
  4786                           ;	BORV = 25, VBOR set to 2.5V
  4787   300002                     	org	3145730
  4788   300002  0E                 	db	14
  4789                           
  4790                           ;Config register CONFIG2H @ 0x300003
  4791                           ;	Watchdog Timer Enable bit
  4792                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  4793                           ;	Watchdog Timer Postscale Select bits
  4794                           ;	WDTPS = 128, 1:128
  4795   300003                     	org	3145731
  4796   300003  0E                 	db	14
  4797                           
  4798                           ;Config register CONFIG4L @ 0x300006
  4799                           ;	Stack Full/Underflow Reset Enable bit
  4800                           ;	STVR = OFF, Stack Full/Underflow will not cause Reset
  4801                           ;	Low-Voltage ICSP Enable bit
  4802                           ;	LVP = OFF, Low-Voltage ICSP disabled
  4803                           ;	Background Debugger Enable bit
  4804                           ;	DEBUG = 0x1, unprogrammed default
  4805   300006                     	org	3145734
  4806   300006  80                 	db	128
  4807                           
  4808                           ; Padding undefined space
  4809   300007                     	org	3145735
  4810   300007  FF                 	db	255
  4811                           
  4812                           ;Config register CONFIG5L @ 0x300008
  4813                           ;	Code Protection bit
  4814                           ;	CP0 = OFF, Block 0 (000200-001FFFh) not code protected
  4815                           ;	Code Protection bit
  4816                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code protected
  4817                           ;	Code Protection bit
  4818                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code protected
  4819                           ;	Code Protection bit
  4820                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code protected
  4821   300008                     	org	3145736
  4822   300008  0F                 	db	15
  4823                           
  4824                           ;Config register CONFIG5H @ 0x300009
  4825                           ;	Boot Block Code Protection bit
  4826                           ;	CPB = OFF, Boot Block (000000-0001FFh) not code protected
  4827                           ;	Data EEPROM Code Protection bit
  4828                           ;	CPD = OFF, Data EEPROM not code protected
  4829   300009                     	org	3145737
  4830   300009  C0                 	db	192
  4831                           
  4832                           ;Config register CONFIG6L @ 0x30000A
  4833                           ;	Write Protection bit
  4834                           ;	WRT0 = OFF, Block 0 (000200-001FFFh) not write protected
  4835                           ;	Write Protection bit
  4836                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write protected
  4837                           ;	Write Protection bit
  4838                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write protected
  4839                           ;	Write Protection bit
  4840                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write protected
  4841   30000A                     	org	3145738
  4842   30000A  0F                 	db	15
  4843                           
  4844                           ;Config register CONFIG6H @ 0x30000B
  4845                           ;	Configuration Register Write Protection bit
  4846                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write protected
  4847                           ;	Boot Block Write Protection bit
  4848                           ;	WRTB = OFF, Boot Block (000000-0001FFh) not write protected
  4849                           ;	Data EEPROM Write Protection bit
  4850                           ;	WRTD = OFF, Data EEPROM not write protected
  4851   30000B                     	org	3145739
  4852   30000B  E0                 	db	224
  4853                           
  4854                           ;Config register CONFIG7L @ 0x30000C
  4855                           ;	Table Read Protection bit
  4856                           ;	EBTR0 = OFF, Block 0 (000200-001FFFh) not protected from Table Reads executed in other
      +                           blocks
  4857                           ;	Table Read Protection bit
  4858                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from Table Reads executed in other
      +                           blocks
  4859                           ;	Table Read Protection bit
  4860                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from Table Reads executed in other
      +                           blocks
  4861                           ;	Table Read Protection bit
  4862                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from Table Reads executed in other
      +                           blocks
  4863   30000C                     	org	3145740
  4864   30000C  0F                 	db	15
  4865                           
  4866                           ;Config register CONFIG7H @ 0x30000D
  4867                           ;	Boot Block Table Read Protection bit
  4868                           ;	EBTRB = OFF, Boot Block (000000-0001FFh) not protected from Table Reads executed in ot
      +                          her blocks
  4869   30000D                     	org	3145741
  4870   30000D  40                 	db	64
  4871                           tosu	equ	0xFFF
  4872                           tosh	equ	0xFFE
  4873                           tosl	equ	0xFFD
  4874                           stkptr	equ	0xFFC
  4875                           pclatu	equ	0xFFB
  4876                           pclath	equ	0xFFA
  4877                           pcl	equ	0xFF9
  4878                           tblptru	equ	0xFF8
  4879                           tblptrh	equ	0xFF7
  4880                           tblptrl	equ	0xFF6
  4881                           tablat	equ	0xFF5
  4882                           prodh	equ	0xFF4
  4883                           prodl	equ	0xFF3
  4884                           indf0	equ	0xFEF
  4885                           postinc0	equ	0xFEE
  4886                           postdec0	equ	0xFED
  4887                           preinc0	equ	0xFEC
  4888                           plusw0	equ	0xFEB
  4889                           fsr0h	equ	0xFEA
  4890                           fsr0l	equ	0xFE9
  4891                           wreg	equ	0xFE8
  4892                           indf1	equ	0xFE7
  4893                           postinc1	equ	0xFE6
  4894                           postdec1	equ	0xFE5
  4895                           preinc1	equ	0xFE4
  4896                           plusw1	equ	0xFE3
  4897                           fsr1h	equ	0xFE2
  4898                           fsr1l	equ	0xFE1
  4899                           bsr	equ	0xFE0
  4900                           indf2	equ	0xFDF
  4901                           postinc2	equ	0xFDE
  4902                           postdec2	equ	0xFDD
  4903                           preinc2	equ	0xFDC
  4904                           plusw2	equ	0xFDB
  4905                           fsr2h	equ	0xFDA
  4906                           fsr2l	equ	0xFD9
  4907                           status	equ	0xFD8

Data Sizes:
    Strings     53
    Constant    0
    Data        0
    BSS         96
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     37      92
    BANK0           160      2      43
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    print_string@str	PTR unsigned char  size(2) Largest target is 24
		 -> STR_9(CODE[3]), STR_8(CODE[7]), STR_7(CODE[3]), STR_6(CODE[7]), 
		 -> STR_5(CODE[24]), STR_4(CODE[3]), STR_3(CODE[11]), STR_2(CODE[3]), 
		 -> STR_1(CODE[11]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _Interrups in COMRAM

    _Interrups->_ReadAD24
    _print_value->_WriteByte_USART
    _TransmitDAT_USART->_print_string
    _TransmitCMD_USART->_print_string
    _print_string->_WriteByte_USART
    _ResetCS5532->_ReadRegister_4bytesCS5532
    _ResetCS5532->_WriteRegister_4bytesCS5532
    _ReceiveCMD_USART->_ReadByte_USART
    _InitCS5532->_ReadRegister_4bytesCS5532
    _InitCS5532->_WriteRegister_4bytesCS5532
    _WriteRegister_4bytesCS5532->_TransferByte_SPI
    _CleanHolding->_ReadAD24
    _ReadAD24->___aldiv
    _ReadRegister_4bytesCS5532->_TransferByte_SPI

Critical Paths under _main in BANK0

    None.

Critical Paths under _Interrups in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Interrups in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Interrups in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Interrups in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Interrups in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Interrups in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0       0
                                              0 BANK0      2     2      0
                      _ClosePort_SPI
                    _CloseSerialPort
                     _ConfigPort_SPI
                   _ConfigSerialPort
                       _OpenPort_SPI
                     _OpenSerialPort
 ---------------------------------------------------------------------------------
 (1) _OpenSerialPort                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _OpenPort_SPI                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigSerialPort                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigPort_SPI                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CloseSerialPort                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ClosePort_SPI                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _Interrups                                           10    10      0   20273
                                             27 COMRAM    10    10      0
                       _CleanHolding
                         _InitCS5532
                           _ReadAD24
          _ReadRegister_4bytesCS5532
                   _ReceiveCMD_USART
                        _ResetCS5532
                   _TransferByte_SPI
                  _TransmitCMD_USART
                  _TransmitDAT_USART
                    _WriteByte_USART
                            ___aldiv
                       _print_string
                        _print_value
 ---------------------------------------------------------------------------------
 (3) _print_value                                          7     3      4    1497
                                              1 COMRAM     7     3      4
                    _WriteByte_USART
 ---------------------------------------------------------------------------------
 (3) _TransmitDAT_USART                                    2     2      0     863
                                              3 COMRAM     2     2      0
                    _WriteByte_USART
                       _print_string
 ---------------------------------------------------------------------------------
 (3) _TransmitCMD_USART                                    1     1      0     795
                                              3 COMRAM     1     1      0
                    _WriteByte_USART
                       _print_string
 ---------------------------------------------------------------------------------
 (3) _print_string                                         2     0      2     751
                                              1 COMRAM     2     0      2
                    _WriteByte_USART
 ---------------------------------------------------------------------------------
 (4) _WriteByte_USART                                      1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _ResetCS5532                                          2     2      0     159
                                              2 COMRAM     2     2      0
          _ReadRegister_4bytesCS5532
                   _TransferByte_SPI
         _WriteRegister_4bytesCS5532
 ---------------------------------------------------------------------------------
 (3) _ReceiveCMD_USART                                     2     2      0     235
                                              3 COMRAM     2     2      0
                     _ReadByte_USART
 ---------------------------------------------------------------------------------
 (4) _ReadByte_USART                                       3     3      0      71
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _InitCS5532                                           0     0      0      90
          _ReadRegister_4bytesCS5532
         _WriteRegister_4bytesCS5532
 ---------------------------------------------------------------------------------
 (4) _WriteRegister_4bytesCS5532                           1     1      0      45
                                              1 COMRAM     1     1      0
                   _TransferByte_SPI
 ---------------------------------------------------------------------------------
 (3) _CleanHolding                                         0     0      0    5976
                           _ReadAD24
 ---------------------------------------------------------------------------------
 (3) _ReadAD24                                            13     9      4    5976
                                             14 COMRAM    13     9      4
          _ReadRegister_4bytesCS5532
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             14     6      8    3036
                                              0 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (4) _ReadRegister_4bytesCS5532                            1     1      0      45
                                              1 COMRAM     1     1      0
                   _TransferByte_SPI
 ---------------------------------------------------------------------------------
 (3) _TransferByte_SPI                                     2     2      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ClosePort_SPI
   _CloseSerialPort
   _ConfigPort_SPI
   _ConfigSerialPort
   _OpenPort_SPI
   _OpenSerialPort

 _Interrups (ROOT)
   _CleanHolding
     _ReadAD24
       _ReadRegister_4bytesCS5532
         _TransferByte_SPI
       ___aldiv
   _InitCS5532
     _ReadRegister_4bytesCS5532
     _WriteRegister_4bytesCS5532
       _TransferByte_SPI
   _ReadAD24
   _ReadRegister_4bytesCS5532
   _ReceiveCMD_USART
     _ReadByte_USART
   _ResetCS5532
     _ReadRegister_4bytesCS5532
     _TransferByte_SPI
     _WriteRegister_4bytesCS5532
   _TransferByte_SPI
   _TransmitCMD_USART
     _WriteByte_USART
     _print_string
       _WriteByte_USART
   _TransmitDAT_USART
     _WriteByte_USART
     _print_string
   _WriteByte_USART
   ___aldiv
   _print_string
   _print_value
     _WriteByte_USART

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      29        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      2      2B       5       26.9%
BITBIGSFRll         81      0       0      27        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     25      5C       1       97.9%
BITBIGSFRhhhhl      19      0       0      17        0.0%
BITBIGSFRhlhhl      11      0       0      22        0.0%
BITBIGSFRhhhhh       D      0       0      16        0.0%
BITBIGSFRhllh        C      0       0      23        0.0%
BITBIGSFRhlll        8      0       0      24        0.0%
BITBIGSFRlhhl        6      0       0      25        0.0%
BITBIGSFRlhl         6      0       0      26        0.0%
BITBIGSFRhhhlh       4      0       0      18        0.0%
BITBIGSFRhlhhh       4      0       0      21        0.0%
BITBIGSFRhhhll       3      0       0      19        0.0%
BITBIGSFRhhl         1      0       0      20        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      87      28        0.0%
DATA                 0      0      87       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Fri Jul 21 16:12:24 2023

                                                    ?_OpenSerialPort 0038  
                                                        _SSPSTATbits 0FC7  
                                                                 l72 1776  
                                                                 l75 1786  
                                                                 l69 1766  
                                                                l192 177E  
                                                                l186 172E  
                                                                l434 153C  
                                                                l435 153E  
                                                                l189 176E  
                                                                _PR2 0FCB  
                                                                u967 151E  
                                            TransmitDAT_USART@DAT_ID 003B  
                                                                wreg 0FE8  
                                             TransmitDAT_USART@conta 003C  
                                                               l2821 1752  
                                                               l2823 175E  
                                                               l2831 1716  
                                                               l2833 171A  
                                                               l2841 176C  
                                                               l2843 177A  
                                                               l2835 1726  
                                                               l2827 1774  
                                                               l2851 1502  
                                                               l2829 1782  
                                                               l2837 172C  
                                                               l2861 1530  
                                                               l2853 150A  
                                                               l2845 14DC  
                                                               l2863 1534  
                                                               l2855 150E  
                                                               l2847 14EA  
                                                               l2865 1536  
                                                               l2857 1512  
                                                               l2849 14FC  
                                                               l2867 1538  
                                                               l2859 152E  
                                                               l2869 153A  
                                                               STR_1 1095  
                                                               STR_2 1092  
                                                               STR_3 10A0  
                                                               STR_4 1092  
                                                               STR_5 107D  
                                                               STR_6 10AB  
                                                               STR_7 1092  
                                                               STR_8 10AB  
                                                               STR_9 1092  
                                                               _LATA 0F89  
                                                               _LATB 0F8A  
                                                               _LATC 0F8B  
                                                               i2l80 16EC  
                                                               i2l81 16EE  
                                                               i2l92 160A  
                                                               i2l78 16D8  
                                                               i2l86 14D8  
                                                               i2l95 16A6  
                                                               i2l89 1634  
                                                               i2l98 11F0  
                                                               _TMR2 0FCC  
                                                               _main 14DC  
                                                               fsr2h 0FDA  
                                                               indf2 0FDF  
                                                               fsr2l 0FD9  
                                            __end_of_CloseSerialPort 1782  
                                                               btemp 005D  
                                                               start 1078  
                                                       ___param_bank 0000  
                                          _ReadRegister_4bytesCS5532 15E0  
                                                    __end_of___aldiv 11EC  
                                                              ?_main 0038  
                                                              _T0CON 0FD5  
                                                              _T2CON 0FCA  
                                                              i2l102 12FE  
                                                              i2l105 174C  
                                                              i2l201 1414  
                                                              i2l205 145A  
                                                              i2l206 1464  
                                                              i2l230 13D2  
                                                              i2l215 16FC  
                                                              i2l224 15DC  
                                                              i2l234 13D8  
                                                              i2l218 1710  
                                                              i2l242 1596  
                                                              i2l237 1680  
                                                              i2l245 16CA  
                                                              i2l195 1444  
                                                              i2l197 13F0  
                                                              i2l429 1058  
                                                              i2l390 021A  
                                                              i2l519 11E8  
                                                              i2l376 095A  
                                                              _RCREG 0FAE  
                                                              _RCSTA 0FAB  
                                                              _TMR0H 0FD7  
                                                              _TMR0L 0FD6  
                                                              _SPBRG 0FAF  
                                                              _PORTB 0F81  
                                                              _TRISA 0F92  
                                                              _TRISB 0F93  
                                                              _TRISC 0F94  
                                                              _TXREG 0FAD  
                                                              _TXSTA 0FAC  
                                                         _InitCS5532 160E  
                                                              tablat 0FF5  
                                                              ttemp5 005E  
                                                              ttemp6 0061  
                                                              ttemp7 0065  
                                                              status 0FD8  
                                                              wtemp8 005E  
                                                    __initialization 1638  
                                                   __end_of_ReadAD24 1302  
                                                       __end_of_main 1546  
                                                      ??_ResetCS5532 003A  
                                                             ??_main 0089  
                                                      __activetblptr 0002  
                                                     _ReadByte_USART 13DE  
                                                             i2l2001 10BA  
                                                             i2l2011 1104  
                                                             i2l2003 10CC  
                                                             i2l2021 114A  
                                                             i2l2013 1108  
                                                             i2l2005 10DC  
                                                             i2l2101 1478  
                                                             i2l2031 119E  
                                                             i2l2023 115E  
                                                             i2l2015 111A  
                                                             i2l2007 10E0  
                                                             i2l2111 14AE  
                                                             i2l2103 148C  
                                                             i2l2033 11AA  
                                                             i2l2025 116A  
                                                             i2l2017 1134  
                                                             i2l2009 10F4  
                                                             i2l2121 14D6  
                                                             i2l2113 14B4  
                                                             i2l2105 1492  
                                                             i2l2201 1556  
                                                             i2l2027 118C  
                                                             i2l2019 113C  
                                                             i2l2035 11B0  
                                                             i2l2051 120A  
                                                             i2l2043 1688  
                                                             i2l2131 161E  
                                                             i2l2115 14BE  
                                                             i2l2107 14A6  
                                                             i2l2211 1574  
                                                             i2l2203 155C  
                                                             i2l2037 11C6  
                                                             i2l2029 119C  
                                                             i2l2053 121A  
                                                             i2l2133 1622  
                                                             i2l2125 1610  
                                                             i2l2117 14C6  
                                                             i2l2109 14AC  
                                                             i2l2213 1576  
                                                             i2l2221 16B8  
                                                             i2l2039 11D6  
                                                             i2l2055 122E  
                                                             i2l2047 11F0  
                                                             i2l2143 1734  
                                                             i2l2135 1626  
                                                             i2l2127 1616  
                                                             i2l2071 1418  
                                                             i2l2063 13E0  
                                                             i2l2151 1304  
                                                             i2l2119 14D0  
                                                             i2l2215 158A  
                                                             i2l2311 01A0  
                                                             i2l2231 0052  
                                                             i2l2057 12B8  
                                                             i2l2049 1204  
                                                             i2l2145 1738  
                                                             i2l2137 162A  
                                                             i2l2129 1618  
                                                             i2l2073 141A  
                                                             i2l2065 13E4  
                                                             i2l2209 1560  
                                                             i2l2401 0394  
                                                             i2l2321 020E  
                                                             i2l2313 01A2  
                                                             i2l2305 0164  
                                                             i2l2241 0074  
                                                             i2l2233 005A  
                                                             i2l2225 0024  
                                                             i2l2059 12EC  
                                                             i2l2147 1742  
                                                             i2l2139 162E  
                                                             i2l2075 142C  
                                                             i2l2067 13EA  
                                                             i2l2171 135C  
                                                             i2l2163 132A  
                                                             i2l2091 146A  
                                                             i2l2083 159C  
                                                             i2l2219 16AC  
                                                             i2l2411 03E2  
                                                             i2l2403 03B0  
                                                             i2l2331 023A  
                                                             i2l2323 0220  
                                                             i2l2315 01B6  
                                                             i2l2307 016C  
                                                             i2l2251 009E  
                                                             i2l2243 0078  
                                                             i2l2235 0062  
                                                             i2l2227 0036  
                                                             i2l2077 143E  
                                                             i2l2069 1404  
                                                             i2l2181 13AA  
                                                             i2l2173 1372  
                                                             i2l2165 132E  
                                                             i2l2157 1308  
                                                             i2l2085 15A0  
                                                             i2l2501 05DE  
                                                             i2l2413 03E6  
                                                             i2l2405 03C8  
                                                             i2l2341 025A  
                                                             i2l2333 0240  
                                                             i2l2325 022C  
                                                             i2l2317 01EA  
                                                             i2l2309 0186  
                                                             i2l2261 00CA  
                                                             i2l2253 00A6  
                                                             i2l2245 007C  
                                                             i2l2237 006A  
                                                             i2l2229 0048  
                                                             i2l2079 1462  
                                                             i2l2183 13CA  
                                                             i2l2175 1378  
                                                             i2l2167 1340  
                                                             i2l2159 1310  
                                                             i2l2087 15B4  
                                                             i2l2191 1662  
                                                             i2l2511 0610  
                                                             i2l2503 05E0  
                                                             i2l2431 044E  
                                                             i2l2415 03FA  
                                                             i2l2407 03CA  
                                                             i2l2343 026E  
                                                             i2l2335 024C  
                                                             i2l2327 022E  
                                                             i2l2319 0202  
                                                             i2l2271 00EC  
                                                             i2l2263 00CE  
                                                             i2l2255 00AE  
                                                             i2l2247 0086  
                                                             i2l2239 0070  
                                                             i2l2177 138E  
                                                             i2l2169 1356  
                                                             i2l2097 146E  
                                                             i2l2089 15B8  
                                                             i2l2193 166E  
                                                             i2l2601 0A48  
                                                             i2l2521 062E  
                                                             i2l2513 0620  
                                                             i2l2505 05F4  
                                                             i2l2441 048E  
                                                             i2l2433 0462  
                                                             i2l2425 0418  
                                                             i2l2417 040A  
                                                             i2l2409 03DE  
                                                             i2l2361 02D6  
                                                             i2l2353 028C  
                                                             i2l2345 027E  
                                                             i2l2337 0252  
                                                             i2l2329 0230  
                                                             i2l2281 0102  
                                                             i2l2273 00F2  
                                                             i2l2265 00D2  
                                                             i2l2257 00B2  
                                                             i2l2249 0092  
                                                             i2l2187 13D6  
                                                             i2l2179 1394  
                                                             i2l2099 1476  
                                                             i2l2195 1674  
                                                             i2l2611 0A80  
                                                             i2l2531 081A  
                                                             i2l2523 064A  
                                                             i2l2515 062A  
                                                             i2l2507 05F8  
                                                             i2l2451 04B8  
                                                             i2l2443 0498  
                                                             i2l2435 0466  
                                                             i2l2427 0434  
                                                             i2l2419 0414  
                                                             i2l2371 030C  
                                                             i2l2363 02DA  
                                                             i2l2355 02A8  
                                                             i2l2347 0288  
                                                             i2l2339 0256  
                                                             i2l2291 012A  
                                                             i2l2283 0108  
                                                             i2l2275 00F6  
                                                             i2l2267 00D6  
                                                             i2l2259 00C4  
                                                             i2l2621 0AB2  
                                                             i2l2613 0A82  
                                                             i2l2541 0868  
                                                             i2l2533 0826  
                                                             i2l2525 0664  
                                                             i2l2509 05FC  
                                                             i2l2461 04F0  
                                                             i2l2453 04D2  
                                                             i2l2437 046A  
                                                             i2l2429 044C  
                                                             i2l2381 0344  
                                                             i2l2365 02DE  
                                                             i2l2357 02C0  
                                                             i2l2293 013E  
                                                             i2l2285 0112  
                                                             i2l2277 00FA  
                                                             i2l2269 00DA  
                                                             i2l2199 154A  
                                                             i2l2711 0CAA  
                                                             i2l2703 0C5E  
                                                             i2l2631 0AD0  
                                                             i2l2623 0AC2  
                                                             i2l2615 0A96  
                                                             i2l2607 0A4C  
                                                             i2l2551 08CC  
                                                             i2l2543 087C  
                                                             i2l2535 082C  
                                                             i2l2527 0666  
                                                             i2l2463 0504  
                                                             i2l2455 04D4  
                                                             i2l2439 047E  
                                                             i2l2391 0376  
                                                             i2l2383 0346  
                                                             i2l2367 02F2  
                                                             i2l2359 02C2  
                                                             i2l2295 0150  
                                                             i2l2287 011E  
                                                             i2l2279 00FE  
                                                             i2l2721 0CE0  
                                                             i2l2713 0CAE  
                                                             i2l2705 0C7A  
                                                             i2l2641 0B1E  
                                                             i2l2633 0AEC  
                                                             i2l2625 0ACC  
                                                             i2l2617 0A9A  
                                                             i2l2609 0A68  
                                                             i2l2561 096E  
                                                             i2l2553 08D8  
                                                             i2l2545 0890  
                                                             i2l2537 0840  
                                                             i2l2529 067A  
                                                             i2l2481 056E  
                                                             i2l2473 0522  
                                                             i2l2465 0514  
                                                             i2l2457 04E8  
                                                             i2l2449 049C  
                                                             i2l2393 0386  
                                                             i2l2385 035A  
                                                             i2l2377 0310  
                                                             i2l2369 0302  
                                                             i2l2297 0156  
                                                             i2l2289 0126  
                                                             i2l2731 0D1A  
                                                             i2l2715 0CB2  
                                                             i2l2707 0C94  
                                                             i2l2643 0B22  
                                                             i2l2635 0B04  
                                                             i2l2619 0A9E  
                                                             i2l2571 0992  
                                                             i2l2563 0980  
                                                             i2l2555 08DE  
                                                             i2l2547 08A4  
                                                             i2l2539 0854  
                                                             i2l2491 05A4  
                                                             i2l2483 0572  
                                                             i2l2475 053E  
                                                             i2l2467 051E  
                                                             i2l2459 04EC  
                                                             i2l2395 0390  
                                                             i2l2387 035E  
                                                             i2l2379 032C  
                                                             i2l2299 0160  
                                                             i2l2741 0D4C  
                                                             i2l2733 0D1C  
                                                             i2l2717 0CC6  
                                                             i2l2709 0C96  
                                                             i2l2661 0B8A  
                                                             i2l2645 0B36  
                                                             i2l2637 0B06  
                                                             i2l2573 0996  
                                                             i2l2565 0984  
                                                             i2l2557 08E6  
                                                             i2l2549 08B8  
                                                             i2l2485 0576  
                                                             i2l2477 0558  
                                                             i2l2389 0362  
                                                             i2l2751 0D6A  
                                                             i2l2743 0D5C  
                                                             i2l2735 0D30  
                                                             i2l2727 0CE4  
                                                             i2l2719 0CD6  
                                                             i2l2671 0BCA  
                                                             i2l2663 0B9E  
                                                             i2l2655 0B54  
                                                             i2l2647 0B46  
                                                             i2l2639 0B1A  
                                                             i2l2591 0A12  
                                                             i2l2583 09C8  
                                                             i2l2575 09AA  
                                                             i2l2567 098C  
                                                             i2l2487 058A  
                                                             i2l2479 055A  
                                                             i2l2559 08EC  
                                                             i2l2761 0F56  
                                                             i2l2753 0D86  
                                                             i2l2745 0D66  
                                                             i2l2737 0D34  
                                                             i2l2729 0D00  
                                                             i2l2681 0BF4  
                                                             i2l2673 0BD4  
                                                             i2l2665 0BA2  
                                                             i2l2657 0B70  
                                                             i2l2649 0B50  
                                                             i2l2593 0A16  
                                                             i2l2585 09E4  
                                                             i2l2577 09BA  
                                                             i2l2569 098E  
                                                             i2l2497 05A8  
                                                             i2l2489 059A  
                                                             i2l2771 0FA4  
                                                             i2l2763 0F62  
                                                             i2l2755 0DA0  
                                                             i2l2739 0D38  
                                                             i2l2691 0C2C  
                                                             i2l2683 0C0E  
                                                             i2l2667 0BA6  
                                                             i2l2659 0B88  
                                                             i2l2595 0A1A  
                                                             i2l2587 09FC  
                                                             i2l2579 09C4  
                                                             i2l2499 05C4  
                                                             i2l2781 1008  
                                                             i2l2773 0FB8  
                                                             i2l2765 0F68  
                                                             i2l2757 0DA2  
                                                             i2l2693 0C40  
                                                             i2l2685 0C10  
                                                             i2l2669 0BBA  
                                                             i2l2597 0A2E  
                                                             i2l2589 09FE  
                                                             i2l1991 15E4  
                                                             i2l2791 1044  
                                                             i2l2783 1014  
                                                             i2l2775 0FCC  
                                                             i2l2767 0F7C  
                                                             i2l2759 0DB6  
                                                             i2l2695 0C50  
                                                             i2l2687 0C24  
                                                             i2l2679 0BD8  
                                                             i2l2599 0A3E  
                                                             i2l2793 104C  
                                                             i2l2785 1016  
                                                             i2l2777 0FE0  
                                                             i2l2769 0F90  
                                                             i2l2697 0C5A  
                                                             i2l2689 0C28  
                                                             i2l1987 16D2  
                                                             i2l1995 16F6  
                                                             i2l2787 102C  
                                                             i2l2779 0FF4  
                                                             i2l1989 16D4  
                                                             i2l1997 16FA  
                                                             i2l2789 1030  
                                                             i2l1999 10B6  
                                                             i2l2895 0902  
                                                             _INTCON 0FF2  
                                                             _SSPBUF 0FC9  
                                                             _CmdGPS 0037  
                                                   ?_CloseSerialPort 0038  
                                                             _Data_G 007D  
                                                             _Data_X 000D  
                                                             _Data_Y 0009  
                                                             _Data_Z 0005  
                                           __end_of_ReceiveCMD_USART 13DE  
                                 __end_of_WriteRegister_4bytesCS5532 16AA  
                                         _WriteRegister_4bytesCS5532 1684  
                                           __end_of_ConfigSerialPort 1732  
                                                        _ContaSample 0035  
                                                          ??___aldiv 0040  
                                                   print_value@Bytes 003D  
                                                             clear_0 163E  
                                                             clear_1 164A  
                                                         _SumData_TC 0021  
                                                         _SumData_TS 001D  
                                                   print_value@value 0039  
                                                             isa$std 0001  
                                                   _TransferByte_SPI 16CE  
                                                       _CleanHolding 1732  
                                                        Interrups@ID 005B  
                                             __end_of_ReadByte_USART 1468  
                                                       __mediumconst 0000  
                                                             tblptrh 0FF7  
                                                             tblptrl 0FF6  
                                                             tblptru 0FF8  
                                                __end_of_ResetCS5532 14DC  
                                                        ?_InitCS5532 0038  
                                                         __accesstop 0060  
                                            __end_of__initialization 1650  
                                                       ?_print_value 0039  
                                                      ?_OpenPort_SPI 0038  
                                                      ___rparam_used 0001  
                                                   ??_OpenSerialPort 0089  
                                              __end_of_ClosePort_SPI 178A  
                                                     __pcstackCOMRAM 0038  
                                                    ?_ReadByte_USART 0038  
                                                  __end_of_Interrups 1078  
                                                          ?_ReadAD24 0046  
                                                         __pbssBANK0 0060  
                                                     ??_OpenPort_SPI 0089  
                                                        _ResetCS5532 1468  
                                                            i2u50_40 170E  
                                                            i2u50_41 1708  
                                                            i2u51_40 10CA  
                                                            i2u51_41 10C4  
                                                            i2u52_40 10F2  
                                                            i2u60_40 1414  
                                                            i2u52_41 10EC  
                                                            i2u60_41 140E  
                                                            i2u53_40 1132  
                                                            i2u61_40 142A  
                                                            i2u53_41 112C  
                                                            i2u61_41 1424  
                                                            i2u54_40 115C  
                                                            i2u62_40 143E  
                                                            i2u70_40 138C  
                                                            i2u54_41 1156  
                                                            i2u62_41 1438  
                                                            i2u70_41 1386  
                                                            i2u55_40 118A  
                                                            i2u63_40 1458  
                                                            i2u71_40 13A8  
                                                            i2u55_41 1184  
                                                            i2u63_41 1452  
                                                            i2u71_41 13A2  
                                                            i2u56_40 11C4  
                                                            i2u64_40 15DA  
                                                            i2u72_40 1588  
                                                            i2u80_40 04E6  
                                                            i2u56_41 11BE  
                                                            i2u64_41 15D4  
                                                            i2u72_41 1582  
                                                            i2u80_41 04E0  
                                                            i2u49_40 16EA  
                                                            i2u57_40 1202  
                                                            i2u65_40 148A  
                                                            i2u81_40 056C  
                                                            i2u73_40 0034  
                                                            i2u49_41 16E4  
                                                            i2u57_41 11FC  
                                                            i2u65_41 1484  
                                                            i2u81_41 0566  
                                                            i2u73_41 002E  
                                                            i2u58_40 122C  
                                                            i2u66_40 1324  
                                                            i2u90_40 0C22  
                                                            i2u82_40 05F2  
                                                            i2u74_40 0046  
                                                            i2u58_41 1226  
                                                            i2u66_41 131E  
                                                            i2u90_41 0C1C  
                                                            i2u82_41 05EC  
                                                            i2u74_41 0040  
                                                            i2u59_40 1402  
                                                            i2u67_40 1340  
                                                            i2u91_40 0CA8  
                                                            i2u83_40 0678  
                                                            i2u75_40 01B4  
                                                            i2u59_41 13FC  
                                                            i2u67_41 133A  
                                                            i2u91_41 0CA2  
                                                            i2u83_41 0672  
                                                            i2u75_41 01AE  
                                                            i2u68_40 1354  
                                                            i2u92_40 0D2E  
                                                            i2u84_40 096C  
                                                            i2u76_40 02D4  
                                                            i2u68_41 134E  
                                                            i2u92_41 0D28  
                                                            i2u84_41 0966  
                                                            i2u76_41 02CE  
                                                            i2u69_40 1370  
                                                            i2u93_40 0DB4  
                                                            i2u85_40 097E  
                                                            i2u77_40 0358  
                                                            i2u69_41 136A  
                                                            i2u93_41 0DAE  
                                                            i2u85_41 0978  
                                                            i2u77_41 0352  
                                                            i2u94_40 102A  
                                                            i2u86_40 0A10  
                                                            i2u78_40 03DC  
                                                            i2u94_41 1024  
                                                            i2u86_41 0A0A  
                                                            i2u78_41 03D6  
                                                            i2u95_40 1042  
                                                            i2u87_40 0A94  
                                                            i2u79_40 0460  
                                                            i2u95_41 103C  
                                                            i2u87_41 0A8E  
                                                            i2u79_41 045A  
                                                            i2u88_40 0B18  
                                                            i2u88_41 0B12  
                                                            i2u89_40 0B9C  
                                                            i2u89_41 0B96  
                                                            i2u97_47 00B8  
                                                            i2u98_47 00E0  
                                                            i2u99_47 0130  
                                                         ??_ReadAD24 004A  
                                                            _Data_TC 0001  
                                                            _Data_TS 0081  
                                                            __Hparam 0000  
                                                            __Lparam 0000  
                                                            ___aldiv 10B4  
                                                ReadAD24@cmd_convert 0046  
                                       ??_WriteRegister_4bytesCS5532 0039  
                                                       __psmallconst 107C  
                                                            __pcinit 1638  
                                                            __ramtop 0600  
                                                            __ptext0 14DC  
                                                            __ptext1 176A  
                                                            __ptext2 1772  
                                                            __ptext3 1714  
                                                            __ptext4 1750  
                                                            __ptext5 177A  
                                                            __ptext6 1782  
                                                            __ptext8 16AA  
                                                            __ptext9 1546  
                                                          _T2CONbits 0FCA  
                                                        _SumData_GND 0085  
                                                   ___aldiv@dividend 0038  
                                               end_of_initialization 1650  
                                                WriteByte_USART@byte 0038  
                                           __end_of_TransferByte_SPI 16F2  
                                                      __Lmediumconst 0000  
                                                  ?_ReceiveCMD_USART 0038  
                                                  ?_ConfigSerialPort 0038  
                                                 ??_ReceiveCMD_USART 003B  
                                                          _RCSTAbits 0FAB  
                                                   ___aldiv@quotient 0042  
                                                            postinc0 0FEE  
                                                 ??_ConfigSerialPort 0089  
                                                  ??_WriteByte_USART 0038  
                                                          _PORTCbits 0F82  
                                               __end_of_OpenPort_SPI 177A  
                                                     _ConfigPort_SPI 1750  
                                                          _TRISCbits 0F94  
                                                      ?_print_string 0039  
                                                       ??_InitCS5532 003A  
                                                          _Data_AUX0 0079  
                                                          _Data_AUX1 0075  
                                                          _Data_AUX2 0071  
                                               TransferByte_SPI@data 0038  
                                                          _TXSTAbits 0FAC  
                                                          _BufferDAT 0060  
                                                   ??_ReadByte_USART 0038  
                                                          _BufferSPI 0031  
                                                 __end_of_InitCS5532 1638  
                                             __end_of_ConfigPort_SPI 176A  
                                                start_initialization 1638  
                                                     ??_print_string 003B  
                                            TransmitCMD_USART@CMD_ID 003B  
                                                          _Interrups 0008  
                                         ReceiveCMD_USART@conta_byte 003B  
                                                  _TransmitDAT_USART 1546  
                                                          _SumData_X 002D  
                                                          _SumData_Y 0029  
                                                          _SumData_Z 0025  
                                                  _TransmitCMD_USART 165E  
                                                 ?_TransmitDAT_USART 0038  
                                                 ?_TransmitCMD_USART 0038  
                                                       ?_ResetCS5532 0038  
                                                    ?_ConfigPort_SPI 0038  
                                                        __pbssCOMRAM 0001  
                                                ??_TransmitDAT_USART 003B  
                                                      __pcstackBANK0 0089  
                                                ??_TransmitCMD_USART 003B  
                                                         ?_Interrups 0038  
                                          __end_of_TransmitDAT_USART 159A  
                                          __end_of_TransmitCMD_USART 1684  
                                                          __pintcode 0008  
                                                           ?___aldiv 0038  
                                                    print_string@str 0039  
                                                        __smallconst 107C  
                                                  ??_CloseSerialPort 0089  
                                         ?_ReadRegister_4bytesCS5532 0038  
                                                    ___aldiv@divisor 003C  
                                                    ___aldiv@counter 0040  
                                                           _LATAbits 0F89  
                                                           _LATBbits 0F8A  
                                                  ?_TransferByte_SPI 0038  
                                                    _WriteByte_USART 16F2  
                                                       _OpenPort_SPI 1772  
                                                           _PIE1bits 0F9D  
                                                 ??_TransferByte_SPI 0038  
                                                           i2u100_47 0260  
                                                           i2u101_47 02E4  
                                                           i2u110_47 0AA4  
                                                           i2u102_47 0368  
                                                           i2u111_47 0B28  
                                                           i2u103_47 03EC  
                                                           i2u112_47 0BAC  
                                                           i2u104_47 0470  
                                                           i2u113_47 0C32  
                                                           i2u105_47 04F6  
                                                           i2u114_47 0CB8  
                                                           i2u106_47 057C  
                                                           i2u115_47 0D3E  
                                                           i2u107_47 0602  
                                                           i2u116_47 1498  
                                                           i2u108_47 099C  
                                                           i2u117_47 14B6  
                                                           i2u109_47 0A20  
                                                           i2u118_47 14C8  
                                                           i2u119_47 173A  
                                                           _PIR1bits 0F9E  
                                                           _RCONbits 0FD0  
                                                      _ClosePort_SPI 1782  
                                               __end_of_print_string 15E0  
                                                      ?_CleanHolding 0038  
                                                         _ADCON1bits 0FC1  
                                                           _Data_GND 006D  
                                          ReceiveCMD_USART@data_byte 003C  
                                                        _INTCON2bits 0FF1  
                                                           _ReadAD24 11EC  
                                                     Interrups@conta 005C  
                                                        ??_Interrups 0053  
                                                      ??_print_value 003D  
                                  __end_of_ReadRegister_4bytesCS5532 160E  
                                                           __Hrparam 0000  
                                                           __Lrparam 0000  
                                   ReadRegister_4bytesCS5532@command 0039  
                                                     ?_ClosePort_SPI 0038  
                                                     ??_CleanHolding 0053  
                                                   ResetCS5532@conta 003B  
                                                           __ptext10 165E  
                                                           __ptext11 159A  
                                                           __ptext20 10B4  
                                                           __ptext12 16F2  
                                                           __ptext21 15E0  
                                                           __ptext13 1468  
                                                           __ptext22 16CE  
                                                           __ptext14 1302  
                                                           __ptext15 13DE  
                                                           __ptext16 160E  
                                                           __ptext17 1684  
                                                           __ptext18 1732  
                                                           __ptext19 11EC  
                                            __end_of_WriteByte_USART 1714  
                                                       _SumData_AUX0 0019  
                                                       _SumData_AUX1 0015  
                                                       _SumData_AUX2 0011  
                                                __end_of_print_value 16CE  
                                                           isa$xinst 0000  
                                                   ??_ConfigPort_SPI 0089  
                                        ?_WriteRegister_4bytesCS5532 0038  
                                                           int$flags 005D  
                                  WriteRegister_4bytesCS5532@command 0039  
                                                     _OpenSerialPort 176A  
                                               ReadAD24@flag_convert 004E  
                                                         _INTCONbits 0FF2  
                                                           intlevel2 178A  
                                                ReadByte_USART@Ready 003A  
                                                    ??_ClosePort_SPI 0089  
                                                ReadByte_USART@conta 0039  
                                                      _ControlSample 0036  
                                                    _CloseSerialPort 177A  
                                             __end_of_OpenSerialPort 1772  
                                                   _ReceiveCMD_USART 1302  
                                                   _ConfigSerialPort 1714  
                                                 ReadByte_USART@data 0038  
                                                       ___aldiv@sign 0041  
                                                        _SSPCON1bits 0FC6  
                                                       _print_string 159A  
                                                   ?_WriteByte_USART 0038  
                                               __end_of_CleanHolding 1750  
                                        ??_ReadRegister_4bytesCS5532 0039  
                                                        _print_value 16AA  
                                                    ReadAD24@DataADC 004F  
